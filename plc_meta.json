[
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 0,
    "text": "INTERNATIONAL \nSTANDARD \nIEC\n61131-3\n Second edition\n2003-01\n \nProgrammable controllers – \nPart 3: \nProgramming languages \n \nAutomates programmables – \nPartie 3: \nLangages de programmation \n \n \nReference number \nIEC 61131-3:2003(E) \nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n \n \n \n \nPublication numbering \nAs from 1 January 1997 all IEC publications are issued with a designation in the \n60000 series. For example, IEC 34-1 is now referred to as IEC 60034-1. \nConsolidated editions \nThe IEC is now publishing consolidated versions of its publications. For example, \nedition numbers 1.0, 1.1 and 1.2 refer, respectively, to the base publication, the \nbase publication incorporating amendment 1 and the base publication incorporating \namendments 1 and 2.\n \nFurther information on IEC publications \nThe technical content of IEC publications is kept under constant review by the IEC, \nthus ensuring that the content reflects current technology. Information relating to \nthis publication, including its validity, is available in the IE"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 1,
    "text": "cations is kept under constant review by the IEC, \nthus ensuring that the content reflects current technology. Information relating to \nthis publication, including its validity, is available in the IEC Catalogue of \npublications (see below) in addition to new editions, amendments and corrigenda. \nInformation on the subjects under consideration and work in progress undertaken \nby the technical committee which has prepared this publication, as well as the list \nof publications issued, is also available from the following: \n• IEC Web Site ( www.iec.ch\n) \n• Catalogue of IEC publications  \nThe on-line catalogue on the IEC web site ( http://www.iec.ch/searchpub/cur_fut.htm) \nenables you to search by a variety of criteria including text searches, technical \ncommittees and date of publication. On-line information is also available on \nrecently issued publications, withdrawn and replaced publications, as well as \ncorrigenda. \n \n• IEC Just Published  \nThis summary of recently issued publications ( http://www.iec.ch/online_news/  \njustpub/jp_entry.htm ) is also available by email. Please contact the Customer \nService Centre (see below) for further information. \n• Customer Service Centre  \nIf"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 2,
    "text": "( http://www.iec.ch/online_news/  \njustpub/jp_entry.htm ) is also available by email. Please contact the Customer \nService Centre (see below) for further information. \n• Customer Service Centre  \nIf you have any questions regarding this publication or need further assistance, \nplease contact the Customer Service Centre:  \n \nEmail: custserv@iec.ch  \nTel:  +41 22 919 02 11 \nFax:  +41 22 919 03 00  \n \n \nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n \n \n \n \n \n \n \n \n \nINTERNATIONAL \nSTANDARD \nIEC\n61131-3\n Second edition\n2003-01\n \nProgrammable controllers – \nPart 3: \nProgramming languages \n \nAutomates programmables – \nPartie 3: \nLangages de programmation \n \n IEC 2003    Copyright - all rights reserved  \nNo part of this publication may be reproduced or utilized in any form or by any means, electronic or \nmechanical, including photocopying and microfilm, without permission in writing from the publisher. \nInternational Electrotechnical Commission,  3, rue de Varembé, PO Box 131, CH-1211 Geneva 20, Switzerland\nTelephone: +41 22 919 02 11"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 3,
    "text": "and microfilm, without permission in writing from the publisher. \nInternational Electrotechnical Commission,  3, rue de Varembé, PO Box 131, CH-1211 Geneva 20, Switzerland\nTelephone: +41 22 919 02 11 Telefax: +41 22 919 03 00 E-mail: inmail@iec.ch  Web: www.iec.ch  \nFor price, see current catalo gue \nPRICE CODE \n \nCommission Electrotechnique Internationale\nInternational Electrotechnical Commission\nМежд\nународная Электротехническая Комиссия\nXE \nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n – 2 – 61131-3  IEC:2003(E) \nCONTENTS \nFOREWORD ....................................................................................................................................8 \n1   General........................................................................................................................................9 \n1.1  Scope.........................................................................................................................................9 \n1.2  Normative references ........................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 4,
    "text": "..................................................................................................................................9 \n1.2  Normative references ................................................................................................................9 \n1.3  Definitions..................................................................................................................................9 \n1.4  Overview and general requirements .......................................................................................14 \n1.4.1  Software model.....................................................................................................................14 \n1.4.2  Communication model..........................................................................................................16 \n1.4.3  Programming model .............................................................................................................18 \n1.5  Compliance..............................................................................................................................19 \n1.5.1  System compliance ............................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 5,
    "text": "..............................................................................................................19 \n1.5.1  System compliance ..............................................................................................................20 \n1.5.2  Program compliance.............................................................................................................22 \n2  Common elements .....................................................................................................................23 \n2.1  Use of printed characters ........................................................................................................23 \n2.1.1  Character set ........................................................................................................................23 \n2.1.2  Identifiers ..............................................................................................................................23 \n2.1.3  Keywords..............................................................................................................................24 \n2.1.4 Use of white space .................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 6,
    "text": ".........................................................................................................24 \n2.1.4 Use of white space ................................................................................................................24 \n2.1.5  Comments ............................................................................................................................24 \n2.1.6  Pragmas ...............................................................................................................................25 \n2.2  External representation of data ...............................................................................................25 \n2.2.1  Numeric literals.....................................................................................................................25 \n2.2.2  Character string literals ........................................................................................................26 \n2.2.3  Time literals ..........................................................................................................................28 \n2.2.3.1  Duration .........................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 7,
    "text": "........................................................................................................28 \n2.2.3.1  Duration .............................................................................................................................28 \n2.2.3.2  Time of day and date.........................................................................................................29 \n2.3  Data types ...............................................................................................................................29 \n2.3.1  Elementary data types..........................................................................................................30 \n2.3.2  Generic data types ...............................................................................................................31 \n2.3.3  Derived data types................................................................................................................32 \n2.3.3.1  Declaration ........................................................................................................................32 \n2.3.3.2  Initialization........................................................................"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 8,
    "text": ".....................................................................................................32 \n2.3.3.2  Initialization........................................................................................................................33 \n2.3.3.3 Usage .................................................................................................................................35 \n2.4  Variables..................................................................................................................................36 \n2.4.1  Representation .....................................................................................................................36 \n2.4.1.1  Single-element variables ...................................................................................................36 \n2.4.1.2  Multi-element variables .....................................................................................................38 \n2.4.2  Initialization...........................................................................................................................38 \n2.4.3  Declaration ...................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 9,
    "text": ".............................................................................................................38 \n2.4.3  Declaration ...........................................................................................................................39 \n2.4.3.1  Type assignment ...............................................................................................................41 \n2.4.3.2  Initial value assignment .....................................................................................................42 \n2.5  Program organization units .....................................................................................................45 \n2.5.1  Functions ..............................................................................................................................45 \n2.5.1.1  Representation ..................................................................................................................46 \n2.5.1.2  Execution control...............................................................................................................49 \n2.5.1.3  Declaration .........................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 10,
    "text": ".....................................................................................................49 \n2.5.1.3  Declaration ........................................................................................................................50 \n2.5.1.4  Typing, overloading, and type conversion.........................................................................52 \n2.5.1.5  Standard functions.............................................................................................................55 \n2.5.1.5.1  Type conversion functions..............................................................................................55 \n2.5.1.5.2  Numerical functions........................................................................................................56 \n2.5.1.5.3  Bit string functions ..........................................................................................................59 \n2.5.1.5.4  Selection and comparison functions...............................................................................59 \n2.5.1.5.5  Character string functions ..............................................................................................62 \n2.5.1."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 11,
    "text": "......................................................59 \n2.5.1.5.5  Character string functions ..............................................................................................62 \n2.5.1.5.6  Functions of time data types ..........................................................................................64 \n2.5.1.5.7  Functions of enumerated data types..............................................................................66 \nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 3 –\n2.5.2  Function blocks.....................................................................................................................66\n2.5.2.1  Representation ..................................................................................................................67\n2.5.2.1a)  Use of EN and ENO in function blocks ............................................................................68\n2.5.2.2  Declaration ......................................................................................"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 12,
    "text": "nction blocks ............................................................................68\n2.5.2.2  Declaration ........................................................................................................................69\n2.5.2.3  Standard function blocks ...................................................................................................77\n2.5.2.3.1  Bistable elements ...........................................................................................................77\n2.5.2.3.2  Edge detection................................................................................................................78\n2.5.2.3.3  Counters .........................................................................................................................78\n2.5.2.3.4  Timers.............................................................................................................................81\n2.5.2.3.5  Communication function blocks......................................................................................83\n2.5.3  Programs .................................................................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 13,
    "text": "...................................................................83\n2.5.3  Programs ..............................................................................................................................83\n2.6  Sequential Function Chart (SFC) elements.............................................................................84\n2.6.1  General.................................................................................................................................84\n2.6.2  Steps.....................................................................................................................................84\n2.6.3  Transitions ............................................................................................................................86\n2.6.4  Actions..................................................................................................................................89\n2.6.4.1  Declaration ........................................................................................................................89\n2.6.4.2  Association with steps ................................................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 14,
    "text": "....................................................................89\n2.6.4.2  Association with steps .......................................................................................................91\n2.6.4.3  Action blocks .....................................................................................................................92\n2.6.4.4  Action qualifiers .................................................................................................................93\n2.6.4.5  Action control.....................................................................................................................94\n2.6.5  Rules of evolution.................................................................................................................99\n2.6.6  Compatibility of SFC elements ...........................................................................................107\n2.6.7  SFC Compliance requirements ..........................................................................................108\n2.7  Configuration elements..........................................................................................................108\n2.7.1  Configurations,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 15,
    "text": "....................................108\n2.7  Configuration elements..........................................................................................................108\n2.7.1  Configurations, resources, and access paths ....................................................................110\n2.7.2  Tasks ..................................................................................................................................114\n3  Textual languages ....................................................................................................................123\n3.1  Common elements ................................................................................................................123\n3.2  Instruction list (IL) ..................................................................................................................123\n3.2.1  Instructions .........................................................................................................................123\n3.2.2  Operators, modifiers and operands....................................................................................124\n3.2.3  Functions and function blocks....................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 16,
    "text": "...........123\n3.2.2  Operators, modifiers and operands....................................................................................124\n3.2.3  Functions and function blocks............................................................................................126\n3.3  Structured Text (ST)..............................................................................................................129\n3.3.1  Expressions ........................................................................................................................129\n3.3.2  Statements .........................................................................................................................131\n3.3.2.1  Assignment statements ...................................................................................................133\n3.3.2.2  Function and function block control statements ..............................................................133\n3.3.2.3  Selection statements .......................................................................................................133\n3.3.2.4  Iteration statements.............................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 17,
    "text": ".........................................................................................133\n3.3.2.4  Iteration statements.........................................................................................................134\n4  Graphic languages ...................................................................................................................135\n4.1  Common elements ................................................................................................................135\n4.1.1 Representation of lines and blocks .....................................................................................135\n4.1.2  Direction of flow in networks...............................................................................................135\n4.1.3  Evaluation of networks .......................................................................................................136\n4.1.4  Execution control elements ................................................................................................138\n4.2  Ladder diagram (LD) .............................................................................................................139\n4.2.1  Power rails"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 18,
    "text": "........................................138\n4.2  Ladder diagram (LD) .............................................................................................................139\n4.2.1  Power rails..........................................................................................................................139\n4.2.2  Link elements and states....................................................................................................139\n4.2.3  Contacts .............................................................................................................................140\n4.2.4  Coils....................................................................................................................................140\n4.2.5  Functions and function blocks............................................................................................140\n4.2.6  Order of network evaluation ...............................................................................................141\n4.3  Function Block Diagram (FBD)..............................................................................................143\n4.3.1  General..................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 19,
    "text": "................141\n4.3  Function Block Diagram (FBD)..............................................................................................143\n4.3.1  General...............................................................................................................................143\n4.3.2  Combination of elements....................................................................................................143\n4.3.3  Order of network evaluation ...............................................................................................143\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 4 – 61131-3  IEC:2003(E)\nANNEX A (normative)  Specification method for textual languages ............................................144\nA.1  Syntax ...................................................................................................................................144\nA.1.1    Terminal symbols.............................................................................................................144\nA.1.2    No"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 20,
    "text": "...............................................144\nA.1.1    Terminal symbols.............................................................................................................144\nA.1.2    Non-terminal symbols ......................................................................................................144\nA.1.3   Production rules ................................................................................................................145\nA.2  Semantics .............................................................................................................................145\nANNEX B (normative)  Formal specifications of language elements...........................................146\nB.0  Programming model..............................................................................................................146\nB.1  Common elements................................................................................................................146\nB.1.1 Letters, digits and identifiers ...............................................................................................146\nB.1.2  Constants ......................................................"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 21,
    "text": "tters, digits and identifiers ...............................................................................................146\nB.1.2  Constants ...........................................................................................................................147\nB.1.2.1   Numeric literals ..............................................................................................................147\nB.1.2.2  Character strings.............................................................................................................147\nB.1.2.3 Time literals......................................................................................................................148\nB.1.2.3.1  Duration........................................................................................................................148\nB.1.2.3.2  Time of day and date ...................................................................................................148\nB.1.3   Data types .........................................................................................................................149\nB.1.3.1  Elementary data types ..................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 22,
    "text": "..................................................................................................................149\nB.1.3.1  Elementary data types ....................................................................................................149\nB.1.3.2  Generic data types..........................................................................................................149\nB.1.3.3  Derived data types ..........................................................................................................149\nB.1.4  Variables ............................................................................................................................151\nB.1.4.1  Directly represented variables ........................................................................................151\nB.1.4.2  Multi-element variables ...................................................................................................151\nB.1.4.3  Declaration and initialization ...........................................................................................152\nB.1.5  Program organization units .........................................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 23,
    "text": "........................................................................152\nB.1.5  Program organization units ................................................................................................154\nB.1.5.1  Functions.........................................................................................................................154\nB.1.5.2  Function blocks ...............................................................................................................155\nB.1.5.3  Programs.........................................................................................................................156\nB.1.6  Sequential function chart elements....................................................................................156\nB.1.7  Configuration elements ......................................................................................................157\nB.2  Language IL (Instruction List) ...............................................................................................159\nB.2.1  Instructions and operands..................................................................................................159\nB.2.2  Operators .............."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 24,
    "text": "...............................159\nB.2.1  Instructions and operands..................................................................................................159\nB.2.2  Operators ...........................................................................................................................159\nB.3  Language ST (Structured Text) ............................................................................................160\nB.3.1  Expressions........................................................................................................................160\nB.3.2  Statements .........................................................................................................................160\nB.3.2.1  Assignment statements...................................................................................................161\nB.3.2.2  Subprogram control statements......................................................................................161\nB.3.2.3  Selection statements.......................................................................................................161\nB.3.2.4  Iteration statements............................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 25,
    "text": "election statements.......................................................................................................161\nB.3.2.4  Iteration statements.........................................................................................................161\nANNEX C (normative)  Delimiters and keywords.........................................................................162\nANNEX D (normative)  Implementation-dependent parameters..................................................165\nANNEX E (normative)  Error conditions .......................................................................................167\nANNEX F (informative)  Examples ...............................................................................................169\nF.1  Function WEIGH ...................................................................................................................169\nF.2  Function block CMD_MONITOR...........................................................................................170\nF.3  Function block FWD_REV_MON ..........................................................................................173\nF.4  Function block STACK_INT........................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 26,
    "text": "................170\nF.3  Function block FWD_REV_MON ..........................................................................................173\nF.4  Function block STACK_INT...................................................................................................178\nF.5  Function block MIX_2_BRIX .................................................................................................183\nF.6  Analog signal processing ......................................................................................................186\nF.6.1  Function block LAG1..........................................................................................................187\nF.6.2  Function block DELAY........................................................................................................187\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 5 –\nF.6.3  Function block AVERAGE....................................................................................................188\nF.6.4  Function block"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 27,
    "text": "`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 5 –\nF.6.3  Function block AVERAGE....................................................................................................188\nF.6.4  Function block INTEGRAL..................................................................................................188\nF.6.5  Function block DERIVATIVE.............................................................................................189\nF.6.6  Function block HYSTERESIS.............................................................................................189\nF.6.7  Function block LIMITS_ALARM.........................................................................................190\nF.6.8  Structure ANALOG_LIMITS................................................................................................190\nF.6.9  Function block ANALOG_MONITOR.....................................................................................191\nF.6.10 Function block PID............................................................................................................192\nF.6.11 Function block DIFFEQ....................................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 28,
    "text": "...................................................................................192\nF.6.11 Function block DIFFEQ.....................................................................................................193\nF.6.12  Function block RAMP........................................................................................................194\nF.6.13  Function block TRANSFER................................................................................................195\nF.7  Program GRAVEL...................................................................................................................195\nF.8  Program AGV.........................................................................................................................203\nF.9  Use of enumerated data types ..............................................................................................206\nF.10  Function block RTC (Real Time Clock)................................................................................206\nF.11  Function block ALRM_INT...................................................................................................206\nANNEX G (informative)  Reference character se"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 29,
    "text": "...................206\nF.11  Function block ALRM_INT...................................................................................................206\nANNEX G (informative)  Reference character set........................................................................208\nIndex ............................................................................................................................................210\nTable 1 - Character set features.....................................................................................................23\nTable 2 - Identifier features.............................................................................................................24\nTable 3 - Comment feature.............................................................................................................25\nTable 3a - Pragma feature..............................................................................................................25\nTable 4 - Numeric literals................................................................................................................26\nTable 5 - Character string literal features ...................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 30,
    "text": "erals................................................................................................................26\nTable 5 - Character string literal features .......................................................................................27\nTable 6 - Two-character combinations in character strings ...........................................................28\nTable 7 - Duration literal features ...................................................................................................29\nTable 8 - Date and time of day literals............................................................................................29\nTable 9 - Examples of date and time of day literals .......................................................................29\nTable 10 - Elementary data types ..................................................................................................30\nTable 11 - Hierarchy of generic data types ....................................................................................32\nTable 12 - Data type declaration features ......................................................................................33\nTable 13 - Default initial values"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 31,
    "text": ".................................32\nTable 12 - Data type declaration features ......................................................................................33\nTable 13 - Default initial values of elementary data types..............................................................34\nTable 14 - Data type initial value declaration features ...................................................................35\nTable 15 - Location and size prefix features for directly represented variables.............................37\nTable 16a - Variable declaration keywords ....................................................................................39\nTable 16b - Usages of VAR_GLOBAL, VAR_EXTERNAL and CONSTANT declarations ............41\nTable 17 - Variable type assignment features................................................................................41\nTable 18 - Variable initial value assignment features.....................................................................43\nTable 19 - Graphical negation of Boolean signals .........................................................................47\nTable 19a - Textual invocation of functions for formal and non-formal argument"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 32,
    "text": "e 19 - Graphical negation of Boolean signals .........................................................................47\nTable 19a - Textual invocation of functions for formal and non-formal argument list ....................49\nTable 20 - Use of EN input and ENO output ....................................................................................50\nTable 20a - Function  features........................................................................................................51\nTable 21 - Typed and overloaded functions...................................................................................53\nTable 22 - Type conversion function features ................................................................................55\nTable 23 - Standard functions of one numeric variable..................................................................57\nTable 24 - Standard arithmetic functions........................................................................................58\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 33,
    "text": "8\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 6 – 61131-3  IEC:2003(E)\nTable 25 - Standard bit shift functions............................................................................................59\nTable 26 - Standard bitwise Boolean functions..............................................................................60\nTable 27 - Standard selection functionsd........................................................................................61\nTable 28 - Standard comparison functions.....................................................................................62\nTable 29 - Standard character string functions ..............................................................................63\nTable 30 - Functions of time data types .........................................................................................64\nTable 31 - Functions of enumerated data types.............................................................................66\nTable 32 - Examples of function block I/O variable usage ........."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 34,
    "text": "......64\nTable 31 - Functions of enumerated data types.............................................................................66\nTable 32 - Examples of function block I/O variable usage .............................................................68\nTable 33 - Function block declaration and usage features ............................................................71\nTable 34 - Standard bistable function blocks\n a ...............................................................................77\nTable 35 - Standard edge detection function blocks ......................................................................78\nTable 36 - Standard counter function blocks..................................................................................79\nTable 37 - Standard timer function blocks......................................................................................81\nTable 38 - Standard timer function blocks - timing diagrams.........................................................82\nTable 39 - Program declaration features........................................................................................83\nTable 40 - Step features ......................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 35,
    "text": "...82\nTable 39 - Program declaration features........................................................................................83\nTable 40 - Step features .................................................................................................................85\nTable 41 - Transitions and transition conditions.............................................................................87\nTable 42 - Declaration of actions\n a,b................................................................................................90\nTable 43 - Step/action association .................................................................................................92\nTable 44 - Action block features.....................................................................................................93\nTable 45 - Action qualifiers.............................................................................................................94\nTable 45a - Action control features ................................................................................................98\nTable 46 - Sequence evolution..................................................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 36,
    "text": ".....................................................................................98\nTable 46 - Sequence evolution.....................................................................................................101\nTable 47 - Compatible SFC features............................................................................................108\nTable 48 - SFC minimal compliance requirements ......................................................................108\nTable 49 - Configuration and resource declaration features ........................................................112\nTable 50 - Task features...............................................................................................................116\nTable 51a - Examples of instruction fields....................................................................................124\nTable 51b - Parenthesized expression features for IL language..................................................125\nTable 52 - Instruction List operators.............................................................................................125\nTable 53 - Function Block invocation and Function invocation features for IL language....."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 37,
    "text": "ist operators.............................................................................................125\nTable 53 - Function Block invocation and Function invocation features for IL language.............127\nTable 54 - Standard Function Block input operators for IL language...........................................129\nTable 55 - Operators of the ST language.....................................................................................131\nTable 56 - ST language statements .............................................................................................132\nTable 57 - Representation of lines and blocks .............................................................................136\nTable 58 - Graphic execution control elements............................................................................138\nTable 59 - Power rails...................................................................................................................139\nTable 60 - Link elements ..............................................................................................................140\nTable 61 - Contacts\n a ............................................................."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 38,
    "text": "s ..............................................................................................................140\nTable 61 - Contacts\n a ....................................................................................................................141\nTable 62 - Coils ............................................................................................................................142\nTable C.1 - Delimiters...................................................................................................................162\nTable C.2 - Keywords ...................................................................................................................163\nTable D.1 - Implementation-dependent parameters ....................................................................165\nTable E.1 - Error conditions..........................................................................................................167\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 7 –\nTable G.1 - Character represe"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 39,
    "text": "ided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 7 –\nTable G.1 - Character representations.........................................................................................208\nTable G.2 - Character encodings .................................................................................................209\nFigure 1 - Software model ..............................................................................................................15\nFigure 2 a) - Data flow connection within a program......................................................................16\nFigure 2 b) - Communication via GLOBAL variables.......................................................................16\nFigure 2 c) - Communication function blocks .................................................................................17\nFigure 2 d) - Communication via access paths ..............................................................................17\nFigure 3 - Combination of programmable controller language elements .......................................19\nFigure 4 - Exampl"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 40,
    "text": "......................................................................17\nFigure 3 - Combination of programmable controller language elements .......................................19\nFigure 4 - Examples of function usage...........................................................................................45\nFigure 5 - Use of formal argument names......................................................................................48\nFigure 6 - Examples of function declarations and usage ...............................................................52\nFigure 7 - Examples of explicit type conversion with overloaded functions ...................................54\nFigure 8 - Examples of explicit type conversion with typed functions ............................................54\nFigure 9 - Function block instantiation examples ...........................................................................67\nFigure 10 - Examples of function block declarations......................................................................70\nFigure 11 a) - Graphical use of a function block name as an input variable ..................................73\nFigure 11 b) - Graphical use of a function blo"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 41,
    "text": ".......................................70\nFigure 11 a) - Graphical use of a function block name as an input variable ..................................73\nFigure 11 b) - Graphical use of a function block name as an in-out variable.................................74\nFigure 11 c) - Graphical use of a function block name as an external variable .............................75\nFigure 12 - Declaration and usage of in-out variables in function blocks.......................................76\nFigure 14 - ACTION_CONTROL function block - External interface (Not visible to the user) ..........95\nFigure 15 a) - ACTION_CONTROL function block body with “final scan” logic .............................96\nFigure 15 b) - ACTION_CONTROL function block body without “final scan” logic........................97\nFigure 16 a) - Action control example - SFC representation..........................................................98\nFigure 16 b) - Action control example - functional equivalent ........................................................99\nFigure 17 - Examples of SFC evolution rules...............................................................................105\nFigure 18 a) - Examples of SFC err"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 42,
    "text": ".....................................99\nFigure 17 - Examples of SFC evolution rules...............................................................................105\nFigure 18 a) - Examples of SFC errors: an “unsafe” SFC............................................................106\nFigure 18 b) - Examples of SFC errors: an “unreachable” SFC...................................................107\nFigure 19 a) - Graphical example of a configuration ....................................................................109\nFigure 19 b) - Skeleton function block and program declarations for configuration example ......110\nFigure 20 - Examples of CONFIGURATION and RESOURCE declaration features........................113\nFigure 21 a) - Synchronization of function blocks with explicit task associations ........................120\nFigure 21 b) - Synchronization of function blocks with implicit task associations ........................121\nFigure 21 c) - Explicit task associations equivalent to figure 21 b) ..............................................122\nFigure 22 - EXIT statement example...........................................................................................134\nFigure 23 -"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 43,
    "text": "ure 21 b) ..............................................122\nFigure 22 - EXIT statement example...........................................................................................134\nFigure 23 - Feedback path example.............................................................................................137\nFigure 24 - Boolean OR examples ................................................................................................143\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 8 – 61131-3  IEC:2003(E)\nINTERNATIONAL ELECTROTECHNICAL COMMISSION\n____________\nPROGRAMMABLE CONTROLLERS –\nPart 3: Programming languages\nFOREWORD\n1) The IEC (International Electrotechnical Commission) is a worldwide organization for standardization comprising\nall national electrotechnical committees (IEC National Committees). The object of the IEC is to promote\ninternational co-operation on all questions concerning standardization in the electrical and electronic fields. To\nthis end and in addition to other activities, the IEC publishes Int"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 44,
    "text": "IEC is to promote\ninternational co-operation on all questions concerning standardization in the electrical and electronic fields. To\nthis end and in addition to other activities, the IEC publishes International Standards. Their preparation is\nentrusted to technical committees; any IEC National Committee interested in the subject dealt with may\nparticipate in this preparatory work. International, governmental and non-governmental organizations liaising\nwith the IEC also participate in this preparation. The IEC collaborates closely with the International\nOrganization for Standardization (ISO) in accordance with conditions determined by agreement between the\ntwo organizations.\n2) The formal decisions or agreements of the IEC on technical matters express, as nearly as possible, an\ninternational consensus of opinion on the relevant subjects since each technical committee has representation\nfrom all interested National Committees.\n3) The documents produced have the form of recommendations for international use and are published in the form\nof standards, technical specifications, technical reports or guides and they are accepted by the National\nCommittees in that sense.\n4)  In order to pr"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 45,
    "text": "r international use and are published in the form\nof standards, technical specifications, technical reports or guides and they are accepted by the National\nCommittees in that sense.\n4)  In order to promote international unification, IEC National Committees undertake to apply IEC International\nStandards transparently to the maximum extent possible in their national and regional standards. Any\ndivergence between the IEC Standard and the corresponding national or regional standard shall be clearly\nindicated in the latter.\n5)  The IEC provides no marking procedure to indicate its approval and cannot be rendered responsible for any\nequipment declared to be in conformity with one of its standards.\n6)  Attention is drawn to the possibility that some of the elements of this International Standard may be the subject\nof patent rights. The IEC shall not be held responsible for identifying any or all such patent rights.\nInternational Standard IEC 61131-3 has been prepared by subcommittee 65B: Devices, of IEC\ntechnical committee 65: Industrial-process measurement and control.\nThe text of this standard is based on the following documents:\nFDIS Report on voting\n65B/456/FDIS 65B/465/RVD\nFull infor"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 46,
    "text": "ces, of IEC\ntechnical committee 65: Industrial-process measurement and control.\nThe text of this standard is based on the following documents:\nFDIS Report on voting\n65B/456/FDIS 65B/465/RVD\nFull information on the voting for the approval of this standard can be found in the report on\nvoting indicated in the above table.\nThis second edition of IEC 61131-3 cancels and replaces the first edition, published in 1993,\nand constitutes a technical revision.\nThis International Standard has been reproduced without significant modification to its original\ncontents or drafting.\nThe committee has decided that the contents of this publication will remain unchanged until\n2007. At this date, the publication will be\n• reconfirmed;\n• withdrawn;\n• replaced by a revised edition, or\n• amended.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 9 –\nPROGRAMMABLE CONTROLLERS –\nPart 3: Programming languages\n1   General\n1.1  Scope\nThis part of IEC 61131 specifies syntax and semantics of programming languages for programmable\ncontrollers"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 47,
    "text": "03(E) – 9 –\nPROGRAMMABLE CONTROLLERS –\nPart 3: Programming languages\n1   General\n1.1  Scope\nThis part of IEC 61131 specifies syntax and semantics of programming languages for programmable\ncontrollers as defined in part 1 of IEC 61131.\nThe functions of program entry, testing, monitoring, operating system, etc., are specified in Part 1 of\nIEC 61131.\n1.2  Normative references\nThe following referenced documents are indispensable for the application of this document.\nFor dated references, only the edition cited applies. For undated references, the latest edition\nof the referenced document (including any amendments) applies.\nIEC 60050 (all parts): International Electrotechnical Vocabulary (IEV)\nIEC 60559:1989, Binary floating-point arithmetic for microprocessors systems\nIEC 60617-12:1997, Graphical symbols for diagrams – Part 12: Binary logic elements\nIEC 60617-13:1993, Graphical symbols for diagrams – Part 13: Analogue elements\nIEC 60848:2002, GRAFCET specification language for sequential function charts\nIEC 61131-1, Programmable controllers – Part 1: General information\nIEC 61131-5, Programmable controllers – Part 5: Communications\nISO/AFNOR: 1989, Dictionary of computer science – The"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 48,
    "text": "unction charts\nIEC 61131-1, Programmable controllers – Part 1: General information\nIEC 61131-5, Programmable controllers – Part 5: Communications\nISO/AFNOR: 1989, Dictionary of computer science – The standardised vocabulary\nISO/IEC 10646-1:1993, Information technology – Universal Multiple-Octet Coded Character Set (UCS)\n– Part 1: Architecture and Basic Multilingual Plane\n1.3  Definitions\nFor the purposes of this part of IEC 61131, the following definitions apply. Definitions applying to all\nparts of IEC 61131 are given in part 1.\nNOTE 1 Terms defined in this subclause are italicized where they appear in the bodies of definitions.\nNOTE 2 The notation “(ISO)” following a definition indicates that the definition is taken from the\nISO/AFNOR Dictionary of computer science.\nNOTE 3 The ISO/AFNOR Dictionary of computer science and the IEC 60050 should be consulted for\nterms not defined in this standard.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 10 – 61131-3  IEC:2003(E)\n1.3.1 absolute time: the combination of time of day and date i"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 49,
    "text": "Not for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 10 – 61131-3  IEC:2003(E)\n1.3.1 absolute time: the combination of time of day and date information.\n1.3.2 access path: the association of a symbolic name with a variable for the purpose of open\ncommunication.\n1.3.3 action: Boolean variable, or a collection of operations to be performed, together with an\nassociated control structure, as specified in 2.6.4.\n1.3.4 action block: graphical language element which utilizes a Boolean input variable to determine\nthe value of a Boolean output variable or the enabling condition for an action, according to a\npredetermined control structure as defined in 2.6.4.5.\n1.3.5 aggregate : structured collection of data objects forming a data type. (ISO)\n1.3.6 argument:  synonymous with input variable, output variable or in-out variable.\n1.3.7 array : aggregate that consists of data objects, with identical attributes, each of which may be\nuniquely referenced by subscripting. (ISO)\n1.3.8 assignment: mechanism to give a value to a variable or to an aggregate. (ISO)\n1.3.9 based number : number represented in a specified base other than ten.\n1.3.10"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 50,
    "text": "referenced by subscripting. (ISO)\n1.3.8 assignment: mechanism to give a value to a variable or to an aggregate. (ISO)\n1.3.9 based number : number represented in a specified base other than ten.\n1.3.10 bistable function block: function block  with two stable states controlled by one or more\ninputs.\n1.3.11 bit string: data element consisting of one or more bits.\n1.3.12 body: that portion of a program organization unit  which specifies the operations to be\nperformed on the declared operands of the program organization unit when its execution is invoked.\n1.3.13 call: language construct for invoking the execution of a function or function block.\n1.3.14 character string: aggregate that consists of an ordered sequence of characters.\n1.3.15 comment: language construct for the inclusion of text in a program and having no impact on\nthe execution of the program. (ISO)\n1.3.16 compile: to translate a program organization unit  or data type  specification into its machine\nlanguage equivalent or an intermediate form.\n1.3.17 configuration: language element corresponding to a programmable controller system  as\ndefined in IEC 61131-1.\n1.3.18 counter function block: function block which accumulates a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 51,
    "text": "ntermediate form.\n1.3.17 configuration: language element corresponding to a programmable controller system  as\ndefined in IEC 61131-1.\n1.3.18 counter function block: function block which accumulates a value for the number of changes\nsensed at one or more specified inputs.\n1.3.19 data type : set of values together with a set of permitted operations. (ISO)\n1.3.20 date and time: the date within the year and the time of day represented as a single language\nelement.\n1.3.21 declaration: the mechanism for establishing the definition of a language element . A\ndeclaration normally involves attaching an identifier to the language element, and allocating attributes\nsuch as data types and algorithms to it.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 11 –\n1.3.22 delimiter: character or combination of characters used to separate program language\nelements.\n1.3.23 direct representation: means of representing a variable in a programmable controller\nprogram from which a manufacturer-specified correspondence to a physical o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 52,
    "text": "parate program language\nelements.\n1.3.23 direct representation: means of representing a variable in a programmable controller\nprogram from which a manufacturer-specified correspondence to a physical or logical location may be\ndetermined directly.\n1.3.24 double word: data element containing 32 bits.\n1.3.25 evaluation: the process of establishing a value for an expression or a function, or for the\noutputs of a network or function block, during program execution.\n1.3.26 execution control element: A language element  which controls the flow of program\nexecution.\n1.3.27 falling edge: the change from 1 to 0 of a Boolean variable.\n1.3.28 function (procedure): program organization unit  which, when executed, yields exactly one\ndata element and possibly additional output variables  (which may be multi-valued, for example, an\narray or structure), and whose invocation can be used in textual languages as an operand in an\nexpression.\n1.3.29 function block instance (function block):   instance of a function block type.\n1.3.30 function block type: programmable controller programming language element consisting of:\n1)  the definition of a data structure partitioned into input, output, and internal"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 53,
    "text": "function block type.\n1.3.30 function block type: programmable controller programming language element consisting of:\n1)  the definition of a data structure partitioned into input, output, and internal variables; and\n2)  a set of operations to be performed upon the elements of the data structure when an instance of\nthe function block type is invoked.\n1.3.31 function block diagram: network in which the nodes are function block instances, graphically\nrepresented functions (procedures), variables, literals, and labels.\n1.3.32 generic data type: data type which represents more than one type of data, as specified in\n2.3.2.\n1.3.33 global scope: scope of a declaration applying to all program organization units within a\nresource or configuration.\n1.3.34 global variable: variable whose scope is global.\n1.3.35 hierarchical addressing: the direct representation  of a data element as a member of a\nphysical or logical hierarchy, for example, a point within a module which is contained in a rack, which\nin turn is contained in a cubicle, etc.\n1.3.36 identifier: combination of letters, numbers, and underline characters, as specified in 2.1.2,\nwhich begins with a letter or underline and which names a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 54,
    "text": "h\nin turn is contained in a cubicle, etc.\n1.3.36 identifier: combination of letters, numbers, and underline characters, as specified in 2.1.2,\nwhich begins with a letter or underline and which names a language element.\n1.3.37 in-out variable: variable that is declared in a VAR_IN_OUT...END_VAR block.\n1.3.38 initial value: the value assigned to a variable at system start-up.\n1.3.39 input variable (input): variable which is used to supply an argument to a program\norganization unit.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 12 – 61131-3  IEC:2003(E)\n1.3.40 instance: individual, named copy of the data structure associated with a function block type or\nprogram type, which persists from one invocation of the associated operations to the next.\n1.3.41 instance name: identifier associated with a specific instance.\n1.3.42 instantiation: the creation of an instance.\n1.3.43 integer literal: literal which directly represents a value of type SINT, INT, DINT, LINT, BOOL,\nBYTE, WORD, DWORD, or LWORD, as defined in 2.3.1.\n1.3.44 invocation:"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 55,
    "text": "the creation of an instance.\n1.3.43 integer literal: literal which directly represents a value of type SINT, INT, DINT, LINT, BOOL,\nBYTE, WORD, DWORD, or LWORD, as defined in 2.3.1.\n1.3.44 invocation: the process of initiating the execution of the operations specified in a program\norganization unit.\n1.3.45 keyword: lexical unit that characterizes a language element, for example, “IF”.\n1.3.46 label: language construction naming an instruction, network, or group of networks, and\nincluding an identifier.\n1.3.47 language element: any item identified by a symbol on the left-hand side of a production rule\nin the formal specification given in annex B of this standard.\n1.3.48 literal: lexical unit that directly represents a value. (ISO)\n1.3.49 local scope: the scope of a declaration or label applying only to the program organization unit\nin which the declaration or label appears.\n1.3.50 logical location: the location of a hierarchically addressed variable in a schema which may or\nmay not bear any relation to the physical structure of the programmable controller's inputs, outputs,\nand memory.\n1.3.51 long real: real number represented in a long word.\n1.3.52 long word: 64-bit data element.\n1."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 56,
    "text": "any relation to the physical structure of the programmable controller's inputs, outputs,\nand memory.\n1.3.51 long real: real number represented in a long word.\n1.3.52 long word: 64-bit data element.\n1.3.53 memory (user data storage): functional unit to which the user program can store data and\nfrom which it can retrieve the stored data.\n1.3.54 named element: element of a structure which is named by its associated identifier.\n1.3.55 network:  arrangement of nodes and interconnecting branches.\n1.3.56 off-delay (on-delay) timer function block: function block  which delays the falling (rising)\nedge of a Boolean input by a specified duration.\n1.3.57 operand: language element on which an operation is performed.\n1.3.58 operator: symbol that represents the action to be performed in an operation.\n1.3.59 output variable (output): variable which is used to return the result(s) of the evaluation of a\nprogram organization unit.\n1.3.60 overloaded : with respect to an operation or function, capable of operating  on data of different\ntypes, as specified in 2.5.1.4.\n1.3.61 power flow: the symbolic flow of electrical power in a ladder diagram, used to denote the\nprogression of a logic solving algorit"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 57,
    "text": "operating  on data of different\ntypes, as specified in 2.5.1.4.\n1.3.61 power flow: the symbolic flow of electrical power in a ladder diagram, used to denote the\nprogression of a logic solving algorithm.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 13 –\n1.3.62 pragma: language construct for the inclusion of text in a program organization unit which may\naffect the preparation of the program for execution.\n1.3.63 program (verb): to design, write, and test user programs.\n1.3.64 program organization unit: function, function block, or program.\nNOTE This term may refer to either a type or an instance.\n1.3.65 real literal:  literal representing data of type REAL or LREAL.\n1.3.66 resource: language element  corresponding to a “signal processing function” and its “man-\nmachine interface” and “sensor and actuator interface functions”, if any, as defined in IEC 61131-1.\n1.3.67 retentive data: data stored in such a way that its value remains unchanged after a power\ndown / power up sequence.\n1.3.68 return: language con"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 58,
    "text": "ace functions”, if any, as defined in IEC 61131-1.\n1.3.67 retentive data: data stored in such a way that its value remains unchanged after a power\ndown / power up sequence.\n1.3.68 return: language construction within a program organization unit  designating an end to the\nexecution sequences in the unit.\n1.3.69 rising edge: the change from 0 to 1 of a Boolean variable.\n1.3.70 scope: that portion of a language element within which a declaration or label applies.\n1.3.71 semantics: the relationships between the symbolic elements of a programming language and\ntheir meanings, interpretation and use.\n1.3.72 semigraphic representation: representation of graphic information by the use of a limited set\nof characters.\n1.3.73 single data element: data element consisting of a single value.\n1.3.74 single-element variable: variable which represents a single data element.\n1.3.75 step: situation in which the behavior of a program organization unit  with respect to its inputs\nand outputs follows a set of rules defined by the associated actions of the step.\n1.3.76 structured data type: aggregate data type which has been declared using a STRUCT or\nFUNCTION_BLOCK declaration.\n1.3.77 subscripting: mecha"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 59,
    "text": "f rules defined by the associated actions of the step.\n1.3.76 structured data type: aggregate data type which has been declared using a STRUCT or\nFUNCTION_BLOCK declaration.\n1.3.77 subscripting: mechanism for referencing an array element by means of an array reference\nand one or more expressions that, when evaluated, denote the position of the element.\n1.3.78 symbolic representation: the use of identifiers to name variables.\n1.3.79 task: execution control element  providing for periodic or triggered execution of a group of\nassociated program organization units.\n1.3.80 time literal: literal representing data of type TIME, DATE, TIME_OF_DAY, or\nDATE_AND_TIME.\n1.3.81 transition: the condition whereby control passes from one or more predecessor steps to one\nor more successor steps along a directed link.\n1.3.82 unsigned integer: integer literal not containing a leading plus (+) or minus (-) sign.\n1.3.83 wired OR: construction for achieving the Boolean OR function in the LD language by\nconnecting together the right ends of horizontal connectives with vertical connectives.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reprodu"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 60,
    "text": "cting together the right ends of horizontal connectives with vertical connectives.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 14 – 61131-3  IEC:2003(E)\n1.4  Overview and general requirements\nThis part of IEC 61131 specifies the syntax and semantics of a unified suite of programming\nlanguages for programmable controllers (PCs). These consist of two textual languages, IL (Instruction\nList) and ST (Structured Text), and two graphical languages, LD (Ladder Diagram) and FBD (Function\nBlock Diagram).\nSequential Function Chart (SFC) elements are defined for structuring the internal organization of\nprogrammable controller programs and function blocks . Also, configuration elements  are defined\nwhich support the installation of programmable controller programs into programmable controller\nsystems.\nIn addition, features are defined which facilitate communication among programmable controllers and\nother components of automated systems.\nThe programming language elements defined in this part may be used in an interactive programming\nenvi"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 61,
    "text": "facilitate communication among programmable controllers and\nother components of automated systems.\nThe programming language elements defined in this part may be used in an interactive programming\nenvironment. The specification of such environments is beyond the scope of this standard; however,\nsuch an environment shall be capable of producing textual or graphic program documentation in the\nformats specified in this standard.\nThe material in this part is arranged in “bottom-up” fashion, that is, simpler language elements are\npresented first, in order to minimize forward references in the text. The remainder of this subclause\nprovides an overview of the material presented in this part and incorporates some general\nrequirements.\n1.4.1  Software model\nThe basic high-level language elements and their interrelationships are illustrated in figure 1. These\nconsist of elements which are programmed using the languages defined in this standard, that is,\nprograms and function blocks ; and configuration elements , namely, configurations, resources, tasks,\nglobal variables,  access paths , and instance-specific initializations, which support the installation of\nprogrammable controller programs i"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 62,
    "text": "ation elements , namely, configurations, resources, tasks,\nglobal variables,  access paths , and instance-specific initializations, which support the installation of\nprogrammable controller programs into programmable controller systems.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 15 –\nCONFIGURATION\nRESOURCE\nTASK TASK\nPROGRAM PROGRAM\nFB FB\nRESOURCE\nTASK TASK\nPROGRAM PROGRAM\nFB FB\nGLOBAL and DIRECTLY       REPRESENTED VARIABLES\nand INSTANCE-SPECIFIC     INITIALIZATIONS\nACCESS PATHS\nExecution control path\nVariable access paths\nFB Function block\nVariable\nor\nCommunication function (See IEC 61131-5)\nNOTE 1 This figure is illustrative only. The graphical representation is not normative.\nNOTE 2 In a configuration with a single resource, the resource need not be explicitly\nrepresented.\nFigure 1 - Software model\nA configuration is the language element which corresponds to a programmable controller system  as\ndefined in IEC 61131-1. A resource corresponds to a “signal processing function” and its “man-\nmachine inter"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 63,
    "text": "iguration is the language element which corresponds to a programmable controller system  as\ndefined in IEC 61131-1. A resource corresponds to a “signal processing function” and its “man-\nmachine interface” and “sensor and actuator interface” functions (if any) as defined in IEC 61131-1. A\nconfiguration contains one or more resources, each of which contains one or more programs executed\nunder the control of zero or more tasks. A program may contain zero or more function blocks or other\nlanguage elements as defined in this part.\nConfigurations and resources can be started and stopped via the “operator interface”, “programming,\ntesting, and monitoring”, or “operating system” functions defined in IEC 61131-1. The starting of a\nconfiguration shall cause the initialization of its global variables according to the rules given in 2.4.2,\nfollowed by the starting of all the resources in the configuration. The starting of a resource shall cause\nthe initialization of all the variables in the resource, followed by the enabling of all the tasks in the\nresource. The stopping of a resource shall cause the disabling of all its tasks, while the stopping of a\nconfiguration shall cause the stopping of"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 64,
    "text": "rce, followed by the enabling of all the tasks in the\nresource. The stopping of a resource shall cause the disabling of all its tasks, while the stopping of a\nconfiguration shall cause the stopping of all its resources. Mechanisms for the control of tasks are\ndefined in 2.7.2, while mechanisms for the starting and stopping of configurations and resources via\ncommunication functions are defined in IEC 61131-5.\nIEC   2468/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 16 – 61131-3  IEC:2003(E)\nPrograms, resources, global variables, access paths  (and their corresponding access privileges), and\nconfigurations can be loaded or deleted by the “communication function” defined in IEC 61131-1. The\nloading or deletion of a configuration or resource shall be equivalent to the loading or deletion of all the\nelements it contains.\nAccess paths and their corresponding access privileges are defined in 2.7.1.\nThe mapping of the language elements defined in this subclause on to communication objects is\ndefined in IEC 61131-5.\n1.4.2  Communica"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 65,
    "text": "s and their corresponding access privileges are defined in 2.7.1.\nThe mapping of the language elements defined in this subclause on to communication objects is\ndefined in IEC 61131-5.\n1.4.2  Communication model\nFigure 2 illustrates the ways that values of variables can be communicated among software elements.\nAs shown in figure 2 a), variable values within a program can be communicated directly by connection\nof the output of one program element to the input of another. This connection is shown explicitly in\ngraphical languages and implicitly in textual languages.\nVariable values can be communicated between programs in the same configuration via global\nvariables such as the variable x illustrated in figure 2 b). These variables shall be declared as GLOBAL\nin the configuration, and as EXTERNAL in the programs, as specified in 2.4.3.\nAs illustrated in figure 2 c), the values of variables can be communicated between different parts of a\nprogram, between programs in the same or different configurations, or between a programmable\ncontroller program and a non-programmable controller system, using the communication function\nblocks defined in IEC 61131-5 and described in 2.5.2.3.5. In addit"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 66,
    "text": "nfigurations, or between a programmable\ncontroller program and a non-programmable controller system, using the communication function\nblocks defined in IEC 61131-5 and described in 2.5.2.3.5. In addition, programmable controllers or\nnon-programmable controller systems can transfer data which is made available by access paths, as\nillustrated in figure 2 d), using the mechanisms defined in IEC 61131-5.\nPROGRAM A\nFB_X\na\nFB1\nFB_Y\nb\nFB2\nFigure 2 a) - Data flow connection within a program\nPROGRAM A\nFB_X\na\nFB1\nPROGRAM B\nFB_Y\nb\nFB2\nx x\nVAR_GLOBAL\nx: BOOL;\nEND_VAR\nVAR_EXTERNAL\nx: BOOL;\nEND_VAR\nVAR_EXTERNAL\nx: BOOL;\nEND_VAR\nCONFIGURATION C\nFigure 2 b) - Communication via GLOBAL variables\nIEC   2469/02\nIEC   2470/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 17 – \nPROGRAM A\nFB_X\nFB1\nCONFIGURATION C\nSEND\nsend1\na\nSD1\nFB_Y\nb\nFB2\nCONFIGURATION D\nRCV\nrcv1\nRD1\nPROGRAM B\n \n \nFigure 2 c) - Communication function blocks \nPROGRAM A\nFB_X\nFB1\na Z\nVAR_ACCESS\nCSX: P1.Z : REAL READ_ONLY;\nPROGRAM B\nFB_Y\nb\nFB2\nCONFIGURATION C CONFI"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 67,
    "text": "Y\nb\nFB2\nCONFIGURATION D\nRCV\nrcv1\nRD1\nPROGRAM B\n \n \nFigure 2 c) - Communication function blocks \nPROGRAM A\nFB_X\nFB1\na Z\nVAR_ACCESS\nCSX: P1.Z : REAL READ_ONLY;\nPROGRAM B\nFB_Y\nb\nFB2\nCONFIGURATION C CONFIGURATION D\nREAD\nTO_FB2\nRD1\n'CSX' VAR_1\nP1\n \nFigure 2 d) - Communication via access paths \nNOTE 1 This figure is illustrative only. The graphical representation is not normative. \nNOTE 2 In these examples, configurations C and D are each considered to have a single \nresource. \nNOTE 3 The details of the communication function blocks are not shown in this figure. See \n2.5.2.3.5 and IEC 61131-5. \nNOTE 4 As specified in 2.7, access paths can be declared on directly represented variables, \nglobal variables, or input, output, or internal variables of programs or function block \ninstances. \nNOTE 5 IEC 61131-5 specifies the means by which both PC and non-PC systems can use \naccess paths for reading and writing of variables. \nIEC   2472/02\nIEC   2471/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 18 – 61131-3  IEC:2003(E)\n1.4.3  Programmin"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 68,
    "text": "ssion \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 18 – 61131-3  IEC:2003(E)\n1.4.3  Programming model\nThe elements of programmable controller programming languages, and the subclauses in which they\nappear in this part, are classified as follows:\nData types (2.3)\nVariables (2.4)\nProgram organization units (2.5)\nFunctions (2.5.1)\nFunction blocks (2.5.2)\nPrograms (2.5.3)\nSequential Function Chart (SFC) elements (2.6)\nConfiguration elements (2.7)\nGlobal variables (2.7.1)\nResources (2.7.1)\nAccess paths (2.7.1)\nTasks (2.7.2)\nAs shown in figure 3, the combination of these elements shall obey the following rules:\n1) Derived \ndata types shall be declared as specified in 2.3.3, using the standard data types specified\nin 2.3.1 and 2.3.2 and any previously derived data types.\n2) Derived functions can be declared as specified in 2.5.1.3, using standard or derived data types,\nthe standard functions defined in 2.5.1.5, and any previously derived functions. This declaration\nshall use the mechanisms defined for the IL, ST, LD or FBD language.\n3) Derived function blocks  can be declared as speci"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 69,
    "text": "ons defined in 2.5.1.5, and any previously derived functions. This declaration\nshall use the mechanisms defined for the IL, ST, LD or FBD language.\n3) Derived function blocks  can be declared as specified in 2.5.2.2, using standard or derived data\ntypes and functions, the standard function blocks defined in 2.5.2.3, and any previously derived\nfunction blocks. This declaration shall use the mechanisms defined for the IL, ST, LD, or FBD\nlanguage, and can include Sequential Function Chart (SFC) elements as defined in 2.6.\n4) A \nprogram shall be declared as specified in 2.5.3, using standard or derived data types, functions,\nand function blocks. This declaration shall use the mechanisms defined for the IL, ST, LD, or FBD\nlanguage, and can include Sequential Function Chart (SFC) elements as defined in 2.6.\n5) Programs can be combined into configurations using the elements defined in 2.7, that is, global\nvariables, resources, tasks, and access paths.\nReference to “previously derived” data types, functions, and function blocks in the above rules is\nintended to imply that once such a derived element has been declared, its definition is available, for\nexample, in a “library” of derived elem"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 70,
    "text": "pes, functions, and function blocks in the above rules is\nintended to imply that once such a derived element has been declared, its definition is available, for\nexample, in a “library” of derived elements, for use in further derivations. Therefore, the declaration of\na derived element type shall not be contained within the declaration of another derived element type.\nA programming language other than one of those defined in this standard may be used in the\ndeclaration of a \nfunction or function block. The means by which a user program written in one of the\nlanguages defined in this standard invokes the execution of, and accesses the data associated with,\nsuch a derived function or function block shall be as defined in this standard.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 19 –\nLIBRARY ELEMENTS PRODUCTIONS DERIVED ELEMENTS\nDATA TYPES\nStandard (See 2.3.1, 2.3.2)\nDerived\nFUNCTIONS\nStandard (See 2.5.1.5)\nDerived\nFUNCTION BLOCKS\nStandard (See 2.5.2.3)\nDerived\nPROGRAMS\nRESOURCES\nDeclaration (See 2.5.1.3)\nIL"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 71,
    "text": "DERIVED ELEMENTS\nDATA TYPES\nStandard (See 2.3.1, 2.3.2)\nDerived\nFUNCTIONS\nStandard (See 2.5.1.5)\nDerived\nFUNCTION BLOCKS\nStandard (See 2.5.2.3)\nDerived\nPROGRAMS\nRESOURCES\nDeclaration (See 2.5.1.3)\nIL, ST, LD, FBD\nOTHERS\nDeclaration (See 2.5.2.2)\nIL, ST, LD, FBD\nSFC elements (See 2.6)\nOTHERS\nDeclaration (See 2.5.3)\nIL, ST, LD, FBD\nSFC elements (See 2.6)\nTasks (See 2.7.2)\nDeclaration (See 2.7.1)\nGlobal variables (See 2.7.1)\nAccess paths (See 2.7.1)\nDerived\ndata\ntypes\nDerived\nfunctions\nDerived\nfunction\nblocks\nPROGRAM\nCONFIGURATION\nDeclaration (See 2.3.3)\n(1)\n(2)\n(3)\n(4)\n(5)(See 2.5.3)\n(See 2.7.1)\nNOTE 1 The parenthesized numbers (1) to (5) refer to the corresponding paragraphs in 1.4.3.\nNOTE 2 Data types are used in all productions. For clarity, the corresponding linkages are\nomitted in this figure.\nFigure 3 - Combination of programmable controller language elements\nLD - Ladder Diagram (4.2)\nFBD - Function Block Diagram (4.3)\nIL - Instruction List (3.2)\nST - Structured Text (3.3)\nOTHERS - Other programming languages (1.4.3)\n1.5  Compliance\nThis subclause defines the requirements which shall be met by programmable controller systems and\nprograms which claim compliance with this part o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 72,
    "text": "- Other programming languages (1.4.3)\n1.5  Compliance\nThis subclause defines the requirements which shall be met by programmable controller systems and\nprograms which claim compliance with this part of IEC 61131.\nIEC   2473/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 20 – 61131-3  IEC:2003(E)\n1.5.1  System compliance\nA programmable controller system, as defined in IEC 61131-1, which claims to comply, wholly or\npartially, with the requirements of this part of IEC 61131 shall do so only as described below.\nA compliance statement shall be included in the documentation accompanying the system, or shall be\nproduced by the system itself. The form of the compliance statement shall be:\n“This system complies with the requirements of IEC 61131-3, for the following language\nfeatures:”,\nfollowed by a set of compliance tables in the following format:\nTable title\nTable No. Feature No. Features description\n... ... ...\nTable and feature numbers and descriptions are to be taken from the tables given in the relevant\nsubclauses of this part"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 73,
    "text": "ing format:\nTable title\nTable No. Feature No. Features description\n... ... ...\nTable and feature numbers and descriptions are to be taken from the tables given in the relevant\nsubclauses of this part of IEC 61131. Table titles are to be taken from the following table.\nTable title For features in:\nCommon elements Clause 2\nCommon textual elements Subclause 3.1\nIL language elements Subclauses 3.2.1 to 3.2.3\nST language elements Subclauses 3.3.1 to 3.3.2.4\nCommon graphical elements Subclause 4.1\nLD language elements Subclause 4.2\nFBD language elements Subclause 4.3\nFor the purposes of determining compliance, tables 9, 11, 13, 16a, 16b, 32, 38, 47, 48 and 51 shall\nnot be considered tables of features.\nA programmable controller system complying with the requirements of this standard with respect to a\nlanguage defined in this standard:\na) shall not require the inclusion of substitute or additional language elements in order to\naccomplish any of the features specified in this standard, unless such elements are identified\nand treated as noted in rules e) and f) below;\nb) shall be accompanied by a document that specifies the values of all \nimplementation-\ndependent parameters as listed in an"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 74,
    "text": "such elements are identified\nand treated as noted in rules e) and f) below;\nb) shall be accompanied by a document that specifies the values of all \nimplementation-\ndependent parameters as listed in annex D;\nc) shall be able to determine whether or not a user's language element violates any\nrequirement of this standard, where such a violation is not designated as an error in annex\nE, and report the result of this determination to the user. In the case where the system does\nnot examine the whole program organization unit, the user shall be notified that the\ndetermination is incomplete whenever no violations have been detected in the portion of the\nprogram organization unit examined;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 21 –\nd) shall treat each user violation that is designated as an error in annex E in at least one of the\nfollowing ways:\n1) there shall be a statement in an accompanying document that the error is not\nreported;\n2) the system shall report during preparation of the program for execution"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 75,
    "text": "t least one of the\nfollowing ways:\n1) there shall be a statement in an accompanying document that the error is not\nreported;\n2) the system shall report during preparation of the program for execution that an\noccurrence of that error is possible;\n3) the system shall report the error during preparation of the program for execution;\n4) the system shall report the error during execution of the program and initiate\nappropriate system- or user-defined error handling procedures;\nand if any violations that are designated as errors are treated in the manner described in\nd)1) above, then a note referencing each such treatment shall appear in a separate section\nof the accompanying document;\ne) shall be accompanied by a document that separately describes any features accepted by the\nsystem that are prohibited or not specified in this standard. Such features shall be described\nas being \"extensions to the \n<language> language as defined in IEC 61131-3\";\nf) shall be able to process in a manner similar to that specified for errors any use of any such\nextension;\ng) shall be able to process in a manner similar to that specified for errors any use of one of the\nimplementation-dependent features speci"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 76,
    "text": "r to that specified for errors any use of any such\nextension;\ng) shall be able to process in a manner similar to that specified for errors any use of one of the\nimplementation-dependent features specified in annex D;\nh) shall not use any of the standard data type, function or function block names defined in this\nstandard for manufacturer-defined features whose functionality differs from that described in\nthis standard,unless such features are identified and treated as noted in rules e) and f)\nabove;\ni) shall be accompanied by a document defining, in the form specified in annex A, the formal\nsyntax of all textual language elements supported by the system;\nj) shall be capable of reading and writing files containing any of the language elements defined\nas alternatives in the production \nlibrary_element_declaration in B.0, in the syntax\ndefined in requirement i) above, encoded according to the “ISO-646 IRV” given as table 1 -\nRow 00 of ISO/IEC 10646-1.\nThe phrase “be able to” is used in this subclause to permit the implementation of a software switch\nwith which the user may control the reporting of errors.\nIn cases where compilation or program entry is aborted due to some limitation of"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 77,
    "text": "is subclause to permit the implementation of a software switch\nwith which the user may control the reporting of errors.\nIn cases where compilation or program entry is aborted due to some limitation of tables, etc., an\nincomplete determination of the kind “no violations were detected, but the examination is incomplete”\nwill satisfy the requirements of this subclause.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 22 – 61131-3  IEC:2003(E)\n1.5.2  Program compliance\nA programmable controller program complying with the requirements of IEC 61131-3:\na) shall use only those features specified in this standard for the particular language used;\nb) shall not use any features identified as extensions to the language;\nc) shall not rely on any particular interpretation of \nimplementation-dependent features.\nThe results produced by a complying program shall be the same when processed by any complying\nsystem which supports the features used by the program, such results are influenced by program\nexecution timing, the use of implementation-depen"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 78,
    "text": "ogram shall be the same when processed by any complying\nsystem which supports the features used by the program, such results are influenced by program\nexecution timing, the use of implementation-dependent features  (as listed in annex D) in the\nprogram, and the execution of error handling procedures.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 23 –\n2  Common elements\nThis clause defines textual and graphic elements which are common to all the programmable\ncontroller programming languages specified in this Part of IEC 61131.\n2.1  Use of printed characters\n2.1.1  Character set\nTextual languages and textual elements of graphic languages shall be represented in terms of the\n“ISO-646 IRV” given as table 1 - Row 00 of ISO/IEC 10646-1.\nThe use of characters from additional character sets, for example, the “Latin-1 Supplement” given as\ntable 2 - Row 00 of ISO/IEC 10646-1, is a typical extension of this standard.  The encoding of such\ncharacters shall be consistent with ISO/IEC 10646-1.\nThe \nrequired character set"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 79,
    "text": "upplement” given as\ntable 2 - Row 00 of ISO/IEC 10646-1, is a typical extension of this standard.  The encoding of such\ncharacters shall be consistent with ISO/IEC 10646-1.\nThe \nrequired character set consists of all the characters in columns 002 through 007 of the “ISO-646\nIRV” as defined above, except for lower-case letters.\nTable 1 - Character set features\nNo. Description\n2 Lower case charactersa\n3a\n3b\nNumber sign (#) OR\nPound sign (£)\n4a\n4b\nDollar sign ($) OR\nCurrency sign (¤)\n5a\n5b\nVertical bar (|) OR\nExclamation mark (!)\nNOTE The feature numbering in this table is such as to maintain consistency with the first\nedition of IEC 61131-3,.\na When lower-case letters (feature 2) are supported, the case of letters shall not be\nsignificant in language elements except within comments as defined in 2.1.5, string literals\nas defined in 2.2.2, and variables of type \nSTRING and WSTRING as defined in 2.3.1.\n2.1.2  Identifiers\nAn identifier is a string of letters, digits, and underline characters which shall begin with a letter or\nunderline character.\nThe case of letters shall not be significant in identifiers, for example, the identifiers abcd, ABCD, and\naBCd shall be interpreted identicall"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 80,
    "text": "s which shall begin with a letter or\nunderline character.\nThe case of letters shall not be significant in identifiers, for example, the identifiers abcd, ABCD, and\naBCd shall be interpreted identically.\nUnderlines shall be significant in identifiers, for example, A_BCD and AB_CD shall be interpreted as\ndifferent identifiers. Multiple leading or multiple embedded underlines are not allowed; for example, the\ncharacter sequences __ LIM_SW5 and LIM__SW5 are not  valid identifiers. Trailing underlines are\nnot allowed; for example, the character sequence LIM_SW5_ is not a valid identifier.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 24 – 61131-3  IEC:2003(E)\nAt least six characters of uniqueness shall be supported in all systems which support the use of\nidentifiers, for example, ABCDE1 shall be interpreted as different from ABCDE2 in all such systems. The\nmaximum number of characters allowed in an identifier is an implementation-dependent parameter.\nIdentifier features and examples are shown in table 2.\nTable 2 - Identifier feature"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 81,
    "text": "ll such systems. The\nmaximum number of characters allowed in an identifier is an implementation-dependent parameter.\nIdentifier features and examples are shown in table 2.\nTable 2 - Identifier features\nNo. Feature description Examples\n1 Upper case and numbers IW215 IW215Z QX75 IDENT\n2 Upper and lower case, numbers,\nembedded underlines\nAll the above plus:\nLIM_SW_5 LimSw5 abcd ab_Cd\n3 Upper and lower case, numbers,\nleading or embedded underlines\nAll the above plus: _MAIN _12V7\n2.1.3  Keywords\nKeywords are unique combinations of characters utilized as individual syntactic elements as defined in\nannex B.  All keywords used in this standard are listed in annex C.  Keywords shall not contain\nimbedded spaces. The case of characters shall not be significant in keywords; for instance, the\nkeywords “FOR” and “for” are syntactically equivalent.  The keywords listed in annex C shall not be\nused for any other purpose, for example, variable names or extensions as defined in 1.5.1.\nNOTE National standards organizations can publish tables of translations of the keywords given\nin\nannex C.\n2.1.4 Use of white space\nThe user shall be allowed to insert one or more characters of “white space” anywhere i"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 82,
    "text": "dards organizations can publish tables of translations of the keywords given\nin\nannex C.\n2.1.4 Use of white space\nThe user shall be allowed to insert one or more characters of “white space” anywhere in the text of\nprogrammable controller programs except within keywords, literals, enumerated values, identifiers,\ndirectly represented variables as described in subclause 2.4.1.1, or delimiter combinations (for\nexample, for comments as defined in 2.1.5). “White space” is defined as the SPACE character with\nencoded value 32 decimal, as well as non-printing characters such as tab, newline, etc. for which no\nencoding is given in IEC/ISO 10646-1.\n2.1.5  Comments\nUser comments shall be delimited at the beginning and end by the special character combinations\n“(*” and “*)”, respectively, as shown in table 3.  Comments shall be permitted anywhere in the\nprogram where spaces are allowed, except within character string literals as defined in 2.2.2.\nComments shall have no syntactic or semantic significance in any of the languages defined in this\nstandard.\nThe use of nested comments, for example, \n(* (* NESTED *) *) , shall be treated as an error\naccording to the provisions of 1.5.1 d).\nThe maximum"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 83,
    "text": "cance in any of the languages defined in this\nstandard.\nThe use of nested comments, for example, \n(* (* NESTED *) *) , shall be treated as an error\naccording to the provisions of 1.5.1 d).\nThe maximum number of characters allowed in a comment is an \nimplementation-dependent\nparameter.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 25 –\nTable 3 - Comment feature\nNo. Feature description Example\n1 Comments (*****************************)\n(*      A framed comment     *)\n(*****************************)\nNOTE The example given above represents three separate comments.\n2.1.6  Pragmas\nAs illustrated in table 3 a), pragmas shall be delimited at the beginning and end by curly brackets \"{\"\nand \"}\", respectively. The syntax and semantics of particular pragma constructions are\nimplementation dependent. Pragmas shall be permitted anywhere in the program where spaces are\nallowed, except within character string literals as defined in 2.2.2.\nNOTE Curly brackets inside a comment have no semantic meaning; comments inside curly"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 84,
    "text": "ted anywhere in the program where spaces are\nallowed, except within character string literals as defined in 2.2.2.\nNOTE Curly brackets inside a comment have no semantic meaning; comments inside curly\nbrackets may or may not have semantic meaning depending on the implementation.\nTable 3 a) - Pragma feature\nNo. Feature description Examples\n1 Pragmas {VERSION 3.1}\n{AUTHOR JHC}\n{x := 256, y := 384}\n2.2  External representation of data\nExternal representations of data in the various programmable controller programming languages shall\nconsist of numeric literals, character strings, and time literals.\n2.2.1  Numeric literals\nThere are two classes of numeric literals: integer literals and real literals.  A numeric literal is defined\nas a decimal number or a based number.  The maximum number of digits for each kind of numeric\nliteral shall be sufficient to express the entire range and precision of values of all the data types which\nare represented by the literal in a given implementation.\nSingle underline characters ( \n_ ) inserted between the digits of a numeric literal shall not be significant.\nNo other use of underline characters in numeric literals is allowed.\nDecimal literals shall be"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 85,
    "text": "e underline characters ( \n_ ) inserted between the digits of a numeric literal shall not be significant.\nNo other use of underline characters in numeric literals is allowed.\nDecimal literals shall be represented in conventional decimal notation. Real literals shall be\ndistinguished by the presence of a decimal point.  An exponent indicates the integer power of ten by\nwhich the preceding number is to be multiplied to obtain the value represented.  Decimal literals and\ntheir exponents can contain a preceding sign (\n+ or -).\nInteger literals can also be represented in base 2, 8, or 16.  The base shall be in decimal notation.  For\nbase 16, an extended set of digits consisting of the letters A through F shall be used, with the\nconventional significance of decimal 10 through 15, respectively.  Based numbers shall not\ncontain a leading sign ( + or -).\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 26 – 61131-3  IEC:2003(E)\nBoolean data shall be represented by integer literals with the value zero ( 0) or one ( 1), or the\nkeywords FALSE"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 86,
    "text": "ted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 26 – 61131-3  IEC:2003(E)\nBoolean data shall be represented by integer literals with the value zero ( 0) or one ( 1), or the\nkeywords FALSE or TRUE, respectively.\nNumeric literal features and examples are shown in table 4.\nThe data type of a boolean or numeric literal can be specified  by adding a type prefix to the literal,\nconsisting of the name of an elementary data type and the '#' sign.  For examples see feature 9 in\ntable 4.\nTable 4 - Numeric literals\nNo. Feature description Examples\n1 Integer literals -12  0  123_456  +986\n2 Real literals -12.0  0.0  0.4560  3.14159_26\n3 Real literals with exponents\n-1.34E-12 or -1.34e-12\n1.0E+6 or 1.0e+6\n1.234E6 or 1.234e6\n4 Base 2 literals 2#1111_1111 (255 decimal)\n2#1110_0000 (224 decimal)\n5 Base 8 literals 8#377 (255 decimal)\n8#340 (224 decimal)\n6 Base 16 literals 16#FF or 16#ff (255 decimal)\n16#E0 or 16#e0 (224 decimal)\n7 Boolean zero and one   0     1\n8 Boolean FALSE and TRUE FALSE  TRUE\n9 Typed literals DINT#5  (DINT representation of 5)\nUINT#16#9AF (UINT representation of the hexadecimal value 9AF )\nBOOL#0  BOOL#1  BOOL#TRUE  BOOL#FALSE\nNOTE The keywords FALSE and TRUE corre"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 87,
    "text": "E  TRUE\n9 Typed literals DINT#5  (DINT representation of 5)\nUINT#16#9AF (UINT representation of the hexadecimal value 9AF )\nBOOL#0  BOOL#1  BOOL#TRUE  BOOL#FALSE\nNOTE The keywords FALSE and TRUE correspond to Boolean values of 0 and 1, respectively.\n2.2.2  Character string literals\nCharacter string literals include single-byte or double-byte encoded characters.\nA single-byte character string literal is a sequence of zero or more characters from Row 00 of the\nISO/IEC 10646-1 character set prefixed and terminated by the single quote character (').  In single-\nbyte character strings, the three-character combination of the dollar sign ($) followed by two\nhexadecimal digits shall be interpreted as the hexadecimal representation of the eight-bit character\ncode, as shown in feature 1 of table 5.\nA double-byte character string literal is a sequence of zero or more characters from the ISO/IEC\n10646-1 character set prefixed and terminated by the double quote character (\").  In double-byte\ncharacter strings, the five-character combination of the dollar sign ($) followed by four hexadecimal\ndigits shall be interpreted as the hexadecimal representation of the sixteen-bit character code, as\nshow"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 88,
    "text": "ter strings, the five-character combination of the dollar sign ($) followed by four hexadecimal\ndigits shall be interpreted as the hexadecimal representation of the sixteen-bit character code, as\nshown in feature 2 of table 5.\nTwo-character combinations beginning with the dollar sign shall be interpreted as shown in table 6\nwhen they occur in character strings.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 27 –\nTable 5 - Character string literal features\nNo. Example Explanation\n1 Single-byte character strings\n'' Empty string (length zero)\n'A' String of length one containing the single character A\n' ' String of length one containing the “space” character\n'$'' String of length one containing the “single quote” character\n'\"' String of length one containing the “double quote” character\n'$R$L' String of length two containing CR and LF characters\n'$0A' String of length one containing the LF character\n'$$1.00' String of length five which would print as “$1.00”\n'ÄË'\n'$C4$CB'\nEquivalent strings of length two\n2 Doubl"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 89,
    "text": "ontaining CR and LF characters\n'$0A' String of length one containing the LF character\n'$$1.00' String of length five which would print as “$1.00”\n'ÄË'\n'$C4$CB'\nEquivalent strings of length two\n2 Double-byte character strings\n\"\" Empty string (length zero)\n\"A\" String of length one containing the single character A\n\" \" String of length one containing the “space” character\n\"'\" String of length one containing the “single quote” character\n\"$\"\" String of length one containing the “double quote” character\n\"$R$L\" String of length two containing CR and LF characters\n\"$$1.00\" String of length five which would print as “$1.00”\n\"ÄË\"\n\"$00C4$00CB\"\nEquivalent strings of length two\n3 Single-byte typed string literals\nSTRING#'OK' String of length two containing two single-byte characters\n4 Double-byte typed string literals\nWSTRING#'OK' String of length two containing two double-byte characters\nNOTE If a particular implementation supports feature #4 but not feature #2, the\nimplementor may specify implementation-dependent syntax and semantics for\nthe use of the double-quote character.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduc"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 90,
    "text": "ntation-dependent syntax and semantics for\nthe use of the double-quote character.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 28 – 61131-3  IEC:2003(E)\nTable 6 - Two-character combinations in character strings\nNo. Combination Interpretation when printed\n2 $$ Dollar sign\n3 $' Single quote\n4 $L or $l Line feed\n5 $N or $n Newline\n6 $P or $p Form feed (page)\n7 $R or $r Carriage return\n8 $T or $t Tab\n9 $\" Double quote\nNOTE 1 The “newline” character provides an implementation-independent means of defining\nthe end of a line of data for both physical and file I/O; for printing, the effect is that of\nending a line of data and resuming printing at the beginning of the next line.\nNOTE 2 The \n$' combination is only valid inside single quoted string literals.\nNOTE 3 The $\" combination is only valid inside double quoted string literals.\n2.2.3  Time literals\nThe need to provide external representations for two distinct types of time-related data is recognized:\nduration data for measuring or controlling the elapsed time of a control event, a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 91,
    "text": "Time literals\nThe need to provide external representations for two distinct types of time-related data is recognized:\nduration data for measuring or controlling the elapsed time of a control event, and time of day  data\n(which may also include date information) for synchronizing the beginning or end of a control event to\nan absolute time reference.\nDuration and time of day literals shall be delimited on the left by the keywords defined in 2.2.3.1 and\n2.2.3.2.\n2.2.3.1  Duration\nDuration data shall be delimited on the left by the keyword T# or TIME#.  The representation of\nduration data in terms of days, hours, minutes, seconds, and milliseconds, or any combination thereof,\nshall be supported as shown in table 7.  The least significant time unit can be written in real notation\nwithout an exponent.\nThe units of duration literals can be separated by underline characters.\n“Overflow” of the most significant unit of a duration literal is permitted, for example, the notation\nT#25h_15m is permitted.\nTime units, for example, seconds, milliseconds, etc., can be represented in upper- or lower- case\nletters.\nAs illustrated in table 7, both positive and negative values are allowed for durations"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 92,
    "text": "itted.\nTime units, for example, seconds, milliseconds, etc., can be represented in upper- or lower- case\nletters.\nAs illustrated in table 7, both positive and negative values are allowed for durations.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 29 –\nTable 7 - Duration literal features\nNo. Feature description Examples\n1a\nDuration literals without underlines:\n  short prefix\nT#14ms   T#-14ms   T#14.7s   T#14.7m\nT#14.7h   t#14.7d   t#25h15m\nt#5d14h12m18s3.5ms\n1b   long prefix TIME#14ms   TIME#-14ms   time#14.7s\n2a\nDuration literals with underlines:\n  short prefix t#25h_15m t#5d_14h_12m_18s_3.5ms\n2b   long prefix TIME#25h_15m\ntime#5d_14h_12m_18s_3.5ms\n2.2.3.2  Time of day and date\nPrefix keywords for time of day and date literals shall be as shown in table 8.  As illustrated in table 9,\nrepresentation of time-of-day and date information shall be as specified by the syntax given in\nB.1.2.3.2.\nTable 8 - Date and time of day literals\nNo. Feature description Prefix Keyword\n1 Date literals (long prefix) DATE#\n2 Da"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 93,
    "text": "day and date information shall be as specified by the syntax given in\nB.1.2.3.2.\nTable 8 - Date and time of day literals\nNo. Feature description Prefix Keyword\n1 Date literals (long prefix) DATE#\n2 Date literals (short prefix) D#\n3 Time of day literals (long prefix) TIME_OF_DAY#\n4 Time of day literals (short prefix) TOD#\n5 Date and time literals (long prefix) DATE_AND_TIME#\n6 Date and time literals (short prefix) DT#\nTable 9 - Examples of date and time of day literals\nLong prefix notation Short prefix notation\nDATE#1984-06-25\ndate#1984-06-25\nD#1984-06-25\nd#1984-06-25\nTIME_OF_DAY#15:36:55.36\ntime_of_day#15:36:55.36\nTOD#15:36:55.36\ntod#15:36:55.36\nDATE_AND_TIME#1984-06-25-15:36:55.36\ndate_and_time#1984-06-25-15:36:55.36\nDT#1984-06-25-15:36:55.36\ndt#1984-06-25-15:36:55.36\n2.3  Data types\nA number of elementary (pre-defined) data types are recognized by this standard.  Additionally,\ngeneric data types are defined for use in the definition of overloaded functions (see 2.5.1.4).  A\nmechanism for the user or manufacturer to specify additional data types is also defined.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproducti"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 94,
    "text": "for the user or manufacturer to specify additional data types is also defined.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 30 – 61131-3  IEC:2003(E)\n2.3.1  Elementary data types\n The elementary data types, keyword for each data type, number of bits per data element, and range\nof values for each elementary data type shall be as shown in table 10.\nTable 10 - Elementary data types\nNo. Keyword Data type N  a\n1 BOOL Boolean 1  h\n2 SINT Short integer 8  c\n3 INT Integer 16  c\n4 DINT Double integer 32  c\n5 LINT Long integer 64  c\n6 USINT Unsigned short integer 8  d\n7 UINT Unsigned integer 16  d\n8 UDINT Unsigned double integer 32  d\n9 ULINT Unsigned long integer 64  d\n10 REAL Real numbers 32  e\n11 LREAL Long reals 64  f\n12 TIME Duration --  b\n13 DATE Date (only) --  b\n14 TIME_OF_DAY or TOD Time of day (only) --  b\n15 DATE_AND_TIME or DT Date and time of Day --  b\n16 STRING Variable-length single-byte character string 8  i,g\n17 BYTE Bit string of length 8 8  j,g\n18 WORD Bit string of length 16 16  j,g\n19 DWORD Bit string of length 32"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 95,
    "text": "Date and time of Day --  b\n16 STRING Variable-length single-byte character string 8  i,g\n17 BYTE Bit string of length 8 8  j,g\n18 WORD Bit string of length 16 16  j,g\n19 DWORD Bit string of length 32 32  j,g\n20 LWORD Bit string of length 64 64  j,g\n21 WSTRING Variable-length double-byte character string 16 i,g\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 31 –\nTable 10 - Elementary data types\na Entries in this column shall be interpreted as specified in the footnotes.\nb The range of values and precision of representation in these data types is implementation-\ndependent.\nc The range of values for variables of this data type is from -(2N-1) to (2N-1)-1.\nd The range of values for variables of this data type is from 0 to (2N)-1.\ne The range of values for variables of this data type shall be as defined in IEC 60559 for the\nbasic single width floating-point format.\nf The range of values for variables of this data type shall be as defined in IEC 60559 for the\nbasic double width floating-point format.\ng A numeric r"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 96,
    "text": "for the\nbasic single width floating-point format.\nf The range of values for variables of this data type shall be as defined in IEC 60559 for the\nbasic double width floating-point format.\ng A numeric range of values does not apply to this data type.\nh The possible values of variables of this data type shall be 0 and 1, corresponding to the\nkeywords FALSE and TRUE, respectively.\ni The value of N indicates the number of bits/character for this data type.\nj The value of N indicates the number of bits in the bit string for this data type.\n2.3.2  Generic data types\nIn addition to the data types shown in table 10, the hierarchy of generic data types shown in table 11\ncan be used in the specification of inputs and outputs of standard functions and function blocks (see\nsubclause 2.5.1.4).  Generic data types are identified by the prefix “ ANY”.  The use of generic data\ntypes is subject to the following rules:\n1) Generic data types shall not be used in user-declared program organization units as defined in\n2.5.\n2) The generic type of a subrange derived type (feature 3 of table 12) shall be ANY_INT.\n3) The generic type of a directly derived type (feature 1 of table 12) shall be the same as th"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 97,
    "text": "defined in\n2.5.\n2) The generic type of a subrange derived type (feature 3 of table 12) shall be ANY_INT.\n3) The generic type of a directly derived type (feature 1 of table 12) shall be the same as the generic\ntype of the elementary type from which it is derived.\n4) The generic type of all other derived types defined in table 12 shall be ANY_DERIVED.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 32 – 61131-3  IEC:2003(E)\nTable 11 - Hierarchy of generic data types\nANY\n  ANY_DERIVED (Derived data types - see preceding text)\n  ANY_ELEMENTARY\n    ANY_MAGNITUDE\n      ANY_NUM\n        ANY_REAL\n          LREAL\n          REAL\n        ANY_INT\n            LINT, DINT, INT, SINT\n            ULINT, UDINT, UINT, USINT\n      TIME\n    ANY_BIT\n      LWORD, DWORD, WORD, BYTE, BOOL\n    ANY_STRING\n      STRING\n      WSTRING\n    ANY_DATE\n      DATE_AND_TIME\n      DATE, TIME_OF_DAY\n2.3.3  Derived data types\n2.3.3.1  Declaration\nDerived (i.e., user- or manufacturer-specified) data types can be declared using the\nTYPE...END_TYPE textual construction sh"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 98,
    "text": "TIME\n      DATE, TIME_OF_DAY\n2.3.3  Derived data types\n2.3.3.1  Declaration\nDerived (i.e., user- or manufacturer-specified) data types can be declared using the\nTYPE...END_TYPE textual construction shown in table 12. These derived data types can then be\nused, in addition to the elementary data types defined in 2.3.1, in variable declarations as defined in\n2.4.3.\nAn enumerated data type declaration specifies that the value of any data element of that type can only\ntake on one of the values given in the associated list of identifiers, as illustrated in table 12.  The\nenumeration list defines an ordered set of enumerated values, starting with the first identifier of the list,\nand ending with the last. Different enumerated data types may use the same identifiers for\nenumerated values. The maximum allowed number of enumerated values is an \nimplementation-\ndependent parameter.\nTo enable unique identification when used in a particular context, enumerated literals may be qualified\nby a prefix consisting of their associated data type name and the '#' sign, similar to typed literals\ndefined in 2.2.1. Such a prefix shall not be used inside an enumeration list. It is an error if sufficient\ninf"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 99,
    "text": "consisting of their associated data type name and the '#' sign, similar to typed literals\ndefined in 2.2.1. Such a prefix shall not be used inside an enumeration list. It is an error if sufficient\ninformation is not provided in an enumerated literal to determine its value unambiguously.\nA subrange declaration specifies that the value of any data element of that type can only take on\nvalues between and including the specified upper and lower limits, as illustrated in table 12. It is an\nerror if the value of a value of a subrange type falls outside the specified range of values.\nA STRUCT declaration specifies that data elements of that type shall contain sub-elements of specified\ntypes which can be accessed by the specified names.  For instance, an element of data type\nANALOG_CHANNEL_CONFIGURATION as declared in table 12 will contain a RANGE sub-element of\ntype ANALOG_SIGNAL_RANGE, a MIN_SCALE sub-element of type ANALOG_DATA, and a MAX_SCALE\nelement of type ANALOG_DATA. The maximum number of structure elements, the maximum amount of\ndata that can be contained in a structure, and the maximum number of nested levels of structure\nelement addressing are implementation-dependent parameter"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 100,
    "text": "r of structure elements, the maximum amount of\ndata that can be contained in a structure, and the maximum number of nested levels of structure\nelement addressing are implementation-dependent parameters.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 33 –\nAn ARRAY declaration specifies that a sufficient amount of data storage shall be allocated for each\nelement of that type to store all the data which can be indexed by the specified index subrange(s).\nThus, any element of type ANALOG_16_INPUT_CONFIGURATION as shown in table 12 contains\n(among other elements) sufficient storage for 16 CHANNEL elements of type\nANALOG_CHANNEL_CONFIGURATION.  Mechanisms for access to array elements are defined in\n2.4.1.2.  The maximum number of array subscripts, maximum array size and maximum range of\nsubscript values are implementation-dependent parameters.\n2.3.3.2  Initialization\nThe default initial value of an enumerated data type shall be the first identifier in the associated\nenumeration list, or a value specified by the ass"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 101,
    "text": "ion-dependent parameters.\n2.3.3.2  Initialization\nThe default initial value of an enumerated data type shall be the first identifier in the associated\nenumeration list, or a value specified by the assignment operator “ :=”.  For instance, as shown in\ntable 12, No.2, and table 14, No.2, the default initial values of elements of data types\nANALOG_SIGNAL_TYPE and ANALOG_SIGNAL_RANGE are SINGLE_ENDED and UNIPOLAR_1_5V,\nrespectively.\nFor data types with subranges, the default initial values shall be the first (lower) limit of the subrange,\nunless otherwise specified by an assignment operator.  For instance, as declared in table 12, the\ndefault initial value of elements of type ANALOG_DATA is -4095, while the default initial value for the\nFILTER_PARAMETER sub-element of elements of type ANALOG_16_INPUT_CONFIGURATION is zero.\nIn contrast, the default initial value of elements of type ANALOG_DATAZ as declared in table 14 is zero.\nFor other derived data types, the default initial values, unless specified otherwise by the use of the\nassignment operator “:=” in the TYPE declaration, shall be the default initial values of the underlying\nelementary data types as defined in table 13.  Further ex"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 102,
    "text": "specified otherwise by the use of the\nassignment operator “:=” in the TYPE declaration, shall be the default initial values of the underlying\nelementary data types as defined in table 13.  Further examples of the use of the assignment operator\nfor initialization are given in 2.4.2.\nThe default maximum length of elements of type STRING and WSTRING shall be an implementation-\ndependent value unless specified otherwise by a parenthesized maximum length (which shall not\nexceed the implementation-dependent default value) in the associated declaration.  For example, if\ntype STR10 is declared by\nTYPE STR10 : STRING[10] := 'ABCDEF'; END_TYPE\nthe maximum length, default initial value, and default initial length of data elements of type STR10 are\n10 characters, 'ABCDEF', and 6 characters, respectively.  The maximum allowed length of STRING\nand WSTRING variables is an implementation-dependent parameter.\nTable 12 - Data type declaration features\nNo. Feature/textual example\n1 Direct derivation from elementary types, e.g.:\nTYPE RU_REAL : REAL ; END_TYPE\n2 Enumerated data types, e.g.:\nTYPE ANALOG_SIGNAL_TYPE : (SINGLE_ENDED, DIFFERENTIAL) ; END_TYPE\n3 Subrange data types, e.g.:\nTYPE ANALOG_DATA"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 103,
    "text": "m elementary types, e.g.:\nTYPE RU_REAL : REAL ; END_TYPE\n2 Enumerated data types, e.g.:\nTYPE ANALOG_SIGNAL_TYPE : (SINGLE_ENDED, DIFFERENTIAL) ; END_TYPE\n3 Subrange data types, e.g.:\nTYPE ANALOG_DATA : INT (-4095..4095) ; END_TYPE\n4 Array data types, e.g.:\nTYPE ANALOG_16_INPUT_DATA : ARRAY [1..16] OF ANALOG_DATA ; END_TYPE\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 34 – 61131-3  IEC:2003(E)\nTable 12 - Data type declaration features\nNo. Feature/textual example\n5 Structured data types, e.g.:\nTYPE\n  ANALOG_CHANNEL_CONFIGURATION :\n    STRUCT\n      RANGE : ANALOG_SIGNAL_RANGE ;\n      MIN_SCALE : ANALOG_DATA ;\n      MAX_SCALE : ANALOG_DATA ;\n    END_STRUCT ;\n  ANALOG_16_INPUT_CONFIGURATION :\n    STRUCT\n      SIGNAL_TYPE : ANALOG_SIGNAL_TYPE ;\n      FILTER_PARAMETER : SINT (0..99) ;\n      CHANNEL : ARRAY [1..16] OF  ANALOG_CHANNEL_CONFIGURATION ;\n    END_STRUCT ;\nEND_TYPE\nNOTE For examples of the use of these types in variable declarations, see 2.3.3.3, 2.4.1.2, and\ntable 17.\nTable 13 - Default initial values of elementary data typ"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 104,
    "text": "IGURATION ;\n    END_STRUCT ;\nEND_TYPE\nNOTE For examples of the use of these types in variable declarations, see 2.3.3.3, 2.4.1.2, and\ntable 17.\nTable 13 - Default initial values of elementary data types\nData type(s) Initial value\nBOOL, SINT, INT, DINT, LINT 0\nUSINT, UINT, UDINT, ULINT 0\nBYTE, WORD, DWORD, LWORD 0\nREAL, LREAL 0.0\nTIME T#0S\nDATE D#0001-01-01\nTIME_OF_DAY TOD#00:00:00\nDATE_AND_TIME DT#0001-01-01-00:00:00\nSTRING '' (the empty string)\nWSTRING \"\" (the empty string)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 35 –\nTable 14 - Data type initial value declaration features\nNo. Feature/textual example\n1 Initialization of directly derived types, e.g.:\nTYPE FREQ : REAL := 50.0 ; END_TYPE\n2 Initialization of enumerated data types, e.g.:\nTYPE ANALOG_SIGNAL_RANGE :\n    (BIPOLAR_10V,         (* -10 to +10 VDC  *)\n     UNIPOLAR_10V,        (*   0 to +10 VDC  *)\n     UNIPOLAR_1_5V,       (* + 1 to + 5 VDC  *)\n     UNIPOLAR_0_5V,       (*   0 to + 5 VDC  *)\n     UNIPOLAR_4_20_MA,    (* + 4 to +20 mADC *)"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 105,
    "text": "*)\n     UNIPOLAR_10V,        (*   0 to +10 VDC  *)\n     UNIPOLAR_1_5V,       (* + 1 to + 5 VDC  *)\n     UNIPOLAR_0_5V,       (*   0 to + 5 VDC  *)\n     UNIPOLAR_4_20_MA,    (* + 4 to +20 mADC *)\n     UNIPOLAR_0_20_MA     (*   0 to +20 mADC *)\n    ) := UNIPOLAR_1_5V ;\nEND_TYPE\n3 Initialization of subrange data types, e.g.:\nTYPE ANALOG_DATAZ : INT (-4095..4095) := 0 ; END_TYPE\n4 Initialization of array data types, e.g.:\nTYPE ANALOG_16_INPUT_DATAI :\n  ARRAY [1..16] OF ANALOG_DATA := [8(-4095), 8(4095)] ;\nEND_TYPE\n5 Initialization of structured data type elements, e.g.:\nTYPE ANALOG_CHANNEL_CONFIGURATIONI :\n    STRUCT\n      RANGE : ANALOG_SIGNAL_RANGE ;\n      MIN_SCALE : ANALOG_DATA := -4095 ;\n      MAX_SCALE : ANALOG_DATA :=  4095 ;\n    END_STRUCT ;\nEND_TYPE\n6 Initialization of derived structured data types, e.g.:\nTYPE ANALOG_CHANNEL_CONFIGZ :\n  ANALOG_CHANNEL_CONFIGURATIONI\n    := (MIN_SCALE := 0, MAX_SCALE := 4000);\nEND_TYPE\n2.3.3.3 Usage\nThe usage of variables which are declared (as defined in 2.4.3.1) to be of derived data types shall\nconform to the following rules:\n1) A single-element variable, as defined in 2.4.1.1, of a derived type, can be used anywhere that a\nvariable of its “"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 106,
    "text": "ined in 2.4.3.1) to be of derived data types shall\nconform to the following rules:\n1) A single-element variable, as defined in 2.4.1.1, of a derived type, can be used anywhere that a\nvariable of its “parent's” type can be used, for example variables of the types RU_REAL and\nFREQ as shown in tables 12 and 14 can be used anywhere that a variable of type REAL could\nbe used, and variables of type ANALOG_DATA can be used anywhere that a variable of type INT\ncould be used.\nThis rule can be applied recursively. For example, given the declarations below, the variable R3\nof type R2 can be used anywhere a variable of type REAL can be used:\nTYPE R1 : REAL := 1.0 ; END_TYPE\nTYPE R2 : R1 ; END_TYPE\nVAR R3: R2; END_VAR\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 36 – 61131-3  IEC:2003(E)\n2) An element of a multi-element variable, as defined in 2.4.1.2, can be used anywhere the\n“parent” type can be used, for example, given the declaration of ANALOG_16_INPUT_DATA in\ntable 12 and the declaration\n VAR INS : ANALOG_16_INPUT_DATA ; END_VAR\nthe v"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 107,
    "text": "2.4.1.2, can be used anywhere the\n“parent” type can be used, for example, given the declaration of ANALOG_16_INPUT_DATA in\ntable 12 and the declaration\n VAR INS : ANALOG_16_INPUT_DATA ; END_VAR\nthe variables INS[1] through INS[16] can be used anywhere that a variable of type INT\ncould be used.\nThis rule can also be applied recursively, for example, given the declarations of\nANALOG_16_INPUT_CONFIGURATION, ANALOG_CHANNEL_CONFIGURATION, and ANALOG_-\nDATA in table 12 and the declaration\n VAR CONF : ANALOG_16_INPUT_CONFIGURATION ; END_VAR\nthe variable CONF.CHANNEL[2].MIN_SCALE can be used anywhere that a variable of type\nINT could be used.\n2.4  Variables\nIn contrast to the external representations of data described in 2.2, variables provide a means of\nidentifying data objects whose contents may change, for example, data associated with the inputs,\noutputs, or memory of the programmable controller. A variable can be declared to be one of the\nelementary types defined in 2.3.1, or one of the derived types which are declared as defined in\n2.3.3.1.\n2.4.1  Representation\n2.4.1.1  Single-element variables\nA single-element variable is defined as a variable which represents a single data elemen"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 108,
    "text": "derived types which are declared as defined in\n2.3.3.1.\n2.4.1  Representation\n2.4.1.1  Single-element variables\nA single-element variable is defined as a variable which represents a single data element of one of the\nelementary types defined in 2.3.1; a derived enumeration or subrange type as defined in 2.3.3.1; or a\nderived type whose “parentage”, as defined recursively in 2.3.3.3, is traceable to an elementary,\nenumeration or subrange type.  This subclause defines the means of representing such variables\nsymbolically, or alternatively in a manner which directly represents the association of the data element\nwith physical or logical locations in the programmable controller's input, output, or memory structure.\nIdentifiers, as defined in 2.1.2, shall be used for symbolic  representation of variables.\nDirect representation of a single-element variable shall be provided by a special symbol formed by\nthe concatenation of the percent sign “\n%” (character code 037 decimal in table 1 - Row 00 of ISO/IEC\n10646-1), a location prefix  and a size prefix  from table 15, and one or more unsigned integers,\nseparated by periods (.).\nIn the case that a directly represented variable is used in a lo"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 109,
    "text": "of ISO/IEC\n10646-1), a location prefix  and a size prefix  from table 15, and one or more unsigned integers,\nseparated by periods (.).\nIn the case that a directly represented variable is used in a location assignment to an internal variable\nin the declaration part of a program or a function block type as defined in 2.4.3.1, an asterisk “*” shall\nbe used in place of the size prefix and the one or several unsigned integers in the concatenation to\nindicate that the direct representation is not yet fully specified. The percent sign and the location prefix\nI, Q or M from table 15 shall always be present in the direct representation.\nIn both cases, the use of this feature requires that the location of the variable so declared shall be fully\nspecified inside the VAR_CONFIG...END_VAR construction of the configuration as defined in 2.7.1 for\nevery instance of the containing type.\nIt is an error if any of the full specifications in the VAR_CONFIG...END_VAR construction is missing\nfor any incomplete address specification expressed by the asterisk notation in any instance of\nprograms or function block types which contain such incomplete specifications.\nCopyright International Electrotechnical"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 110,
    "text": "lete address specification expressed by the asterisk notation in any instance of\nprograms or function block types which contain such incomplete specifications.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 37 –\nEXAMPLES\n%QX75 and %Q75 Output bit 75\n%IW215 Input word location 215\n%QB7 Output byte location 7\n%MD48 Double word at memory location 48\n%IW2.5.7.1 See explanation below\n%Q* Output at a not yet specified location\nThe manufacturer shall specify the correspondence between the direct representation of a variable\nand the physical or logical location of the addressed item in memory, input or output.  When a direct\nrepresentation is extended with additional integer fields separated by periods, it shall be interpreted as\na \nhierarchical physical or logical address with the leftmost field representing the highest level of the\nhierarchy, with successively lower levels appearing to the right.  For instance, the variable\n%IW2.5.7.1 may represent the first “channel” (word) of the seventh “module” in the fifth “r"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 111,
    "text": "t level of the\nhierarchy, with successively lower levels appearing to the right.  For instance, the variable\n%IW2.5.7.1 may represent the first “channel” (word) of the seventh “module” in the fifth “rack” of the\nsecond “I/O bus” of a programmable controller system.\nThe use of hierarchical addressing to permit a program in one programmable controller system to\naccess data in another programmable controller shall be considered a language extension.\nThe use of directly represented variables is permitted in function blocks as defined in 2.5.2, programs\nas defined in 2.5.3, and in configurations and resources as defined in 2.7.1.  The maximum number of\nlevels of hierarchical addressing is an implementation-dependent parameter.\nTable 15 - Location and size prefix features for directly represented variables\nNo. Prefix Meaning Default data type\n1I Input location\n2Q Output location\n3M Memory location\n4 X Single bit size BOOL\n5 None Single bit size BOOL\n6 B Byte (8 bits) size BYTE\n7 W Word (16 bits) size WORD\n8 D Double word (32 bits)\nsize\nDWORD\n9 L Long (quad) word (64\nbits) size\nLWORD\n10 Use of an asterisk (*) to indicate a not yet specified\nlocation (NOTE 2)\nNOTE 1 National standards orga"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 112,
    "text": "its) size WORD\n8 D Double word (32 bits)\nsize\nDWORD\n9 L Long (quad) word (64\nbits) size\nLWORD\n10 Use of an asterisk (*) to indicate a not yet specified\nlocation (NOTE 2)\nNOTE 1 National standards organizations can publish tables of translations of these\nprefixes.\nNOTE 2 Use of feature 10 in this table requires feature 11 of table 49 and vice versa.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 38 – 61131-3  IEC:2003(E)\n2.4.1.2  Multi-element variables\nThe multi-element variable types defined in this standard are arrays and structures.\nAn array is a collection of data elements of the same data type referenced by one or more subscripts\nenclosed in brackets and separated by commas.  In the ST language defined in subclause 3.3, a\nsubscript shall be an expression yielding a value corresponding to one of the sub-types of generic type\nANY_INT as defined in table 11. The form of subscripts in the IL language defined in 3.2, and the\ngraphic languages defined in clause 4, is restricted to single-element variables or integer literals.\nAn"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 113,
    "text": "_INT as defined in table 11. The form of subscripts in the IL language defined in 3.2, and the\ngraphic languages defined in clause 4, is restricted to single-element variables or integer literals.\nAn example of the use of array variables in the ST language as defined in 3.3 is:\nOUTARY[%MB6,SYM] := INARY[0] + INARY[7] - INARY[%MB6] * %IW62 ;\nA structured variable  is a variable which is declared to be of a type which has previously been\nspecified to be a data structure, i.e., a data type consisting of a collection of named elements.\nAn element of a structured variable shall be represented by two or more identifiers or array accesses\nseparated by single periods (.). The first identifier represents the name of the structured element, and\nsubsequent identifiers represent the sequence of component names to access the particular data\nelement within the data structure.\nFor instance, if the variable MODULE_5_CONFIG has been declared to be of type\nANALOG_16_INPUT_CONFIGURATION as shown in table 12, the following statements in the ST\nlanguage defined in 3.3 would cause the value SINGLE_ENDED to be assigned to the element\nSIGNAL_TYPE of the variable MODULE_5_CONFIG, while the value BIPOLAR_10"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 114,
    "text": "12, the following statements in the ST\nlanguage defined in 3.3 would cause the value SINGLE_ENDED to be assigned to the element\nSIGNAL_TYPE of the variable MODULE_5_CONFIG, while the value BIPOLAR_10V would be assigned\nto the RANGE sub-element of the fifth CHANNEL element of MODULE_5_CONFIG:\nMODULE_5_CONFIG.SIGNAL_TYPE := SINGLE_ENDED;\nMODULE_5_CONFIG.CHANNEL[5].RANGE := BIPOLAR_10V;\n2.4.2  Initialization\nWhen a configuration element ( resource or configuration) is “started” as defined in 1.4.1, each of the\nvariables associated with the configuration element and its programs can take on one of the following\ninitial values:\n- the value the variable had when the configuration element was “stopped” (a retained value);\n- a user-specified initial value;\n- the default initial value for the variable's associated data type.\nThe user can declare that a variable is to be \nretentive by using the RETAIN qualifier specified in\ntable 16 a), when this feature is supported by the implementation.\nThe initial value of a variable upon starting of its associated configuration element shall be determined\naccording to the following rules:\n 1) If the starting operation is a “warm restart” as defined in"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 115,
    "text": "initial value of a variable upon starting of its associated configuration element shall be determined\naccording to the following rules:\n 1) If the starting operation is a “warm restart” as defined in IEC 61131-1, the initial values of retentive\nvariables shall be their retained values as defined above.\n 2) If the operation is a “cold restart” as defined in IEC 61131-1, the initial values of retentive variables\nshall be the user-specified initial values, or the default value, as defined in 2.3.3.2, for the\nassociated data type of any variable for which no initial value is specified by the user.\n 3) Non-retained variables shall be initialized to the user-specified initial values, or to the default value,\nas defined in 2.3.3.2, for the associated data type of any variable for which no initial value is\nspecified by the user.\n 4) Variables which represent \ninputs of the programmable controller system as defined in IEC 61131-1\nshall be initialized in an implementation-dependent manner.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 116,
    "text": "ight International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 39 –\n2.4.3  Declaration\nEach declaration of a program organization unit type (i.e., each declaration of a program, function, or\nfunction block , as defined in 2.5) shall contain at its beginning at least one declaration part  which\nspecifies the types (and, if necessary, the physical or logical location) of the variables used in the\norganization unit.  This declaration part shall have the textual form of one of the keywords VAR,\nVAR_INPUT, or VAR_OUTPUT as defined in table 16 a), followed in the case of VAR by zero or one\noccurrence of the qualifiers RETAIN,NON_RETAIN or the qualifier CONSTANT, and in the case of\nVAR_INPUT or VAR_OUTPUT by zero or one occurrence of the qualifier RETAIN or NON_RETAIN,\nfollowed by one or more declarations separated by semicolons and terminated by the keyword\nEND_VAR.  When a programmable controller supports the declaration by the user of initial values for\nvariables, this declaration shall be accomplished in the declaration part(s) as"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 117,
    "text": "ated by the keyword\nEND_VAR.  When a programmable controller supports the declaration by the user of initial values for\nvariables, this declaration shall be accomplished in the declaration part(s) as defined in this subclause.\nTable 16 a) - Variable declaration keywords\nKeyword Variable usage\nVAR Internal to organization unit\nVAR_INPUT Externally supplied, not modifiable within organization unit\nVAR_OUTPUT Supplied by organization unit to external entities\nVAR_IN_OUT Supplied by external entities - can be modified within organization unit\nVAR_EXTERNAL Supplied by configuration via VAR_GLOBAL (2.7.1)\nCan be modified within organization unit\nVAR_GLOBAL Global variable declaration (2.7.1)\nVAR_ACCESS Access path declaration (2.7.1)\nVAR_TEMP Temporary storage for variables in function blocks and programs (2.4.3)\nVAR_CONFIG Instance-specific initialization and location assignment.\nRETAINb,c,d,e Retentive variables (see preceding text)\nNON_RETAINb,c,d,e Non-retentive variables (see preceding text)\nCONSTANTa Constant (variable cannot be modified)\nAT Location assignment (2.4.3.1)\nNOTE 1 The usage of these keywords is a feature of the program organization unit or\nconfiguration element in whi"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 118,
    "text": "text)\nCONSTANTa Constant (variable cannot be modified)\nAT Location assignment (2.4.3.1)\nNOTE 1 The usage of these keywords is a feature of the program organization unit or\nconfiguration element in which they are used.  Normative requirements for the use\nof these keywords are given in 2.4.3.1, 2.4.3.2, 2.5 and 2.7.\nNOTE 2  Examples of the use of \nVAR_IN_OUT variables are given in figures 11b and 12.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 40 – 61131-3  IEC:2003(E)\nTable 16 a) - Variable declaration keywords\na The CONSTANT qualifier shall not be used in the declaration of function block instances as\ndescribed in 2.5.2.1.\nb The RETAIN and NON_RETAIN qualifiers may be used for variables declared in  VAR,\nVAR_INPUT, VAR_OUTPUT, and VAR_GLOBAL blocks but not in VAR_IN_OUT blocks and\nnot for individual elements of structures.\nc Usage of RETAIN and NON_RETAIN for function block and program instances is allowed.\nThe effect is that all members of the instance are treated as RETAIN or NON_RETAIN,\nexcept if:\n- the member is explicitl"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 119,
    "text": "e of RETAIN and NON_RETAIN for function block and program instances is allowed.\nThe effect is that all members of the instance are treated as RETAIN or NON_RETAIN,\nexcept if:\n- the member is explicitly declared as RETAIN or NON_RETAIN in the function block or\nprogram type definition;\n- the member itself is a function block.\nd Usage of RETAIN and NON_RETAIN for instances of structured data types is allowed. The\neffect is that all structure members, also those of nested structures, are treated as RETAIN\nor NON_RETAIN.\ne Both RETAIN and NON_RETAIN are features. If a variable is neither explicitly declared as\nRETAIN nor as NON_RETAIN the “warm start” behaviour of the variable is implementation\ndependent.\nWithin function blocks  and programs, variables can be declared in a VAR_TEMP...END_VAR\nconstruction. These variables are allocated and initialized at each invocation of an instance of the\nprogram organization unit, and do not persist between invocations.\nThe scope (range of validity) of the declarations contained in the declaration part shall be local to the\nprogram organization unit in which the declaration part is contained.  That is, the declared variables\nshall not be accessible t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 120,
    "text": "he declarations contained in the declaration part shall be local to the\nprogram organization unit in which the declaration part is contained.  That is, the declared variables\nshall not be accessible to other program organization units except by explicit argument passing via\nvariables which have been declared as inputs or outputs of those units.  The one exception to this rule\nis the case of variables which have been declared to be global, as defined in 2.7.1.  Such variables\nare only accessible to a program organization unit via a VAR_EXTERNAL declaration.  The type of a\nvariable declared in a VAR_EXTERNAL block shall agree with the type declared in the VAR_GLOBAL\nblock of the associated program, configuration or resource.\nIt shall be an error if:\n• any program organization unit attempts to modify the value of a variable that has been declared\nwith the CONSTANT qualifier;\n• a variable declared as VAR_GLOBAL CONSTANT  in a configuration element or program\norganization unit (the “containing element”) is used in a VAR_EXTERNAL declaration (without the\nCONSTANT qualifier) of any element contained within the containing element as illustrated below.\nThe maximum number of variables allowe"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 121,
    "text": "ing element”) is used in a VAR_EXTERNAL declaration (without the\nCONSTANT qualifier) of any element contained within the containing element as illustrated below.\nThe maximum number of variables allowed in a variable declaration block is an implementation-\ndependent parameter.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 41 –\nTable 16 b) – Usages of VAR_GLOBAL, VAR_EXTERNAL and CONSTANT declarations\nDeclaration in containing element Declaration in contained element Allowed?\nVAR_GLOBAL X ... VAR_EXTERNAL CONSTANT X... Yes\nVAR_GLOBAL X ... VAR_EXTERNAL X... Yes\nVAR_GLOBAL CONSTANT X ... VAR_EXTERNAL CONSTANT X ... Yes\nVAR_GLOBAL CONSTANT X ... VAR_EXTERNAL X ... NO\n2.4.3.1  Type assignment\nAs shown in table 17, the VAR...END_VAR construction shall be used to specify data types and\nretentivity for directly represented variables.  This construction shall also be used to specify data\ntypes, retentivity, and (where necessary, in programs and VAR_GLOBAL declarations only) the physical\nor logical location of symbol"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 122,
    "text": "nted variables.  This construction shall also be used to specify data\ntypes, retentivity, and (where necessary, in programs and VAR_GLOBAL declarations only) the physical\nor logical location of symbolically represented single- or multi-element variables.  The usage of the\nVAR_INPUT, VAR_OUTPUT, and VAR_IN_OUT constructions is defined in 2.5.\nThe assignment of a physical or logical address to a symbolically represented variable shall be\naccomplished by the use of the AT keyword.  Where no such assignment is made, automatic\nallocation of the variable to an appropriate location in the programmable controller memory shall be\nprovided.\nThe asterisk notation (feature No. 10 in table 15) can be used in address assignments inside\nprograms and function block types to denote not yet fully specified locations for directly represented\nvariables.\nTable 17 - Variable type assignment features\nNo. Feature/examples\n1a Declaration of directly represented variables\nVAR\n    AT %IW6.2 : WORD;\n    AT %MW6   : INT ;\nEND_VAR\n16-bit string (note 2)\n16-bit integer, initial value = 0\n2a Declaration of directly represented retentive variables\nVAR RETAIN\n  AT %QW5 : WORD ;\nEND_VAR\nAt cold restart,  will be ini"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 123,
    "text": ": INT ;\nEND_VAR\n16-bit string (note 2)\n16-bit integer, initial value = 0\n2a Declaration of directly represented retentive variables\nVAR RETAIN\n  AT %QW5 : WORD ;\nEND_VAR\nAt cold restart,  will be initialized to a 16-bit string with value\n16#0000\n3a Declaration of locations of symbolic variables\nVAR_GLOBAL\n LIM_SW_S5 AT %IX27 : BOOL;\nAssigns input bit 27 to the Boolean variable\nLIM_SW_5 (note 2)\n CONV_START AT %QX25 : BOOL; Assigns output bit 25 to the Boolean variable\nCONV_START\n TEMPERATURE AT %IW28: INT; Assigns input word 28 to the integer variable\nTEMPERATURE  (note 2)\nVAR C2 AT %Q* : BYTE ;\nEND_VAR\nAssigns not yet located output byte to bitstring\nvariable C2 of length 8 bits\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 42 – 61131-3  IEC:2003(E)\nTable 17 - Variable type assignment features\nNo. Feature/examples\n4a Array location assignment\nVAR\nINARY AT %IW6 :\n ARRAY [0..9] OF INT;\nEND_VAR\nDeclares an array of 10 integers to be allocated to contiguous\ninput locations starting at %IW6 (note 2)\n5 Automatic memory allocation o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 124,
    "text": "on assignment\nVAR\nINARY AT %IW6 :\n ARRAY [0..9] OF INT;\nEND_VAR\nDeclares an array of 10 integers to be allocated to contiguous\ninput locations starting at %IW6 (note 2)\n5 Automatic memory allocation of symbolic variables\nVAR\n  CONDITION_RED : BOOL;\n  IBOUNCE : WORD ;\n  MYDUB : DWORD ;\n  AWORD, BWORD, CWORD : INT;\n  MYSTR: STRING[10] ;\nEND_VAR\nAllocates a memory bit to the Boolean variable\nCONDITION_RED.\nAllocates a memory word to the 16-bit string variable\nIBOUNCE.\nAllocates a double memory word to the 32-bit-string\nvariable MYDUB.\nAllocates 3 separate memory words for the integer\nvariables AWORD, BWORD, and CWORD.\nAllocates memory to contain a string with a\nmaximum length of 10 characters.  After initializa-\ntion, the string has length 0 and contains the empty\nstring \n''.\n6 Array declaration\nVAR THREE :\nARRAY[1..5,1..10,1..8] OF INT;\nEND_VAR\nAllocates 400 memory words for a three-\ndimensional array of integers\n7 Retentive array declaration\nVAR RETAIN RTBT:\n  ARRAY[1..2,1..3] OF INT;\nEND_VAR\nDeclares retentive array RTBT with “cold\nrestart” initial values of 0 for all elements\n8 Declaration of structured variables\nVAR MODULE_8_CONFIG :\n   ANALOG_16_INPUT_CONFIGURATION;\nEND_VAR\nDecl"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 125,
    "text": "ND_VAR\nDeclares retentive array RTBT with “cold\nrestart” initial values of 0 for all elements\n8 Declaration of structured variables\nVAR MODULE_8_CONFIG :\n   ANALOG_16_INPUT_CONFIGURATION;\nEND_VAR\nDeclaration of a variable of derived data\ntype  (see table 12)\nNOTE 1 Initialization of system inputs is implementation-dependent; see 2.4.2.\nNOTE 2 The notes to table 16 a) also apply to this table.\na If directly represented variables are explicitly located, features 1 to 4 can only be used in\nPROGRAM and VAR_GLOBAL declarations, as defined in 2.5.3 and 2.7.1, respectively. If the\nasterisk notation of feature 10 in table 15 is used to indicate instance specific location\nassignment of a partly specified directly represented variable, features 1 and 2 can not be used,\nand features 3 and 4 can only be used in declarations of internal variables of function blocks and\nprograms, as defined in 2.5.2 and 2.5.3, respectively.\n2.4.3.2  Initial value assignment\nThe VAR...END_VAR construction can be used as shown in table 18 to specify initial values of\ndirectly represented variables or symbolically represented single- or multi-element variables.\nCopyright International Electrotechnical Commission \nP"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 126,
    "text": "as shown in table 18 to specify initial values of\ndirectly represented variables or symbolically represented single- or multi-element variables.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 43 –\nInitial values can also be specified by using the instance-specific initialization feature provided by the\nVAR_CONFIG...END_VAR construct described in 2.7.1 (table 49, feature 11). Instance-specific initial\nvalues always override type-specific initial values.\nNOTE The usage of the VAR_INPUT, VAR_OUTPUT, and VAR_IN_OUT constructions is defined\nin subclause 2.5.\nInitial values cannot be given in VAR_EXTERNAL declarations.\nDuring initialization of arrays, the rightmost subscript of an array shall vary most rapidly with respect to\nfilling the array from the list of initialization variables.\nParentheses can be used as a repetition factor in array initialization lists, for example, 2(1,2,3) is\nequivalent to the initialization sequence 1,2,3,1,2,3.\nIf the number of initial values given in the initialization list exceeds"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 127,
    "text": "petition factor in array initialization lists, for example, 2(1,2,3) is\nequivalent to the initialization sequence 1,2,3,1,2,3.\nIf the number of initial values given in the initialization list exceeds the number of array entries, the\nexcess (rightmost) initial values shall be ignored.  If the number of initial values is less than the\nnumber of array entries, the remaining array entries shall be filled with the default initial values for the\ncorresponding data type.  In either case, the user shall be warned of this condition during preparation\nof the program for execution.\nWhen a variable is declared to be of a derived, structured data type as defined in 2.3.3.1, initial values\nfor the elements of the variable can be declared in a parenthesized list following the data type\nidentifier, as shown in table 18.  Elements for which initial values are not listed in the initial value list\nshall have the default initial values declared for those elements in the data type declaration.\nWhen a variable is declared to be a \nfunction block instance, as defined in 2.5.2.2, initial values for the\ninputs and any accessible variables of the function block can be declared in a parenthesized list\nfollow"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 128,
    "text": "ble is declared to be a \nfunction block instance, as defined in 2.5.2.2, initial values for the\ninputs and any accessible variables of the function block can be declared in a parenthesized list\nfollowing the assignment operator that follows the function block type identifier as shown in table 18.\nElements for which initial values are not listed shall have the default initial values declared for those\nelements in the function block declaration.\nTable 18 - Variable initial value assignment features\nNo. Feature/examples\n1 a Initialization of directly represented variables\nVAR AT %QX5.1 : BOOL :=1;\n          AT %MW6 : INT := 8 ;\nEND_VAR\nBoolean type, initial value = 1\nInitializes a memory word to integer 8\n2 a Initialization of directly represented retentive variables\nVAR RETAIN\n  AT %QW5 : WORD  := 16#FF00 ;\nEND_VAR\nAt cold restart, the 8 most significant bits of\nthe 16-bit string at output word 5 are to be\ninitialized to 1 and the 8 least significant bits\nto 0\n3 a Location and initial value assignment to symbolic variables\nVAR\n   VALVE_POS AT %QW28 :  INT := 100;\nEND_VAR\nAssigns output word 28 to the\ninteger variable VALVE_POS, with\nan initial value of 100\n4 a Array location assignme"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 129,
    "text": "lue assignment to symbolic variables\nVAR\n   VALVE_POS AT %QW28 :  INT := 100;\nEND_VAR\nAssigns output word 28 to the\ninteger variable VALVE_POS, with\nan initial value of 100\n4 a Array location assignment and initialization\nVAR OUTARY AT %QW6 :\n ARRAY[0..9] OF INT := [10(1)];\nEND_VAR\nDeclares an array of 10 integers to be\nallocated to contiguous output locations\nstarting at %QW6, each with an initial\nvalue of 1\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 44 – 61131-3  IEC:2003(E)\nTable 18 - Variable initial value assignment features\nNo. Feature/examples\n5 Initialization of symbolic variables\nVAR\n  MYBIT : BOOL := 1 ;\n  OKAY : STRING[10] := 'OK';\nEND_VAR\nAllocates a memory bit to the Boolean\nvariable MYBIT with an initial value of 1\nAllocates memory to contain a string with a\nmaximum length of 10 characters. After\ninitialization, the string has a length of 2 and\ncontains the two-byte sequence of characters\n'OK' (decimal 79 and 75 respectively), in an\norder appropriate for printing as a character\nstring\n6 Array initialization\nVAR"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 130,
    "text": "e string has a length of 2 and\ncontains the two-byte sequence of characters\n'OK' (decimal 79 and 75 respectively), in an\norder appropriate for printing as a character\nstring\n6 Array initialization\nVAR\n  BITS : ARRAY[0..7] OF BOOL\n    := [1,1,0,0,0,1,0,0] ;\n  TBT : ARRAY [1..2,1..3]\n           OF INT\n       := [1,2,3(4),6] ;\nEND_VAR\nAllocates 8 memory bits to contain initial\nvalues\n  BITS[0]:= 1, BITS[1] := 1,...,\n  BITS[6]:= 0, BITS[7] := 0.\nAllocates a 2-by-3 integer array TBT with\ninitial values\n  TBT[1,1]:=1, TBT[1,2]:=2,\n  TBT[1,3]:=4, TBT[2,1]:=4,\n  TBT[2,2]:=4, TBT[2,3]:=6.\n7 Retentive array declaration and initialization\nVAR RETAIN RTBT :\n  ARRAY(1..2,1..3) OF INT\n      := [1,2,3(4)];\nEND_VAR\nDeclares retentive array RTBT with “cold restart”\ninitial values of:\n  RTBT[1,1] := 1, RTBT[1,2] := 2,\n  RTBT[1,3] := 4, RTBT[2,1] := 4,\n  RTBT[2,2] := 4, RTBT[2,3] := 0.\n8 Initialization of structured variables\nVAR MODULE_8_CONFIG:\n  ANALOG_16_INPUT_CONFIGURATION :=\n    (SIGNAL_TYPE := DIFFERENTIAL,\n      CHANNEL\n        := [4((RANGE := UNIPOLAR_1_5V)),\n            (RANGE:= BIPOLAR_10_V,\n             MIN_SCALE := 0,\n             MAX_SCALE := 500)]);\nEND_VAR\nInitialization of a variable"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 131,
    "text": "FERENTIAL,\n      CHANNEL\n        := [4((RANGE := UNIPOLAR_1_5V)),\n            (RANGE:= BIPOLAR_10_V,\n             MIN_SCALE := 0,\n             MAX_SCALE := 500)]);\nEND_VAR\nInitialization of a variable of\nderived data type (see table 12)\nThis example illustrates the\ndeclaration of a non-default initial\nvalue for the fifth element of the\nCHANNEL array of the variable\nMODULE_8_CONFIG.\n9 Initialization of constants\nVAR CONSTANT PI : REAL := 3.141592 ; END_VAR\n10 Initialization of function block instances\nVAR TempLoop :\n  PID :=\n (PropBand := 2.5,\n  Integral := T#5s);\nEND_VAR\nAllocates initial values to inputs and\noutputs of a function block instance\na Features 1 to 4 can only be used in PROGRAM and VAR_GLOBAL declarations, as defined in\n2.5.3 and 2.7.1 respectively.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 45 –\n2.5  Program organization units\nThe program organization units defined in this part of IEC 61131 are the function, function block , and\nprogram.  These program organization units can be delivered by"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 132,
    "text": "–\n2.5  Program organization units\nThe program organization units defined in this part of IEC 61131 are the function, function block , and\nprogram.  These program organization units can be delivered by the manufacturer, or programmed by\nthe user by the means defined in this part of the standard.\nProgram organization units shall not be recursive; that is, the invocation of a program organization unit\nshall not cause the invocation of another program organization unit of the same type.\nThe information necessary to determine execution times of program organization units may consist of\none or more implementation-dependent parameters.\n2.5.1  Functions\nFor the purposes of programmable controller programming languages, a function is defined as a\nprogram organization unit which, when executed, yields exactly one data element, which is considered\nto be the function result, and arbitrarily many additional output elements ( VAR_OUTPUT and\nVAR_IN_OUT). As for any data element, the function result can be multi-valued, for example, an array\nor structure. The invocation of a function can be used in textual languages as an operand in an\nexpression.  For example, the SIN and COS functions could be u"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 133,
    "text": "an be multi-valued, for example, an array\nor structure. The invocation of a function can be used in textual languages as an operand in an\nexpression.  For example, the SIN and COS functions could be used as shown in figure 4.\na) VAR X,Y,Z,RES1,RES2 : REAL; EN1,V : BOOL; END_VAR\nRES1 := DIV(IN1 := COS(X), IN2 := SIN(Y), ENO => EN1);\nRES2 := MUL (SIN(X), COS(Y));\nZ: = ADD(EN := EN1, IN1 := RES1, IN2 := RES2, ENO => V);\nb)        +-----+      +------+     +------+\nX ---+-| COS |--+  -|EN ENO|-----|EN ENO|--- V\n     | |     |  |   |      |     |      |\n     | +-----+  +---| DIV  |-----| ADD  |--- Z\n     |              |      |     |      |\n     | +-----+      |      |   +-|      |\nY -+---| SIN |------|      |   | +------+\n   | | |     |      +------+   |\n   | | +-----+                 |\n   | |                         |\n   | | +-----+      +------+   |\n   | +-| SIN |--+  -|EN ENO|-  |\n   |   |     |  |   |      |   |\n   |   +-----+  +- -| MUL  |---+\n   |                |      |\n   |   +-----+      |      |\n   +---| COS |------|      |\n       |     |      +------+\n       +-----+\na) Structured Text (ST) language - see subclause 3.3\nb) Function Block Diagram (FBD) language - see subclause"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 134,
    "text": "-+      |      |\n   +---| COS |------|      |\n       |     |      +------+\n       +-----+\na) Structured Text (ST) language - see subclause 3.3\nb) Function Block Diagram (FBD) language - see subclause 4.3\nNOTE This figure shows two different representations of the same functionality. It is not required\nto support any automatic transformation between the two forms of representation.\nFigure 4 - Examples of function usage\nIEC   2474/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 46 – 61131-3  IEC:2003(E)\nFunctions shall contain no internal state information, i.e., invocation of a function with the same\narguments (input variables VAR_INPUT and in-out variables VAR_IN_OUT) shall always yield the\nsame values (output variables VAR_OUTPUT, in-out variables VAR_IN_OUT and function result). It\nshall be an error if external variables as defined in 2.4.3 cause the violation of this rule.\nAny function type which has already been declared can be used in the declaration of another program\norganization unit, as shown in figure 3.\n2.5.1.1  Rep"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 135,
    "text": "ned in 2.4.3 cause the violation of this rule.\nAny function type which has already been declared can be used in the declaration of another program\norganization unit, as shown in figure 3.\n2.5.1.1  Representation\nFunctions and their invocation can be represented either graphically or textually.\nIn the textual languages defined in clause 3 of this standard, the invocation of functions shall be\naccording to the following rules:\n1) Input argument assignment shall follow the rules given in table 19 a).\n2) Assignments of output variables of the function shall be either empty or to variables.\n3) Assignments to VAR_IN_OUT arguments shall be variables.\n4) Assignments to \nVAR_INPUT arguments may be empty (feature 1 of table 19 a)), constants,\nvariables or function calls. In the latter case, the function result is used as the actual argument.\nIn the graphic languages defined in clause 4 of this standard, functions shall be represented as\ngraphic blocks according to the following rules:\n5) The form of the block shall be rectangular or square.\n6) The size and proportions of the block may vary depending on the number of inputs and other\ninformation to be displayed.\n7) The direction of processing"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 136,
    "text": "m of the block shall be rectangular or square.\n6) The size and proportions of the block may vary depending on the number of inputs and other\ninformation to be displayed.\n7) The direction of processing through the block shall be from left to right (input variables on the left\nand output variables on the right).\n8) The function name or symbol, as specified below, shall be located inside the block.\n9) Provision shall be made for input and output variable names appearing at the inside left and right\nsides of the block respectively when the block represents:\n- one of the standard functions defined in 2.5.1.5, when the given graphical form includes the\nvariable names; or\n- any additional function declared as specified in 2.5.1.3.\nThis usage is subject to the following provisions:\na) Where no names are given for input variables in standard functions, the default names\nIN1, IN2,... shall apply in top-to-bottom order.\nb) When a standard function has a single unnamed input, the default name IN shall apply.\nc) The default names described above may, but need not appear at the inside left-hand side\nof the graphic representation.\nCopyright International Electrotechnical Commission \nProvided by I"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 137,
    "text": "hall apply.\nc) The default names described above may, but need not appear at the inside left-hand side\nof the graphic representation.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 47 –\n10) An additional input EN and/or output ENO as specified in 2.5.1.2 may be used. If present, they shall\nbe shown at the uppermost positions at the left and right side of the block, respectively.\n11) The function result shall be shown at the uppermost position at the right side of the block, except if\nthere is an ENO output, in which case the function result shall be shown at the next position below\nthe ENO output. Since the name of the function is used for the assignment of its output value as\nspecified in 2.5.1.3, no output variable name shall be shown at the right side of the block.\n12) Argument connections (including function result) shall be shown by signal flow lines.\n13) Negation of Boolean signals shall be shown by placing an open circle just outside of the input or\noutput line intersection with the block.  In the cha"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 138,
    "text": "result) shall be shown by signal flow lines.\n13) Negation of Boolean signals shall be shown by placing an open circle just outside of the input or\noutput line intersection with the block.  In the character set defined in 2.1.1, this shall be\nrepresented by the upper case alphabetic “\nO”, as shown in table 19.\n14) All inputs and outputs (including function result) of a graphically represented function shall be\nrepresented by a single line outside the corresponding side of the block, even though the data\nelement may be a multi-element variable.\n15) Function results and function outputs (\nVAR_OUTPUT) can be connected to a variable, used as\ninput to other function blocks or functions, or can be left unconnected.\n16) It shall be an error if any VAR_IN_OUT variable of any function block invocation or function\ninvocation within a POU is not “properly mapped”.  A VAR_IN_OUT variable is “properly mapped” if\nit is connected graphically at the left, or assigned using the “:=” operator in a textual invocation, to\na variable declared (without the CONSTANT qualifier) in a VAR_IN_OUT, VAR, VAR_OUT, or\nVAR_EXTERNAL block of the containing program organization unit, or to a “properly mapped”\nVAR_I"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 139,
    "text": "al invocation, to\na variable declared (without the CONSTANT qualifier) in a VAR_IN_OUT, VAR, VAR_OUT, or\nVAR_EXTERNAL block of the containing program organization unit, or to a “properly mapped”\nVAR_IN_OUT of another contained function block instance or function invocation.\n17) A “properly mapped” (see rule 12 above) VAR_IN_OUT variable of a function block instance or a\nfunction invocation can be connected graphically at the right, or assigned using the “:=” operator in\na textual assignment statement, to a variable declared in a VAR, VAR_OUT or VAR_EXTERNAL\nblock of the containing program organization unit.  It shall be an error if such a connection would\nlead to an ambiguous value of the variable so connected.\nTable 19 - Graphical negation of Boolean signals\nNo. Feature a, b Representation\n1 Negated input\n        +---+\n    ---O|   |---\n        +---+\n2 Negated output\n        +---+\n    ----|   |O---\n        +---+\na If either of these features is supported for functions, it shall also\nbe supported for function blocks as defined in 2.5.2, and vice\nversa.\nb The use of these constructs is forbidden  for in-out variables.\nCopyright International Electrotechnical Commission \nProvided by I"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 140,
    "text": "supported for function blocks as defined in 2.5.2, and vice\nversa.\nb The use of these constructs is forbidden  for in-out variables.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 48 – 61131-3  IEC:2003(E)\nFigure 5 illustrates both the graphical and equivalent textual use of functions, including the use of a\nstandard function (ADD) with no defined formal argument names; a standard function (SHL) with\ndefined formal argument names; the same function with additional use of EN input and negated ENO\noutput; and a user-defined function (INC) with defined formal argument names.\nExample Explanation\n    +-----+\n    | ADD |\n    B---|     |---A\nC---|     |\nD---|     |\n    +-----+\nGraphical use of ADD function\n(See 2.5.1.5.2)\n(FBD language; see 4.3)\n(No formal variable names)\nA := ADD(B,C,D); Textual use of ADD function\n(ST language; see 3.3)\n    +-----+\n    | SHL |\n    B---|IN   |---A\nC---|N    |\n    +-----+\nGraphical use of SHL function\n(See  2.5.1.5.3)\n(FBD language; see  4.3)\n(Formal argument names)\nA := SHL(IN := B,N := C); Textual u"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 141,
    "text": "+-----+\n    | SHL |\n    B---|IN   |---A\nC---|N    |\n    +-----+\nGraphical use of SHL function\n(See  2.5.1.5.3)\n(FBD language; see  4.3)\n(Formal argument names)\nA := SHL(IN := B,N := C); Textual use of SHL function\n(ST language; see 3.3)\n    +---------+\n    |   SHL   |\n    ENABLE---|EN    ENO|O--NO_ERR\n    B---|IN       |---A\nC---|N        |\n    +---------+\nGraphical use of SHL function\n(See  2.5.1.5.3)\n(FBD language; see  4.3)\n(Formal argument names; use of EN input\nand negated ENO output)\nA := SHL(EN:=ENABLE, IN:=B, N:=C,\nNOT ENO => NO_ERR);\nTextual use of SHL function\n(ST language; see 3.3)\n    +-----+\n    | INC |\n        |     |---A\n    X---|V---V|---X\n    +-----+\nGraphical use of user-defined\nINC function\n(FBD language, see 4.3)\n(Formal argument names for VAR_IN_OUT)\nA := INC(V := X) ; Textual use of INC function\n(ST language, see 3.3)\nFigure 5 - Use of formal argument names\nFeatures for the textual invocation of functions are defined in table 19 a). The textual invocation of a\nfunction shall consist of the function name followed by a list of arguments. In the ST language defined\nin subclause 3.3, the arguments shall be separated by commas and this list shall be delimited"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 142,
    "text": "a\nfunction shall consist of the function name followed by a list of arguments. In the ST language defined\nin subclause 3.3, the arguments shall be separated by commas and this list shall be delimited on the\nleft and right by parentheses.\nIn feature 1 of table 19 a) (formal invocation), the argument list has the form of a set of assignments of\nactual values to the formal argument names (formal argument list), that is:\n1) assignments of values to input and in-out variables using the \n\":=\" operator, and\n2) assignments of the values of output variables to variables using the \"=>\" operator.\nIEC   2475/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 49 –\nThe ordering of arguments in the list shall be insignificant. In feature 1 of table 19 a), any variable not\nassigned a value in the list shall have the default value, if any, assigned in the function specification,\nor the default value for the associated data type.\nIn feature 2 of table 19 a) (non-formal invocation), the argument list shall contain exactly the s"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 143,
    "text": "e, if any, assigned in the function specification,\nor the default value for the associated data type.\nIn feature 2 of table 19 a) (non-formal invocation), the argument list shall contain exactly the same\nnumber of arguments, in exactly the same order and of the same data types as given in the function\ndefinition, except the execution control arguments \nEN and ENO.\nTable 19 a) - Textual invocation of functions for formal and non-formal argument list\nFeature Example\nNo. Invocation\ntype\nVariable\nassignme\nnt\nVariable\norder\nNumber of\nvariables\nIn Structured Text (ST) language\n- see 3.3\n1 formal yes any any A := LIMIT(EN:=COND, IN:=B,\n           MX:=5, ENO=>TEMPL);\n2 a non-formal no fixed fixed A := LIMIT(1, B, 5);\na Feature #2 is required for invocation of any of the standard functions defined in subclause\n2.5.1.5 without formal names for one or more input variables, but feature #1 shall be used if\nEN/ENO is necessary in function invocations.\nNOTE 1 In the example given in feature #1, the MN variable will have the default value 0\n(zero).\nNOTE 2 The example given in feature #2 is semantically equivalent to the following\ninvocation with formal variable assignments (feature #1):\nA := LIMIT"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 144,
    "text": "N variable will have the default value 0\n(zero).\nNOTE 2 The example given in feature #2 is semantically equivalent to the following\ninvocation with formal variable assignments (feature #1):\nA := LIMIT(EN := TRUE,MN := 1,  IN := B, MX := 5);\n2.5.1.2  Execution control\nAs shown in table 20, an additional Boolean EN (Enable) input or ENO (Enable Out) output, or both,\ncan be provided by the manufacturer or user according to the declarations\nVAR_INPUT   EN: BOOL := 1;  END_VAR\nVAR_OUTPUT  ENO: BOOL;  END_VAR\nWhen these variables are used, the execution of the operations defined by the function shall be\ncontrolled according to the following rules:\n1) If the value of EN is FALSE (0) when the function is invoked, the operations defined by the\nfunction body shall not be executed and the value of ENO shall be reset to FALSE (0) by the\nprogrammable controller system.\n2) Otherwise, the value of ENO shall be set to TRUE (1) by the programmable controller system,\nand the operations defined by the function body shall be executed.  These operations can\ninclude the assignment of a Boolean value to ENO.\n3) If any of the errors defined in table E.1 for subclauses of 2.5.1.5 occurs during the executio"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 145,
    "text": "nction body shall be executed.  These operations can\ninclude the assignment of a Boolean value to ENO.\n3) If any of the errors defined in table E.1 for subclauses of 2.5.1.5 occurs during the execution of\none of the standard functions defined in 2.5.1.5, the ENO output of that function shall be reset to\nFALSE (0) by the programmable controller system, or the manufacturer shall specify other\ndisposition of such an error according to the provisions of 1.5.1.\n4) If the ENO output is evaluated to FALSE (0), the values of all function outputs (VAR_OUTPUT,\nVAR_IN_OUT and function result) shall be considered to be implementation-dependent.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 50 – 61131-3  IEC:2003(E)\nNOTE It is a consequence of these rules that the ENO output of a function must be explicitly\nexamined by the invoking entity if necessary to account for possible error conditions.\nTable 20 - Use of EN input and ENO output\nNo. Feature Examplea\n1\nUse of EN and ENO\nShown in LD (Ladder Diagram)\nlanguage;  see 4.2\n           +-------"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 146,
    "text": "cessary to account for possible error conditions.\nTable 20 - Use of EN input and ENO output\nNo. Feature Examplea\n1\nUse of EN and ENO\nShown in LD (Ladder Diagram)\nlanguage;  see 4.2\n           +-------+         |\n  | ADD_EN |   +   |  ADD_OK |\n  +---||---|EN  ENO|---( )---+\n  |        |       |         |\n  |    A---|       |---C     |\n  |    B---|       |         |\n           +-------+         |\n2 Usage without EN and ENO\nShown in FBD (Function Block\nDiagram) language; see 4.3\n             +-----+\n         A---|  +  |---C\n         B---|     |\n             +-----+\n3 Usage with EN and without ENO\nShown in FBD (Function Block\nDiagram) language; see 4.3\n             +-----+\n    ADD_EN---|EN   |\n         A---|  +  |---C\n         B---|     |\n             +-----+\n4 Usage without EN and with ENO\nShown in FBD (Function Block\nDiagram) language; see 4.3\n             +-----+\n             |  ENO|---ADD_OK\n         A---|  +  |---C\n         B---|     |\n             +-----+\na The graphical languages chosen for demonstrating the features above are given only as\nexemples. Features, if chosen by a vendor, shall be in effect for all languages supported\nby the vendor (IL, ST, LD, FBD).\n2.5.1.3  Declarat"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 147,
    "text": "osen for demonstrating the features above are given only as\nexemples. Features, if chosen by a vendor, shall be in effect for all languages supported\nby the vendor (IL, ST, LD, FBD).\n2.5.1.3  Declaration\nFeatures for the textual and graphical declaration of functions are listed in table 20 a).\nAs illustrated in figure 6, the textual declaration of a function shall consist of the following elements:\n1) The keyword FUNCTION, followed by an identifier specifying the name of the function being\ndeclared, a colon (:), and the data type of the value to be returned by the function;\n2) A VAR_INPUT...END_VAR construct as defined in 2.4.3, specifying the names and types of the\nfunction's input variables;\n3) VAR_IN_OUT...END_VAR and VAR_OUTPUT...END_VAR constructs (see F.11 for an example\nof the use of the latter construct) as defined in 2.4.3, if required, specifying the names and types\nof the function's in-out and output variables;\n4) A VAR...END_VAR construct, if required, specifying the names and types of the function's\ninternal variables;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted witho"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 148,
    "text": "and types of the function's\ninternal variables;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 51 –\n5) A function body , written in one of the languages defined in this standard, or another\nprogramming language as defined in 1.4.3, which specifies the operations to be performed upon\nthe variable(s) in order to assign values dependent on the function's semantics to a variable\nwith the same name as the function, which represents the function result to be returned by the\nfunction (function result), as well as to in-out or output variables;\n6) The terminating keyword \nEND_FUNCTION.\nIf the generic data types given in table 11 are used in the declaration of standard function variables,\nthen the rules for inferring the actual types of the arguments of such functions shall be part of the\nfunction definition.\nThe variable initialization constructs defined in 2.4.3.2 can be used for the declaration of default values\nof function inputs and initial values of their internal and output variables.\nThe values of variables w"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 149,
    "text": "e initialization constructs defined in 2.4.3.2 can be used for the declaration of default values\nof function inputs and initial values of their internal and output variables.\nThe values of variables which are passed to the function via a \nVAR_IN_OUT construct can be modified\nfrom within the function.\nAs illustrated in figure 6, the graphic declaration of a  function shall consist of the following elements:\n1) The bracketing keywords FUNCTION...END_FUNCTION or a graphical equivalent.\n2) A graphic specification of the function name and the names, types and possibly initial values of\nthe function's result and variables (input, output and in-out).\n3) A specification of the names, types and possibly initial values of the internal variables used in\nthe function, for example, using the VAR...END_VAR construct.\n4) A function body as defined above.\nThe maximum number of function specifications allowed in a particular resource is an\nimplementation-dependent parameter.\nTable 20 a) - Function  features\nNo. Description Example\n1 In-out variable declaration (textual) VAR_IN_OUT A: INT; END_VAR\n2 In-out variable declaration (graphical) See figure 6 b)\n3 Graphical connection of  in-out variable to"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 150,
    "text": "tures\nNo. Description Example\n1 In-out variable declaration (textual) VAR_IN_OUT A: INT; END_VAR\n2 In-out variable declaration (graphical) See figure 6 b)\n3 Graphical connection of  in-out variable to different\nvariables(graphical)\nSee figure 6 d)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 52 – 61131-3  IEC:2003(E)\na) FUNCTION SIMPLE_FUN : REAL\n  VAR_INPUT\n    A,B : REAL ;         (* External interface specification *)\n      C : REAL := 1.0;\n  END_VAR\n  VAR_IN_OUT COUNT : INT ; END_VAR\n  VAR COUNTP1 : INT ; END_VAR\n  COUNTP1 := ADD(COUNT,1);  (*Function body specification   *)\n  COUNT := COUNTP1 ;\n     SIMPLE_FUN := A*B/C;\n  END_FUNCTION\nNOTE In the above example, the input variable  is given a default value of 1.0, as\nspecified in 2.4.3.2, to avoid a “division by zero” error if the input is not specified\nwhen the function is invoked, for example, if a graphical input to the function is\nleft unconnected.\nb)   FUNCTION\n              +-------------+ (* External interface specification *)\n              | SIMPLE_FUN  |\n      REA"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 151,
    "text": "voked, for example, if a graphical input to the function is\nleft unconnected.\nb)   FUNCTION\n              +-------------+ (* External interface specification *)\n              | SIMPLE_FUN  |\n      REAL----|A            |----REAL\n      REAL----|B            |\n      REAL----|C            |\n      INT-----|COUNT---COUNT|----INT\n              +-------------+\n(* Function body specification *)\n             +---+\n             |ADD|---         +----+\n      COUNT--|   |---COUNTP1--| := |---COUNT\n          1--|   |            +----+\n             +---+    +---+\n                  A---| * |   +---+\n                  B---|   |---| / |---SIMPLE_FUN\n                      +---+   |   |\n                  C-----------|   |\n                              +---+\n  END_FUNCTION\nc)   ....\nVAR X,Y,Z,RESULT : REAL:\nVAR COUNT1,COUNT2 : INT;\n  ...\nRESULT := SIMPLE_FUN(A:=X,B:=Y,C:=Z,COUNT:=COUNT1);\nCOUNT2 := COUNT1;\n  ...\nd)               +-------------+\n              | SIMPLE_FUN  |\n         X----|A            |----RESULT\n         Y----|B            |\n         Z----|C            |\n     COUNT1---|COUNT---COUNT|----COUNT2\n              +-------------+\nNOTE  The effect of this invocation of this function is ident"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 152,
    "text": "--RESULT\n         Y----|B            |\n         Z----|C            |\n     COUNT1---|COUNT---COUNT|----COUNT2\n              +-------------+\nNOTE  The effect of this invocation of this function is identical to that\nin figure 6 c)\na) Textual declaration in ST language (subclause 3.3)\nb) Graphical declaration in FBD language (subclause 4.3)\nc) Usage of a function in ST language\nd) Usage of a function in FBD language (subclause 4.3)\nFigure 6 - Examples of function declarations and usage\nIEC   2476/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 53 –\n2.5.1.4  Typing, overloading, and type conversion\nA standard function, function block type, operator, or instruction is said to be overloaded when it can\noperate on input data elements of various types within a generic type designator as defined in 2.3.2.\nFor instance, an overloaded addition function on generic type ANY_NUM can operate on data of types\nLREAL, REAL, DINT, INT, and SINT.\nWhen a programmable controller system supports an overloaded standard function, f"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 153,
    "text": "an overloaded addition function on generic type ANY_NUM can operate on data of types\nLREAL, REAL, DINT, INT, and SINT.\nWhen a programmable controller system supports an overloaded standard function, function block\ntype, operator, or instruction, this standard function, function block type, operator, or instruction shall\napply to all data types of the given generic type which are supported by that system.  For example, if a\nprogrammable controller system supports the overloaded function \nADD and the data types SINT, INT,\nand REAL, then the system shall support the ADD function on inputs of type SINT, INT, and REAL.\nWhen a function which normally represents an overloaded operator is to be typed, i.e., the types of its\ninputs and outputs restricted to a particular elementary or derived data type as defined in 2.3, this shall\nbe done by appending an “underline” character followed by the required type, as shown in table 21.\nTable 21 - Typed and overloaded functions\nNo. Feature Example\n1 Overloaded functions\n             +-----+\n             | ADD |\n ANY_NUM-----|     |----ANY_NUM\n ANY_NUM-----|     |\n    .   -----|     |\n    .   -----|     |\n ANY_NUM-----|     |\n             +-----+\n2 a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 154,
    "text": "rloaded functions\n             +-----+\n             | ADD |\n ANY_NUM-----|     |----ANY_NUM\n ANY_NUM-----|     |\n    .   -----|     |\n    .   -----|     |\n ANY_NUM-----|     |\n             +-----+\n2 a Typed functions\n           +---------+\n           | ADD_INT |\n   INT-----|         |----INT\n   INT-----|         |\n    . -----|         |\n    . -----|         |\n   INT-----|         |\n           +---------+\nNOTE The overloading of non-standard functions or function block types is beyond the scope of\nthis standard.\na If feature 2 is supported, the manufacturer shall provide a table of which functions are\noverloaded and which are typed in the implementation.\nWhen the type of the result of a standard function defined in 2.5.1.5 is generic, then the actual types of\nall input variables of the same generic type shall be of the same type as the actual type of the function\nvalue in a given \ninvocation of the function.  If necessary, the type conversion functions defined in\n2.5.1.5.1 can be used to meet this requirement.  Examples of the application of this rule are given in\nfigures 7 and 8.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Res"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 155,
    "text": "o meet this requirement.  Examples of the application of this rule are given in\nfigures 7 and 8.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 54 – 61131-3  IEC:2003(E)\nType declaration\n(ST language - see 3.3)\nUsage\n(FBD language - see 4.3)\n(ST language - see 3.3)\n     VAR\n      A : INT ;\n      B : INT ;\n      C : INT ;\n     END_VAR\n                 +---+\n             A---| + |---C\n             B---|   |\n                 +---+\nC := A+B;\nNOTE Type conversion is not required in the example shown above.\n     VAR\n       A : INT ;\n       B : REAL ;\n       C : REAL;\n     END_VAR\n     +-----------+   +---+\n A---|INT_TO_REAL|---| + |---C\n     +-----------+   |   |\n B-------------------|   |\n                     +---+\nC := INT_TO_REAL(A)+B;\n     VAR\n       A : INT ;\n       B : INT ;\n       C : REAL;\n     END_VAR\n     +---+   +-----------+\nA----| + |---|INT_TO_REAL|---C\nB----|   |   +-----------+\n     +---+\nC := INT_TO_REAL(A+B);\nFigure 7 - Examples of explicit type conversion with overloaded functions\nType declaration\n(ST language - see"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 156,
    "text": "----| + |---|INT_TO_REAL|---C\nB----|   |   +-----------+\n     +---+\nC := INT_TO_REAL(A+B);\nFigure 7 - Examples of explicit type conversion with overloaded functions\nType declaration\n(ST language - see 3.3)\nUsage\n(FBD language - see 4.3)\n(ST language - see 3.3)\n     VAR\n       A : INT ;\n       B : INT ;\n       C : INT ;\n     END_VAR\n           +---------+\n       A---| ADD_INT |---C\n       B---|         |\n           +---------+\nC := ADD_INT(A,B);\nNOTE Type conversion is not required in the example shown above.\n     VAR\n       A : INT ;\n       B : REAL ;\n       C : REAL;\n     END_VAR\n     +-----------+   +----------+\n A---|INT_TO_REAL|---| ADD_REAL |---C\n     +-----------+   |          |\n B-------------------|          |\n                     +----------+\nC := ADD_REAL(INT_TO_REAL(A),B);\n     VAR\n       A : INT ;\n       B : INT ;\n       C : REAL;\n     END_VAR\n     +---------+   +-----------+\n A---| ADD_INT |---|INT_TO_REAL|---C\n     |         |   +-----------+\n B---|         |\n     +---------+\nC := INT_TO_REAL(ADD_INT(A,B));\nFigure 8 - Examples of explicit type conversion with typed functions\nIEC   2477/02\nIEC   2478/02\nCopyright International Electrotechnical Commission \nProvided by I"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 157,
    "text": "---+\nC := INT_TO_REAL(ADD_INT(A,B));\nFigure 8 - Examples of explicit type conversion with typed functions\nIEC   2477/02\nIEC   2478/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 55 –\n2.5.1.5  Standard functions\nDefinitions of functions common to all programmable controller programming languages are given in\nthis subclause.  Where graphical representations of standard functions are shown in this subclause,\nequivalent textual declarations may be written as specified in 2.5.1.3.\nA standard function specified in this subclause to be \nextensible is allowed to have two or more inputs\nto which the indicated operation is to be applied, for example, extensible addition shall give as its\noutput the sum of all its inputs. The maximum number of inputs of an extensible function is an\nimplementation-dependent parameter . The actual number of inputs effective in a formal call of an\nextensible function is determined by the formal input name with the highest position in the sequence of\nparameter names.\nEXAMPLE 1 The state"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 158,
    "text": "he actual number of inputs effective in a formal call of an\nextensible function is determined by the formal input name with the highest position in the sequence of\nparameter names.\nEXAMPLE 1 The statement   \nX := ADD(Y1,Y2,Y3);\nis equivalent to\n X := ADD(IN1 := Y1, IN2 := Y2, IN3 := Y3);\nEXAMPLE 2 The following statements are equivalent:   \nI := MUX_INT(K:=3,IN0 := 1, IN2 := 2, IN4 := 3);\nI := 0;\n2.5.1.5.1  Type conversion functions\nAs shown in table 22, type conversion functions shall have the form *_TO_**, where “*” is the type of\nthe input variable IN, and “**” the type of the output variable OUT, for example, INT_TO_REAL.  The\neffects of type conversions on accuracy, and the types of errors that may arise during execution of\ntype conversion operations, are implementation-dependent parameters.\nTable 22 - Type conversion function features\nNo. Graphical form Usage example\n1a,b,e\n             +---------+\n        * ---| *_TO_** |--- **\n             +---------+\n (*) - Input data type, e.g., INT\n  (**) - Output data type, e.g., REAL\n  (*_TO_**) - Function name, e.g., INT_TO_REAL\nA := INT_TO_REAL(B) ;\n2c\n             +-------+\n  ANY_REAL---| TRUNC |---ANY_INT\n             +-------+\n  A"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 159,
    "text": "g., INT\n  (**) - Output data type, e.g., REAL\n  (*_TO_**) - Function name, e.g., INT_TO_REAL\nA := INT_TO_REAL(B) ;\n2c\n             +-------+\n  ANY_REAL---| TRUNC |---ANY_INT\n             +-------+\n  A := TRUNC(B) ;\n3d\n           +-------------+\n        *--| *_BCD_TO_** |---**\n           +-------------+\nA := WORD_BCD_TO_INT(B);\n4d\n           +-------------+\n       **--| **_TO_BCD_* |---*\n           +-------------+\nA := INT_TO_BCD_WORD(B);\nNOTE Usage examples are given in the ST language defined in 3.3.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 56 – 61131-3  IEC:2003(E)\nTable 22 - Type conversion function features\na A statement of conformance to feature 1 of this table shall include a list of the specific type\nconversions supported, and a statement of the effects of performing each conversion.\nb Conversion from type REAL or LREAL to SINT, INT, DINT or LINT shall round according to\nthe convention of IEC 60559, according to which, if the two nearest integers are equally\nnear, the result shall be the nearest even integer, e.g.:"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 160,
    "text": "to SINT, INT, DINT or LINT shall round according to\nthe convention of IEC 60559, according to which, if the two nearest integers are equally\nnear, the result shall be the nearest even integer, e.g.:\nREAL_TO_INT(1.6) is equivalent to 2\nREAL_TO_INT(-1.6) is equivalent to -2\nREAL_TO_INT(1.5) is equivalent to 2\nREAL_TO_INT(-1.5) is equivalent to -2\nREAL_TO_INT(1.4) is equivalent to 1\nREAL_TO_INT(-1.4) is equivalent to -1\nREAL_TO_INT(2.5) is equivalent to 2\nREAL_TO_INT(-2.5) is equivalent to –2\nc The function TRUNC shall be used for truncation toward zero of a REAL or LREAL, yielding\none of the integer types, for instance,\nTRUNC(1.6) is equivalent to 1\nTRUNC(-1.6) is equivalent to -1\nTRUNC(1.4) is equivalent to 1\nTRUNC(-1.4) is equivalent to -1\nd The conversion functions *_BCD_TO_** and **_TO_BCD_* shall perform conversions\nbetween variables of type BYTE, WORD, DWORD, and LWORD and variables of type\nUSINT, UINT, UDINT and ULINT (represented by \"*\" and \"**\" respectively), when the\ncorresponding bit-string variables contain data encoded in BCD format.  For example, the\nvalue of USINT_TO_BCD_BYTE(25) would be 2#0010_0101, and the value of\nWORD_BCD_TO_UINT (2#0011_0110_1001) would be 369."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 161,
    "text": "ding bit-string variables contain data encoded in BCD format.  For example, the\nvalue of USINT_TO_BCD_BYTE(25) would be 2#0010_0101, and the value of\nWORD_BCD_TO_UINT (2#0011_0110_1001) would be 369.\ne When an input or output of a type conversion function is of type STRING or\nWSTRING, the character string data shall conform to the external representation\nof the corresponding data, as specified in 2.2, in the character set defined in\n2.1.1.\n2.5.1.5.2  Numerical functions\nThe standard graphical representation, function names, input and output variable types, and function\ndescriptions of functions of a single numeric variable shall be as defined in table 23.  These functions\nshall be overloaded on the defined generic types, and can be typed as defined in 2.5.1.4.  For these\nfunctions, the types of the input and output shall be the same.\nThe standard graphical representation, function names and symbols, and descriptions of arithmetic\nfunctions of two or more variables shall be as shown in table 24.  These functions shall be overloaded\non all numeric types, and can be typed as defined in 2.5.1.4.\nThe accuracy of numerical functions shall be expressed in terms of one or more \nimplementat"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 162,
    "text": "table 24.  These functions shall be overloaded\non all numeric types, and can be typed as defined in 2.5.1.4.\nThe accuracy of numerical functions shall be expressed in terms of one or more \nimplementation-\ndependent parameters.\nIt is an error if the result of evaluation of one of these functions exceeds the range of values specified\nfor the data type of the function output, or if division by zero is attempted.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 57 –\nTable 23 - Standard functions of one numeric variable\nGraphical form Usage example\n     +---------+\n* ---|   **    |--- *\n     +---------+\n(*) - Input/Output (I/O) type\n(**) - Function name\nA := SIN(B) ;\n(ST language - see 3.3)\nNo. Function name I/O type Description\nGeneral functions\n1 ABS ANY_NUM Absolute value\n2 SQRT ANY_REAL Square root\nLogarithmic functions\n3 LN ANY_REAL Natural logarithm\n4 LOG ANY_REAL Logarithm base 10\n5 EXP ANY_REAL Natural exponential\nTrigonometric functions\n6 SIN ANY_REAL Sine of input in radians\n7 COS ANY_REAL Cosine in radia"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 163,
    "text": "tions\n3 LN ANY_REAL Natural logarithm\n4 LOG ANY_REAL Logarithm base 10\n5 EXP ANY_REAL Natural exponential\nTrigonometric functions\n6 SIN ANY_REAL Sine of input in radians\n7 COS ANY_REAL Cosine in radians\n8 TAN ANY_REAL Tangent in radians\n9 ASIN ANY_REAL Principal arc sine\n10 ACOS ANY_REAL Principal arc cosine\n11 ATAN ANY_REAL Principal arc tangent\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 58 – 61131-3  IEC:2003(E)\nTable 24 - Standard arithmetic functions\nGraphical form Usage example\n              +-----+\n   ANY_NUM ---| *** |--- ANY_NUM\n   ANY_NUM ---|     |\n      .    ---|     |\n      .    ---|     |\n   ANY_NUM ---|     |\n              +-----+\n(***) - Name or Symbol\nA := ADD(B,C,D) ;\nor\nA := B+C+D ;\nNo. d,e Name Symbol Description\nExtensible arithmetic functions\n12 g\nADD + OUT := IN1 + IN2 + ... + INn\n13 MUL * OUT := IN1 * IN2 * ... * INn\nNon-extensible arithmetic functions\n14 g\nSUB - OUT := IN1 - IN2\n15 c\nDIV / OUT := IN1 / IN2\n16 a\nMOD OUT := IN1 modulo IN2\n17 b\nEXPT ** Exponentiation:  OUT := IN1 IN2\n18 f\nMOVE := OUT :="
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 164,
    "text": "* ... * INn\nNon-extensible arithmetic functions\n14 g\nSUB - OUT := IN1 - IN2\n15 c\nDIV / OUT := IN1 / IN2\n16 a\nMOD OUT := IN1 modulo IN2\n17 b\nEXPT ** Exponentiation:  OUT := IN1 IN2\n18 f\nMOVE := OUT := IN\nNOTE 1 Non-blank entries in the Symbol column are suitable for use as operators in textual\nlanguages, as shown in tables 52 and 55.\nNOTE 2 The notations IN1, IN2, ..., INn refer to the inputs in top-to-bottom order; OUT\nrefers to the output.\nNOTE 3 Usage examples and descriptions are given in the ST language defined in 3.3.\na IN1 and IN2 shall be of generic type ANY_INT for this function.  The result of evaluating this\nfunction shall be the equivalent of executing the following statements in the ST language as\ndefined in 3.3:\nIF (IN2 = 0) THEN OUT:=0 ; ELSE OUT:=IN1 - (IN1/IN2)*IN2 ; END_IF\nb IN1 shall be of type ANY_REAL, and IN2 of type ANY_NUM for this function.  The output shall be\nof the same type as IN1.\nc The result of division of integers shall be an integer of the same type with truncation toward zero,\nfor instance, 7/3 = 2 and (-7)/3 = -2.\nd When the named representation of a function is supported, this shall be indicated by the suffix “n”\nin the compliance statement.  For"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 165,
    "text": "h truncation toward zero,\nfor instance, 7/3 = 2 and (-7)/3 = -2.\nd When the named representation of a function is supported, this shall be indicated by the suffix “n”\nin the compliance statement.  For example, “12n” represents the notation “\nADD”.\ne When the symbolic representation of a function is supported, this shall be indicated by the suffix\n“s” in the compliance statement.  For example, “12s” represents the notation “+”.\nf The MOVE function has exactly one input (IN) of type ANY and one output (OUT) of type ANY.\ng The generic type of the inputs and outputs of these functions is ANY_MAGNITUDE.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 59 –\n2.5.1.5.3  Bit string functions\nThe standard graphical representation, function names and descriptions of shift functions for a single\nbit-string variable shall be as defined in table 25.  These functions shall be overloaded on all bit-string\ntypes, and can be typed as defined in 2.5.1.4.\nThe standard graphical representation, function names and symbols, and desc"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 166,
    "text": "s defined in table 25.  These functions shall be overloaded on all bit-string\ntypes, and can be typed as defined in 2.5.1.4.\nThe standard graphical representation, function names and symbols, and descriptions of bitwise\nBoolean functions shall be as defined in table 26. These functions shall be extensible, except for \nNOT,\nand overloaded on all bit-string types, and can be typed as defined in 2.5.1.4.\nTable 25 - Standard bit shift functions\nGraphical form Usage example  a\n               +-----+\n               | *** |\n    ANY_BIT ---|IN   |--- ANY_BIT\n    ANY_INT ---|N    |\n               +-----+\n(***) - Function Name\n A := SHL(IN:=B, N:=5) ;\n(ST language - see 3.3)\nNo. Name Description\n1 SHL OUT := IN left-shifted by N bits, zero-filled on right\n2 SHR OUT := IN right-shifted by N bits, zero-filled on left\n3 ROR OUT := IN right-rotated by N bits, circular\n4 ROL OUT := IN left-rotated by N bits, circular\nNOTE The notation OUT refers to the function output.\na It shall be an error if the value of the N input is less than zero.\n2.5.1.5.4  Selection and comparison functions\nSelection and comparison functions shall be overloaded on all data types.  The standard graphical\nrepresentations,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 167,
    "text": "alue of the N input is less than zero.\n2.5.1.5.4  Selection and comparison functions\nSelection and comparison functions shall be overloaded on all data types.  The standard graphical\nrepresentations, function names and descriptions of selection functions shall be as shown in table 27.\nThe standard graphical representation, function names and symbols, and descriptions of comparison\nfunctions shall be as defined in table 28.  All comparison functions (except NE) shall be extensible.\nComparisons of bit string data shall be made bitwise from the most significant to the least significant\nbit, and shorter bit strings shall be considered to be filled on the left with zeros when compared to\nlonger bit strings; that is, comparison of bit string variables shall have the same result as comparison\nof unsigned integer variables.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 60 – 61131-3  IEC:2003(E)\nTable 26 - Standard bitwise Boolean functions\nGraphical form Usage examples\n                +-----+\n     ANY_BIT ---| *** |--- ANY_BIT\n     ANY"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 168,
    "text": "--``````-`-`,,`,,`,`,,`---\n\n– 60 – 61131-3  IEC:2003(E)\nTable 26 - Standard bitwise Boolean functions\nGraphical form Usage examples\n                +-----+\n     ANY_BIT ---| *** |--- ANY_BIT\n     ANY_BIT ---|     |\n        :    ---|     |\n        :    ---|     |\n     ANY_BIT ---|     |\n                +-----+\n(***) - Name or symbol\nA := AND(B,C,D) ;\nor\nA := B & C & D ;\nNo. a,b Name Symbol Description\n5 AND & (NOTE 1) OUT := IN1 & IN2 & ... & INn\n6 OR >=1 (NOTE 2) OUT := IN1 OR IN2 OR ... OR INn\n7 XOR =2k+1 (NOTE 2) OUT := IN1 XOR IN2 XOR ... XOR INn\n8 NOT OUT := NOT IN1 (NOTE 4)\nNOTE 1 This symbol is suitable for use as an operator in textual languages, as shown in tables\n52 and 55.\nNOTE 2 This symbol is not suitable for use as an operator in textual languages.\nNOTE 3 The notations IN1, IN2, ..., INn refer to the inputs in top-to-bottom order; OUT refers to\nthe output.\nNOTE 4  Graphic negation of signals of type BOOL can also be accomplished as shown in table\n19.\nNOTE 5  Usage examples and descriptions are given in the ST language defined in 3.3.\na  When the named representation of a function is supported, this shall be indicated by the suffix\n“n” in the compliance statement.  For"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 169,
    "text": "s and descriptions are given in the ST language defined in 3.3.\na  When the named representation of a function is supported, this shall be indicated by the suffix\n“n” in the compliance statement.  For example, “5n” represents the notation “AND”.\nb  When the symbolic representation of a function is supported, this shall be indicated by the suffix\n“s” in the compliance statement.  For example, “5s” represents the notation “&”.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 61 –\nTable 27 - Standard selection functionsd\nNo. Graphical form Explanation/example\n1\n      +-----+\n      | SEL |\nBOOL--|G    |--ANY\nANY---|IN0  |\nANY---|IN1  |\n      +-----+\nBinary selection\nc:\nOUT := IN0 if G = 0\nOUT := IN1 if G = 1\nEXAMPLE:\nA := SEL(G:=0,IN0:=X,IN1:=5) ;\n2a\n                +-----+\n                | MAX |\nANY_ELEMENTARY--|     |--ANY_ELEMENTARY\n           : ---|     |\nANY_ELEMENTARY--|     |\n                +-----+\nExtensible maximum function:\nOUT := MAX (IN1,IN2, ...,INn)\nEXAMPLE:\nA := MAX(B,C,D) ;\n2b\n                +--"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 170,
    "text": "|--ANY_ELEMENTARY\n           : ---|     |\nANY_ELEMENTARY--|     |\n                +-----+\nExtensible maximum function:\nOUT := MAX (IN1,IN2, ...,INn)\nEXAMPLE:\nA := MAX(B,C,D) ;\n2b\n                +-----+\n                | MIN |\nANY_ELEMENTARY--|     |--ANY_ELEMENTARY\n       :     ---|     |\nANY_ELEMENTARY--|     |\n                +-----+\nExtensible minimum function:\nOUT := MIN (IN1,IN2, ...,INn)\nEXAMPLE:\nA := MIN(B,C,D) ;\n3\n                +-------+\n                | LIMIT |\nANY_ELEMENTARY--|MN     |--ANY_ELEMENTARY\nANY_ELEMENTARY--|IN     |\nANY_ELEMENTARY--|MX     |\n                +-------+\nLimiter:\nOUT := MIN(MAX(IN,MN),MX)\nEXAMPLE:\nA := LIMIT(IN:=B,MN:=0,MX:=5);\n4e\n         +-----+\n         | MUX |\nANY_INT--|K    |----ANY\nANY------|     |\n : ------|     |\nANY------|     |\n         +-----+\nExtensible multiplexer a, b, c:\nSelect one of N inputs\ndepending on input K\nEXAMPLE:\nA := MUX(0, B, C, D);\nwould have the same effect as\n    A := B ;\nNOTE 1 The notations IN1, IN2, ..., INn refer to the inputs in top-to-bottom order; OUT refers\nto the output.\nNOTE 2 Usage examples and descriptions are given in the ST language defined in 3.3.\na The unnamed inputs in the MUX function shall have"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 171,
    "text": "to the inputs in top-to-bottom order; OUT refers\nto the output.\nNOTE 2 Usage examples and descriptions are given in the ST language defined in 3.3.\na The unnamed inputs in the MUX function shall have the default names IN0, IN1,...,INn-1 in\ntop-to-bottom order, where n is the total number of these inputs.  These names may, but need not,\nbe shown in the graphical representation.\nb The MUX function can be typed as defined in 2.5.1.4 in the form MUX_*_**, where * is the type\nof the K input and ** is the type of the other inputs and the output.\nc It is allowed, but not required, that the manufacturer support selection among variables of derived\ndata types, as defined in 2.3.3, in order to claim compliance with this feature.\nd It is an error if the inputs and the outputs to one of these functions are not all of the same actual\ndata type, with the exception of the G input of the SEL function and the K input of the MUX function.\ne It is an error if the actual value of the K input of the MUX function is not within the range {0..n-1}.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without lic"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 172,
    "text": "unction is not within the range {0..n-1}.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 62 – 61131-3  IEC:2003(E)\nTable 28 - Standard comparison functions\nGraphical form Usage examples\n                 +-----+\nANY_ELEMENTARY --| *** |--- BOOL\n        :      --|     |\nANY_ELEMENTARY --|     |\n                 +-----+\n(***) - Name or Symbol\nA := GT(B,C,D) ;\nor\nA := (B>C) & (C>D) ;\nNo. Name   a Symbol b Description\n5 GT > Decreasing sequence:\nOUT :=  (IN1>IN2) & (IN2>IN3) & ... & (INn-1 > INn)\n6 GE >= Monotonic sequence:\nOUT := (IN1>=IN2)&(IN2>=IN3)& ... & (INn-1 >= INn)\n7 EQ = Equality:\nOUT := (IN1=IN2) & (IN2=IN3) & ... & (INn-1 = INn)\n8 LE <= Monotonic sequence:\nOUT := (IN1<=IN2)&(IN2<=IN3)& ... & (INn-1 <= INn)\n9 LT < Increasing sequence:\nOUT := (IN1<IN2) & (IN2<IN3) & ... & (INn-1 < INn)\n10 NE <> Inequality (non-extensible)\n OUT := (IN1 <> IN2)\nNOTE 1 The notations IN1, IN2, ..., INn refer to the inputs in top-to-bottom order; OUT\nrefers to the output.\nNOTE 2 All the symbols shown in this table are suitable for use as operato"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 173,
    "text": ":= (IN1 <> IN2)\nNOTE 1 The notations IN1, IN2, ..., INn refer to the inputs in top-to-bottom order; OUT\nrefers to the output.\nNOTE 2 All the symbols shown in this table are suitable for use as operators in textual\nlanguages, as shown in tables 52 and 55.\nNOTE 3 Usage examples and descriptions are given in the ST language defined in 3.3.\na When the named representation of a function is supported, this shall be indicated by the suffix “n”\nin the compliance statement.  For example, “5n” represents the notation “GT”.\nb When the symbolic representation of a function is supported, this shall be indicated by the suffix\n“s” in the compliance statement.  For example, “5s” represents the notation “\n>“.\n2.5.1.5.5  Character string functions\nAll the functions defined in 2.5.1.5.4 shall be applicable to character strings.  For the purposes of\ncomparison of two strings of unequal length, the shorter string shall be considered to be extended on\nthe right to the length of the longer string by characters with the value zero.  Comparison shall proceed\nfrom left to right, based on the numeric value of the character codes in the character set defined in\n2.1.1. For example, the character string \n'Z' sh"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 174,
    "text": "rs with the value zero.  Comparison shall proceed\nfrom left to right, based on the numeric value of the character codes in the character set defined in\n2.1.1. For example, the character string \n'Z' shall be greater than the character string 'AZ', and 'AZ'\nshall be greater than 'ABC'.\nThe standard graphical representations, function names and descriptions of additional functions of\ncharacter strings shall be as shown in table 29.  For the purpose of these operations, character\npositions within the string shall be considered to be numbered 1,2,...,L, beginning with the\nleftmost character position, where L is the length of the string.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 63 –\nIt shall be an error if:\n- the actual value of any input designated as ANY_INT in table 29 is less than zero;\n- evaluation of the function results in an attempt to (1) access a non-existent character position in\na string, or (2) produce a string longer than the implementation-dependent maximum string\nlength.\nTable 29 - Standard c"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 175,
    "text": "unction results in an attempt to (1) access a non-existent character position in\na string, or (2) produce a string longer than the implementation-dependent maximum string\nlength.\nTable 29 - Standard character string functions\nNo. Graphical form  a Explanation/example\n1               +-----+\n  ANY_STRING--| LEN |--ANY_INT\n              +-----+\nString length function\nExample:\nA := LEN('ASTRING');\nis equivalent to A := 7;\n2              +------+\n             | LEFT |\n ANY_STRING--|IN    |--ANY_STRING\n ANY_INT-----|L     |\n             +------+\nLeftmost L characters of IN\nExample:\nA := LEFT(IN:='ASTR',L:=3);\nis equivalent to\nA := 'AST' ;\n3              +-------+\n             | RIGHT |\n ANY_STRING--|IN     |--ANY_STRING\n ANY_INT-----|L      |\n             +-------+\nRightmost L characters of IN\nExample:\nA := RIGHT(IN:='ASTR',L:=3);\nis equivalent to\nA := 'STR' ;\n4              +-------+\n             |  MID  |\n ANY_STRING--|IN     |--ANY_STRING\n ANY_INT-----|L      |\n ANY_INT-----|P      |\n             +-------+\nL characters of IN,\nbeginning at the P-th\nExample:\nA := MID(IN:='ASTR',L:=2,P:=2);\nis equivalent to\nA := 'ST' ;\n5               +--------+\n              | CONCAT |\n ANY_STRING---|"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 176,
    "text": "+-------+\nL characters of IN,\nbeginning at the P-th\nExample:\nA := MID(IN:='ASTR',L:=2,P:=2);\nis equivalent to\nA := 'ST' ;\n5               +--------+\n              | CONCAT |\n ANY_STRING---|        |--ANY_STRING\n        :  ---|        |\n ANY_STRING---|        |\n              +--------+\nExtensible concatenation\nExample:\nA := CONCAT('AB','CD','E') ;\nis equivalent to\nA := 'ABCDE' ;\n6              +--------+\n             | INSERT |\n ANY_STRING--|IN1     |--ANY_STRING\n ANY_STRING--|IN2     |\n ANY_INT-----|P       |\n             +--------+\nInsert IN2 into IN1 after the\nP-th character position\nExample:\nA:=INSERT(IN1:='ABC',IN2:='XY',P=2\n);\nis equivalent to\nA := 'ABXYC' ;\n7             +--------+\n            | DELETE |\nANY_STRING--|IN      |--ANY_STRING\nANY_INT-----|L       |\nANY_INT-----|P       |\n            +--------+\nDelete L characters of IN, beginning\nat the P-th character position\nExample:\nA := DELETE(IN:='ABXYC',L:=2,\nP:=3) ;\nis equivalent to\nA := 'ABC' ;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 64 – 61131-3  IEC:"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 177,
    "text": "al Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 64 – 61131-3  IEC:2003(E)\nTable 29 - Standard character string functions\nNo. Graphical form  a Explanation/example\n8             +---------+\n            | REPLACE |\nANY_STRING--|IN1      |--ANY_STRING\nANY_STRING--|IN2      |\nANY_INT-----|L        |\nANY_INT-----|P        |\n            +---------+\nReplace L characters of IN1 by IN2,\nstarting at the P-th character position\nExample:\nA :=\nREPLACE(IN1:='ABCDE',IN2:='X',\nL:=2, P:=3) ;\nis equivalent to\nA := 'ABXE' ;\n9             +--------+\n            |  FIND  |\nANY_STRING--|IN1     |--ANY_INT\nANY_STRING--|IN2     |\n            +--------+\nFind the character position of the beginning of\nthe first occurrence of IN2 in IN1.  If no\noccurrence of IN2 is found, then OUT := 0.\nExample:\nA := FIND(IN1:='ABCBC',IN2:='BC')\n;\nis equivalent to A := 2 ;\nNOTE The examples in this table are given in the Structured Text (ST) language defined in 3.3.\n2.5.1.5.6  Functions of time data types\nIn addition to the comparison and selection functions defined in 2.5.1.5.4, the combinati"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 178,
    "text": "s table are given in the Structured Text (ST) language defined in 3.3.\n2.5.1.5.6  Functions of time data types\nIn addition to the comparison and selection functions defined in 2.5.1.5.4, the combinations of input\nand output time data types shown in table 30 shall be allowed with the associated functions.\nIt shall be an error if the result of evaluating one of these functions exceeds the implementation-\ndependent range of values for the output data type.\nTable 30 - Functions of time data types\nNumeric and concatenation functions\nNo. Name Symbol IN1 IN2 OUT\n1ac,d ADD + TIME TIME TIME\n1bc,d ADD_TIME + TIME TIME TIME\n2a ADD b + b\nTIME_OF_DAY TIME TIME_OF_DAY\n2b ADD_TOD_TIME + b\nTIME_OF_DAY TIME TIME_OF_DAY\n3a ADD b + b\nDATE_AND_TIME TIME DATE_AND_TIME\n3b ADD_DT_TIME + b\nDATE_AND_TIME TIME DATE_AND_TIME\n4ac,d SUB - TIME TIME TIME\n4bc,d SUB_TIME - TIME TIME TIME\n5a SUB b - b\nDATE DATE TIME\n5b SUB_DATE_DATE - b\nDATE DATE TIME\n6a SUB b - b\nTIME_OF_DAY TIME TIME_OF_DAY\n6b SUB_TOD_TIME - b\nTIME_OF_DAY TIME TIME_OF_DAY\n7a SUB b - b\nTIME_OF_DAY TIME_OF_DAY TIME\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networki"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 179,
    "text": "OF_DAY TIME TIME_OF_DAY\n7a SUB b - b\nTIME_OF_DAY TIME_OF_DAY TIME\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 65 –\nTable 30 - Functions of time data types\nNumeric and concatenation functions\nNo. Name Symbol IN1 IN2 OUT\n7b SUB_TOD_TOD - b\nTIME_OF_DAY TIME_OF_DAY TIME\n8a SUB b - b\nDATE_AND_TIME TIME DATE_AND_TIME\n8b SUB_DT_TIME - b\nDATE_AND_TIME TIME DATE_AND_TIME\n9a SUB b - b\nDATE_AND_TIME DATE_AND_TIME TIME\n9b SUB_DT_DT - b\nDATE_AND_TIME DATE_AND_TIME TIME\n10a MUL b * b\nTIME ANY_NUM TIME\n10b MULTIME * b\nTIME ANY_NUM TIME\n11a DIV b / b\nTIME ANY_NUM TIME\n11b DIVTIME / b\nTIME ANY_NUM TIME\n12 CONCAT_DATE_TOD DATE TIME_OF_DAY DATE_AND_TIME\nType conversion functions\n13a\n14a DT_TO_TOD\nDT_TO_DATE\nNOTE 1 Non-blank entries in the Symbol column are suitable for use as operators in textual\nlanguages, as shown in tables 52 and 55.\nNOTE 2 The notations IN1, IN2, ..., INn refer to the inputs in top-to-bottom order; OUT refers to\nthe output.\nNOTE 3 It is possible to type the functions MULTIME and DIVTIME, e.g., the opera"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 180,
    "text": "2 and 55.\nNOTE 2 The notations IN1, IN2, ..., INn refer to the inputs in top-to-bottom order; OUT refers to\nthe output.\nNOTE 3 It is possible to type the functions MULTIME and DIVTIME, e.g., the operands of\nMULTIME_REAL would be of type TIME and REAL, respectively.\nNOTE 4 The effects of conversion between time data types and types STRING and WSTRING\nare defined in footnote (e) of table 22.\nNOTE 5 The effects of type conversions between time data types and other data types not\ndefined in this table are implementation-dependent.\na The type conversion functions shall have the effect of “extracting” the appropriate data, e.g., the\nST language statements\nX := DT#1986-04-28-08:40:00 ;\nY := DT_TO_TOD(X) ;\nW := DT_TO_DATE(X);\nshall have the same result as the statements\nX := DT#1986-04-28-08:40:00 ;\nW := DATE#1986-04-28 ;\nY := TIME_OF_DAY#08:40:00;.\nb This usage is deprecated and will not be included in future editions of this standard.\nc When the named representation of a function is supported, this shall be indicated by the suffix “n”\nin the compliance statement.  For example, “1n” represents the notation “ADD”.\nd When the symbolic representation of a function is supported, this shall be"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 181,
    "text": "d, this shall be indicated by the suffix “n”\nin the compliance statement.  For example, “1n” represents the notation “ADD”.\nd When the symbolic representation of a function is supported, this shall be indicated by the suffix\n“s” in the compliance statement.  For example, “1s” represents the notation “+”.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 66 – 61131-3  IEC:2003(E)\n2.5.1.5.7  Functions of enumerated data types\nThe selection and comparison functions listed in table 31 can be applied to inputs which are of an\nenumerated data type as defined in 2.3.3.1.\nTable 31 - Functions of enumerated data types\nNo. Name Symbol Feature No. in tables 27 and 28\n1 SEL 1\n2 MUX 4\n3a\nEQ = 7\n4a\nNE <> 10\nNOTE   The provisions of NOTES 1-2 of table 28 apply to this table.\na The provisions of footnotes a and b of table 28 apply to this feature.\n2.5.2  Function blocks\nFor the purposes of programmable controller programming languages, a function block is a program\norganization unit which, when executed, yields one or more values.  Multiple, named"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 182,
    "text": ".2  Function blocks\nFor the purposes of programmable controller programming languages, a function block is a program\norganization unit which, when executed, yields one or more values.  Multiple, named instances\n(copies) of a function block can be created.  Each instance shall have an associated identifier (the\ninstance name), and a data structure containing its output and internal variables, and, depending on\nthe implementation, values of or references to its input variables.  All the values of the output variables\nand the necessary internal variables of this data structure shall persist from one execution of the\nfunction block to the next; therefore, invocation of a function block with the same arguments (input\nvariables) need not always yield the same output values.\nOnly the input and output variables shall be accessible outside of an instance of a function block, i.e.,\nthe function block's internal variables shall be hidden from the user of the function block.\nExecution of the operations of a function block shall be invoked as defined in clause 3 for textual\nlanguages, according to the rules of network evaluation given in clause 4 for graphic languages, or\nunder the control of s"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 183,
    "text": "tions of a function block shall be invoked as defined in clause 3 for textual\nlanguages, according to the rules of network evaluation given in clause 4 for graphic languages, or\nunder the control of sequential function chart (SFC) elements as defined in 2.6.\nAny function block type which has already been declared can be used in the declaration of another\nfunction block type or program type as shown in figure 3.\nThe scope of an instance of a function block shall be local to the program organization unit in which it\nis instantiated, unless it is declared to be global in a \nVAR_GLOBAL block as defined in 2.7.1.\nAs illustrated in 2.5.2.2, the instance name of a function block instance can be used as the input to a\nfunction or function block if declared as an input variable in a VAR_INPUT declaration, or as an\ninput/output variable of a function block in a VAR_IN_OUT declaration, as defined in 2.4.3.\nThe maximum number of function block types and instantiations for a given resource are\nimplementation-dependent parameters.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 184,
    "text": "ementation-dependent parameters.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 67 –\n2.5.2.1  Representation\nAs illustrated in figure 9, an instance of a function block can be created textually, by declaring a data\nelement using the declared function block type in a VAR...END_VAR construct, identically to the use\nof a structured data type, as defined in 2.4.3.\nAs further illustrated in figure 9, an instance of a function block can be created graphically, by using a\ngraphic representation of the function block, with the function block type name inside the block, and\nthe instance name above the block, following the rules for representation of functions given in 2.5.1.1.\nAs shown in figure 9, input and output variables of an instance of a function block can be represented\nas elements of structured data types as defined in 2.3.3.1.\nIf either of the two graphical negation features defined in table 19 is supported for function blocks, it\nshall also be supported for functions as defined in 2.5.1, and vice versa.\nGr"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 185,
    "text": "ined in 2.3.3.1.\nIf either of the two graphical negation features defined in table 19 is supported for function blocks, it\nshall also be supported for functions as defined in 2.5.1, and vice versa.\nGraphical (FBD language) Textual (ST language)\n           FF75\n         +------+\n         |  SR  |\n  %IX1---|S1  Q1|---%QX3\n  %IX2---|R     |\n         +------+\nVAR FF75: SR; END_VAR    (* Declaration *)\nFF75(S1:=%IX1, R:=%IX2); (* Invocation *)\n%QX3 := FF75.Q1 ;        (* Assign Output *)\n               MyTon\n             +-------+\n   +----+    |  TON  |\na--| NE |---O|EN  ENO|--\nb--|    | r--|IN    Q|O-out\n   +----+  --|PT   ET|--\n             +-------+\nVAR a,b,r,out : BOOL; MyTon : TON; END_VAR\nMyTon(EN := NOT (a <> b),\n      IN := r,\n      NOT Q => out);\nFigure 9 - Function block instantiation examples\nAssignment of a value to an output variable of a function block is not allowed except from within the\nfunction block.  The assignment of a value to the input of a function block is permitted only as part of\nthe invocation of the function block. Unassigned or unconnected inputs of a function block shall keep\ntheir initialized values or the values from the latest previous invocation, if an"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 186,
    "text": "only as part of\nthe invocation of the function block. Unassigned or unconnected inputs of a function block shall keep\ntheir initialized values or the values from the latest previous invocation, if any. Allowable usages of\nfunction block inputs and outputs are summarized in table 32, using the function block FF75 of type\nSR shown in figure 9.  The examples are shown in the ST language.\nIEC   2479/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 68 – 61131-3  IEC:2003(E)\nTable 32 - Examples of function block I/O variable usage\nUsage Inside function block Outside function block\nInput read IF IN1 THEN ... Not allowed (Notes 1 and 2)\nInput assignment Not allowed (Note 1) FB_INST(IN1:=A,IN2:=B);\nOutput read OUT := OUT AND NOT IN2; C := FB_INST.OUT;\nOutput assignment OUT := 1; Not Allowed (Note 1)\nIn-out read IF INOUT THEN ... IF FB1.INOUT THEN...\nIn-out assignment INOUT := OUT OR IN1; (Note 3) FB_INST(INOUT:=D);\nNOTE 1 Those usages listed as “not allowed” in this table could lead to implementation-\ndependent, unpredictable side effe"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 187,
    "text": "UT THEN...\nIn-out assignment INOUT := OUT OR IN1; (Note 3) FB_INST(INOUT:=D);\nNOTE 1 Those usages listed as “not allowed” in this table could lead to implementation-\ndependent, unpredictable side effects.\nNOTE 2 Reading and writing of input, output and internal variables of a function block may\nbe performed by the “communication function”, “operator interface function”, or the\n“programming, testing, and monitoring functions” defined in IEC 61131-1.\nNOTE 3 As illustrated in 2.5.2.2, modification within the function block of a variable declared\nin a \nVAR_IN_OUT block is permitted.\n2.5.2.1a)  Use of EN and ENO in function blocks\nAs shown in table 20 for functions, for function blocks an additional Boolean EN (Enable) input or ENO\n(Enable Out) output, or both, can also be provided by the manufacturer or user according to the\ndeclarations\nVAR_INPUT   EN: BOOL := 1;  END_VAR\nVAR_OUTPUT  ENO: BOOL;  END_VAR\nWhen these variables are used, the execution of the operations defined by the function block shall be\ncontrolled according to the following rules:\n1) If the value of EN is FALSE (0) when the function block instance is invoked, the assignments\nof actual values to the function block inpu"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 188,
    "text": "block shall be\ncontrolled according to the following rules:\n1) If the value of EN is FALSE (0) when the function block instance is invoked, the assignments\nof actual values to the function block inputs may or may not be made in an implementation-\ndependent fashion, the operations defined by the function block body shall not be executed\nand the value of ENO shall be reset to FALSE (0) by the programmable controller system.\n2) Otherwise, the value of ENO shall be set to TRUE (1) by the programmable controller system,\nthe assignments of actual values to the function block inputs shall be made and the operations\ndefined by the function block body shall be executed.  These operations can include the\nassignment of a Boolean value to ENO.\n3) If the ENO output is evaluated to FALSE (0), the values of the function block outputs\n(VAR_OUTPUT) keep their states from the previous invocation.\nNOTE It is a consequence of these rules that the ENO output of a function block must be explicitly\nexamined by the invoking entity if necessary to account for possible error conditions.\nEXAMPLES   The figures below illustrate the use of EN and ENO in association with the standard\nTP, TON and TOF blocks (re"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 189,
    "text": "by the invoking entity if necessary to account for possible error conditions.\nEXAMPLES   The figures below illustrate the use of EN and ENO in association with the standard\nTP, TON and TOF blocks (represented by T**)  defined in subclause 2.5.2.3.4, and the\nCTU and CTD blocks (represented by CT*) defined in subclause 2.5.2.3.3.  In accordance\nwith the above rules, a FALSE value of the EN input may be used to “freeze” the operation\nof the associated function block; that is, the output values do not change irrespective of\nchanges in any of the other input values. When the EN input value becomes TRUE, normal\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 69 –\noperation of the function block may resume. The value of the ENO output is FALSE after\neach evaluation of the function block for which the EN input is FALSE. When EN is TRUE, a\nTRUE value of ENO reflects a normal evaluation of the block, and a FALSE value of ENO\nmay be used to indicate an implementation-dependent error condition.\n          +-------+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 190,
    "text": "When EN is TRUE, a\nTRUE value of ENO reflects a normal evaluation of the block, and a FALSE value of ENO\nmay be used to indicate an implementation-dependent error condition.\n          +-------+                      +-------+\n          |  T**  |                      |  CT*  |\n   BOOL---|EN  ENO|---BOOL        BOOL---|EN  ENO|---BOOL\n   BOOL---|IN    Q|---BOOL        BOOL--->CU    Q|---BOOL\n   TIME---|PT   ET|---TIME        BOOL---|R    CV|---INT\n          +-------+                INT---|PV     |\n                                         +-------+\n2.5.2.2  Declaration\nAs illustrated in figure 10, a function block shall be declared textually or graphically in the same\nmanner as defined for functions in 2.5.1.3, with the differences described below and summarized in\ntable 33:\n1) The delimiting keywords for declaration of function blocks shall be\nFUNCTION_BLOCK...END_FUNCTION_BLOCK.\n2) The RETAIN qualifier defined in 2.4.3 can be used for internal and output variables of a function\nblock, as shown in features 1, 2, and 3 in table 33.\n3) The values of variables which are passed to the function block via a VAR_EXTERNAL construct\ncan be modified from within the function block, as shown in"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 191,
    "text": "s shown in features 1, 2, and 3 in table 33.\n3) The values of variables which are passed to the function block via a VAR_EXTERNAL construct\ncan be modified from within the function block, as shown in feature 10 of table 33.\n4) The output values of a function block instance whose name is passed into the function block via\na VAR_INPUT, VAR_IN_OUT, or VAR_EXTERNAL construct can be accessed, but not modified,\nfrom within the function block, as shown in features 5, 6, and 7 of table 33.\n5) A function block whose instance name is passed into the function block via a VAR_IN_OUT or\nVAR_EXTERNAL construction can be invoked from inside the function block, as shown in\nfeatures 6 and 7 of table 33.\n6) In textual declarations, the R_EDGE and F_EDGE qualifiers can be used to indicate an edge-\ndetection function on Boolean inputs.  This shall cause the implicit declaration of a function\nblock of type R_TRIG or F_TRIG, respectively, as defined in 2.5.2.3.2, to perform the required\nedge detection.  For an example of this construction, see features 8a and 8b of table 33 and the\naccompanying NOTE.\n7) The construction illustrated in features 9a and 9b of table 33 shall be used in graphical\ndeclaration"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 192,
    "text": "an example of this construction, see features 8a and 8b of table 33 and the\naccompanying NOTE.\n7) The construction illustrated in features 9a and 9b of table 33 shall be used in graphical\ndeclarations for rising and falling edge detection.  When the character set defined in 2.1.1 is\nused, the “greater than” ( >) or “less than” ( <) character shall be in line with the edge of the\nfunction block.  When graphic or semigraphic representations are employed, the notation of IEC\n60617-12 for dynamic inputs shall be used.\n8) If the generic data types given in table 11 are used in the declaration of standard function block\ninputs and outputs, then the rules for inferring the actual types of the outputs of such function\nblock types shall be part of the function block type definition. In textual invocations of such\nfunction blocks assignments of the outputs to variables shall be made directly in the invocation\nstatement (using the operator ‘=>‘).\n9) The asterisk notation (feature No. 10 in table 15) can be used in the declaration of internal\nvariables of a function block.\n10) \n EN/ENO inputs and outputs shall be declared and used as described in 2.5.1.2a).\n11)  It shall be an error if no val"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 193,
    "text": "15) can be used in the declaration of internal\nvariables of a function block.\n10) \n EN/ENO inputs and outputs shall be declared and used as described in 2.5.1.2a).\n11)  It shall be an error if no value is specified for: (i) an in-out variable of a function block instance;\n(ii) a function block instance used as an input variable of another function block instance.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 70 – 61131-3  IEC:2003(E)\nAs illustrated in figure 12, only variables or function block instance names can be passed into a\nfunction block via the VAR_IN_OUT construct, i.e., function or function block outputs cannot be passed\nvia this construction.  This is to prevent the inadvertent modifications of such outputs.  However,\n“cascading” of VAR_IN_OUT constructions is permitted, as illustrated in figure 12 c).\n(* a) Textual declaration in ST language (see 3.3) *)\nFUNCTION_BLOCK DEBOUNCE\n(*** External Interface ***)\nVAR_INPUT\n  IN : BOOL ;                   (* Default = 0 *)\n  DB_TIME : TIME := t#10ms ;    (* Default = t#10m"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 194,
    "text": "laration in ST language (see 3.3) *)\nFUNCTION_BLOCK DEBOUNCE\n(*** External Interface ***)\nVAR_INPUT\n  IN : BOOL ;                   (* Default = 0 *)\n  DB_TIME : TIME := t#10ms ;    (* Default = t#10ms *)\nEND_VAR\nVAR_OUTPUT OUT : BOOL ;        (* Default = 0 *)\n    ET_OFF : TIME ;            (* Default = t#0s *)\nEND_VAR\nVAR DB_ON : TON ;              (** Internal Variables **)\n    DB_OFF : TON ;             (**  and FB Instances  **)\n    DB_FF : SR ;\nEND_VAR\n(** Function Block Body **)\nDB_ON(IN := IN, PT := DB_TIME) ;\nDB_OFF(IN := NOT IN, PT:=DB_TIME) ;\nDB_FF(S1 :=DB_ON.Q, R := DB_OFF.Q) ;\nOUT := DB_FF.Q ;\nET_OFF := DB_OFF.ET ;\nEND_FUNCTION_BLOCK\n(* b) Graphical declaration in FBD language (see 4.3) *)\nFUNCTION_BLOCK\n(** External Interface **)\n                 +---------------+\n                 |   DEBOUNCE    |\n          BOOL---|IN          OUT|---BOOL\n          TIME---|DB_TIME  ET_OFF|---TIME\n                 +---------------+\n(** Function Block Body **)\n               DB_ON       DB_FF\n              +-----+     +----+\n              | TON |     | SR |\n IN----+------|IN  Q|-----|S1 Q|---OUT\n       |  +---|PT ET|  +--|R   |\n       |  |   +-----+  |  +----+\n       |  |            |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 195,
    "text": "_FF\n              +-----+     +----+\n              | TON |     | SR |\n IN----+------|IN  Q|-----|S1 Q|---OUT\n       |  +---|PT ET|  +--|R   |\n       |  |   +-----+  |  +----+\n       |  |            |\n       |  |    DB_OFF  |\n       |  |   +-----+  |\n       |  |   | TON |  |\n       +--|--O|IN  Q|--+\n DB_TIME--+---|PT ET|--------------ET_OFF\n              +-----+\n END_FUNCTION_BLOCK\nFigure 10 - Examples of function block declarations\nIEC   2480/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 71 –\nTable 33 - Function block declaration and usage features\nNo. Description Example\n1a RETAIN qualifier on internal variables VAR RETAIN X : REAL ; END_VAR\n1b NON_RETAIN qualifier on internal\nvariables\nVAR NON_RETAIN X : REAL ; END_VAR\n2a RETAIN qualifier on output variables VAR_OUTPUT RETAIN X : REAL ; END_VAR\n2b RETAIN qualifier on input variables VAR_INPUT RETAIN X : REAL ; END_VAR\n2c RETAIN qualifier on output variables VAR_OUTPUT NON_RETAIN X : REAL ; END_VAR\n2d RETAIN qualifier on input variables VAR_INPUT NON_RE"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 196,
    "text": "ualifier on input variables VAR_INPUT RETAIN X : REAL ; END_VAR\n2c RETAIN qualifier on output variables VAR_OUTPUT NON_RETAIN X : REAL ; END_VAR\n2d RETAIN qualifier on input variables VAR_INPUT NON_RETAIN X : REAL ; END_VAR\n3a RETAIN qualifier on internal function blocks VAR RETAIN TMR1: TON ; END_VAR\n3b NON_RETAIN qualifier on internal function blocks VAR NON_RETAIN TMR1: TON ; END_VAR\n4a VAR_IN_OUT declaration (textual) VAR_IN_OUT A: INT ; END_VAR\n4b VAR_IN_OUT declaration and usage(graphical) See figure 12\n4c VAR_IN_OUT declaration with assignment to different variables (graphical) See figure 12d\n5a Function block instance name as input\n(textual)\nVAR_INPUT I_TMR: TON ; END_VAR\nEXPIRED := I_TMR.Q; (* Note 1 *)\n5b Function block instance name as input (graphical) See figure 11a\n6a Function block instance name as\nVAR_IN_OUT (textual)\nVAR_IN_OUT IO_TMR: TOF ; END_VAR\nIO_TMR(IN:=A_VAR, PT:=T#10S);\nEXPIRED := IO_TMR.Q; (* Note 1 *)\n6b Function block instance name as VAR_IN_OUT (graphical) See figure 11b\n7a Function block instance name as external\nvariable (textual)\nVAR_EXTERNAL EX_TMR : TOF ;END_VAR\nEX_TMR(IN:=A_VAR,  PT:=T#10S);\nEXPIRED := EX_TMR.Q;    (* Note 1 *)\n7b Function block"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 197,
    "text": "See figure 11b\n7a Function block instance name as external\nvariable (textual)\nVAR_EXTERNAL EX_TMR : TOF ;END_VAR\nEX_TMR(IN:=A_VAR,  PT:=T#10S);\nEXPIRED := EX_TMR.Q;    (* Note 1 *)\n7b Function block instance name as external variable (graphical) See figure 11c\n8a\n8b\nTextual declaration of:\nrising edge inputs\nfalling edge inputs\nFUNCTION_BLOCK AND_EDGE           (* Note 2 *)\nVAR_INPUT X : BOOL R_EDGE;\n          Y : BOOL F_EDGE;\nEND_VAR\nVAR_OUTPUT Z : BOOL ; END_VAR\nZ := X AND Y ;     (* ST language example *)\nEND_FUNCTION_BLOCK                 (*- see 3.3 *)\n9a\n9b\nGraphical declaration of:\nrising edge inputs\nfalling edge inputs\nFUNCTION_BLOCK                      (* Note 2 *)\n        +-----------+   (* External interface *)\n        | AND_EDGE  |\nBOOL---->X         Z|---BOOL\n        |           |\nBOOL----<Y          |\n        |           |\n        +-----------+\n         +---+          (* Function block body *)\n     X---| & |---Z     (* FBD language example *)\n     Y---|   |                    (* - see 4.3 *)\n         +---+\nEND_FUNCTION_BLOCK\n10a VAR_EXTERNAL declarations within function block type declarations\nCopyright International Electrotechnical Commission \nProvided by IHS unde"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 198,
    "text": "(* - see 4.3 *)\n         +---+\nEND_FUNCTION_BLOCK\n10a VAR_EXTERNAL declarations within function block type declarations\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 72 – 61131-3  IEC:2003(E)\nTable 33 - Function block declaration and usage features\nNo. Description Example\n10b VAR_EXTERNAL CONSTANT declarations within function block type declarations\n11 VAR_TEMP declarations (see 2.4.3) within function block type declarations\nNOTE 1 It is assumed in these examples that the variables EXPIRED and A_VAR have been\ndeclared of type BOOL.\nNOTE 2 The declaration of function block AND_EDGE in the above examples is equivalent to:\n     FUNCTION_BLOCK AND_EDGE\n          VAR INPUT X : BOOL; Y : BOOL; END_VAR\n          VAR X_TRIG : R_TRIG ; Y_TRIG : F_TRIG ; END_VAR\n          X_TRIG(CLK := X) ;\n          Y_TRIG(CLK := Y) ;\n          Z := X_TRIG.Q AND Y_TRIG.Q;\n     END_FUNCTION_BLOCK\nSee 2.5.2.3.2 for the definition of the edge detection function blocks R_TRIG and\nF_TRIG.\nCopyright International Electrotechnical Commission \nProvided b"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 199,
    "text": "X_TRIG.Q AND Y_TRIG.Q;\n     END_FUNCTION_BLOCK\nSee 2.5.2.3.2 for the definition of the edge detection function blocks R_TRIG and\nF_TRIG.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 73 –\nFUNCTION_BLOCK\n        +--------------+     (* External interface *)\n        |   INSIDE_A   |\n  TON---|I_TMR  EXPIRED|---BOOL\n        +--------------+\n             +------+    (* Function Block body *)\n             | MOVE |\n   I_TMR.Q---|      |---EXPIRED\n             +------+\nEND_FUNCTION_BLOCK\nFUNCTION_BLOCK\n         +--------------+      (* External interface *)\n         |  EXAMPLE_A   |\n  BOOL---|GO        DONE|---BOOL\n         +--------------+\n              E_TMR            (* Function Block body *)\n             +-----+                   I_BLK\n             | TON |             +--------------+\n        GO---|IN  Q|             |   INSIDE_A   |\n   t#100ms---|PT ET|     E_TMR---|I_TMR  EXPIRED|---DONE\n             +-----+             +--------------+\nEND_FUNCTION_BLOCK\nNOTE I_TMR is not represented graphically in this fig"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 200,
    "text": "|   INSIDE_A   |\n   t#100ms---|PT ET|     E_TMR---|I_TMR  EXPIRED|---DONE\n             +-----+             +--------------+\nEND_FUNCTION_BLOCK\nNOTE I_TMR is not represented graphically in this figure since this would imply invocation of\nI_TMR within INSIDE_A, which is forbidden by rules 4) and 5) of 2.5.2.2.  See also\nfeature. 5 a) of table 33.\nFigure 11 a) - Graphical use of a function block name as an input variable\n(table 33, feature 5b)\nIEC   2481/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 74 – 61131-3  IEC:2003(E)\nFUNCTION_BLOCK\n        +--------------+     (* External interface *)\n        |   INSIDE_B   |\n  TON---|I_TMR----I_TMR|---TON\n  BOOL--|TMR_GO EXPIRED|---BOOL\n        +--------------+\n              I_TMR          (* Function Block body *)\n             +-----+\n             | TON |\n     TMR_GO--|IN  Q|---EXPIRED\n             |PT ET|\n             +-----+\nEND_FUNCTION_BLOCK\nFUNCTION_BLOCK\n         +--------------+      (* External interface *)\n         |  EXAMPLE_B   |\n  BOOL---|GO        DONE|---BOOL"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 201,
    "text": "D\n             |PT ET|\n             +-----+\nEND_FUNCTION_BLOCK\nFUNCTION_BLOCK\n         +--------------+      (* External interface *)\n         |  EXAMPLE_B   |\n  BOOL---|GO        DONE|---BOOL\n         +--------------+\n              E_TMR            (* Function Block body *)\n             +-----+                   I_BLK\n             | TON |             +---------------+\n             |IN  Q|             |   INSIDE_B    |\n   t#100ms---|PT ET|     E_TMR---|I_TMR-----I_TMR|\n             +-----+     GO------|TMR_GO  EXPIRED|---DONE\n                                 +---------------+\nEND_FUNCTION_BLOCK\nFigure 11 b) - Graphical use of a function block name as an in-out variable\n(table 33, feature 6b)\nIEC   2482/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 75 –\nFUNCTION_BLOCK\n        +--------------+       (* External interface *)\n        |   INSIDE_C   |\n  BOOL--|TMR_GO EXPIRED|---BOOL\n        +--------------+\nVAR_EXTERNAL X_TMR : TON ; END_VAR\n              X_TMR            (* Function Block body *)"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 202,
    "text": "l interface *)\n        |   INSIDE_C   |\n  BOOL--|TMR_GO EXPIRED|---BOOL\n        +--------------+\nVAR_EXTERNAL X_TMR : TON ; END_VAR\n              X_TMR            (* Function Block body *)\n             +-----+\n             | TON |\n    TMR_GO---|IN  Q|---EXPIRED\n             |PT ET|\n             +-----+\nEND_FUNCTION_BLOCK\nPROGRAM\n         +--------------+      (* External interface *)\n         |  EXAMPLE_C   |\n  BOOL---|GO        DONE|---BOOL\n         +--------------+\n  VAR_GLOBAL X_TMR : TON ; END_VAR\n              I_BLK            (* Program body *)\n         +---------------+\n         |   INSIDE_C    |\n GO------|TMR_GO  EXPIRED|---DONE\n         +---------------+\nEND_PROGRAM\nNOTE The PROGRAM declaration mechanism is defined in 2.5.3.\nFigure 11 c) - Graphical use of a function block name as an external variable\n(table 33, feature 7b)\nIEC   2483/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 76 – 61131-3  IEC:2003(E)\n12a)          +-------+\n         | ACCUM |\n   INT---|A-----A|---INT\n   INT---|X      |\n         +-------+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 203,
    "text": "itted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 76 – 61131-3  IEC:2003(E)\n12a)          +-------+\n         | ACCUM |\n   INT---|A-----A|---INT\n   INT---|X      |\n         +-------+\n           +---+\n       A---| + |---A\n       X---|   |\n           +---+\nFUNCTION_BLOCK ACCUM\n   VAR_IN_OUT A : INT ; END_VAR\n   VAR_INPUT X : INT ; END_VAR\n   A := A+X ;\nEND_FUNCTION_BLOCK\n12b)                  ACC1\n               +-------+\n               | ACCUM |\n  ACC----------|A-----A|---ACC\n       +---+   |       |\n  X1---| * |---|X      |\n  X2---|   |   +-------+\n       +---+\nA declaration such as\nVAR\n    ACC : INT ;\n    X1  : INT ;\n    X2  : INT ;\nEND_VAR\nis assumed: the effect of execution is\nACC := ACC+X1*X2 ;\n12c)                ACC1                     ACC2\n             +-------+                +-------+\n             | ACCUM |                | ACCUM |\nACC----------|A-----A|----------------|A-----A|---ACC\n     +---+   |       |        +---+   |       |\nX1---| * |---|X      |   X3---| * |---|X      |\nX2---|   |   +-------+   X4---|   |   +-------+\n     +---+                    +---+\nDeclarations as in\n12b) are assumed for\nACC, X1, X2, X3,\nand X4.; the effect of\nexecution is\nACC :=\nA"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 204,
    "text": "|---|X      |\nX2---|   |   +-------+   X4---|   |   +-------+\n     +---+                    +---+\nDeclarations as in\n12b) are assumed for\nACC, X1, X2, X3,\nand X4.; the effect of\nexecution is\nACC :=\nACC+X1*X2+X3*X4;\n12d)                  ACC1\n               +-------+\n               | ACCUM |\n  X3-----------|A-----A|---X4\n       +---+   |       |\n  X1---| * |---|X      |\n  X2---|   |   +-------+\n       +---+\nA declaration such as\nVAR\n    X1  : INT ;\n    X2  : INT ;\n....X3 : INT ;\n... X4 : INT ;\nEND_VAR\nis assumed: the effect of execution is\nX3 := X3+X1*X2 ;\nX4 := X3 ;\n12e)                  ACC1\n       +---+   +-------+\n  X1---| * |   | ACCUM |\n  X2---|   |---|A-----A|---ACC\n       +---+   |       |\n  X3-----------|X      |\n               +-------+\nILLEGAL USAGE!!!\nConnection to in-out variable A is not a\nvariable or function block name (see\npreceding text)\nFigure 12 - Declaration and usage of in-out variables in function blocks\na) Graphical and textual declarations\nb), c), d)  Legal usage,  e) Illegal usage\nIEC   2484/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license f"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 205,
    "text": "ge,  e) Illegal usage\nIEC   2484/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 77 –\n2.5.2.3  Standard function blocks\nDefinitions of function blocks common to all programmable controller programming languages are\ngiven in this subclause.\nWhere graphical declarations of standard function blocks are shown in this subclause, equivalent\ntextual declarations, as specified in 2.5.2.2, can also be written, as for example in table 35.\nStandard function blocks may be overloaded and may have extensible inputs and outputs. The\ndefinitions of such function block types shall describe any constraints on the number and data types of\nsuch inputs and outputs.  The use of such capabilities in non-standard function blocks is beyond the\nscope of this Standard.\n2.5.2.3.1  Bistable elements\nThe graphical form and function block body of standard bistable elements are shown in table 34. The\nnotation for these elements is chosen to be as consistent as possible with symbols 12-09-01 and\n12-09-02 of IEC 60617-12.\nTable 34 - Standa"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 206,
    "text": "ody of standard bistable elements are shown in table 34. The\nnotation for these elements is chosen to be as consistent as possible with symbols 12-09-01 and\n12-09-02 of IEC 60617-12.\nTable 34 - Standard bistable function blocks a\nNo. Graphical form Function block body\n1 Bistable function block (set dominant)\n        +-----+\n        |  SR |\n BOOL---|S1 Q1|---BOOL\n BOOL---|R    |\n        +-----+\n                   +-----+\n S1----------------| >=1 |---Q1\n          +---+    |     |\n  R------O| & |----|     |\n  Q1------|   |    |     |\n          +---+    +-----+\n2 Bistable function block (reset dominant)\n        +-----+\n        |  RS |\n BOOL---|S  Q1|---BOOL\n BOOL---|R1   |\n        +-----+\n                     +---+\n  R1----------------O| & |---Q1\n          +-----+    |   |\n  S-------| >=1 |----|   |\n  Q1------|     |    |   |\n          +-----+    +---+\nNOTE The function block body is specified in the Function Block Diagram (FBD) language\ndefined in 4.3.\na The initial state of the output variable Q1 shall be the normal default value of zero for Boolean\nvariables.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 207,
    "text": "riable Q1 shall be the normal default value of zero for Boolean\nvariables.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 78 – 61131-3  IEC:2003(E)\n2.5.2.3.2  Edge detection\nThe graphic representation of standard rising- and falling-edge detecting function blocks shall be as\nshown in table 35. The behaviors of these blocks shall be equivalent to the definitions given in this\ntable.  This behavior corresponds to the following rules:\n 1) The \nQ output  of an R_TRIG function block shall stand at the BOOL#1 value from one execution\nof the function block to the next, following the 0 to 1 transition of the CLK input, and shall return\nto 0 at the next execution.\n 2) The Q output of an F_TRIG function block shall stand at the BOOL#1 value from one execution\nof the function block to the next, following the 1 to 0 transition of the CLK input, and shall return\nto 0 at the next execution.\nTable 35 - Standard edge detection function blocks\nNo. Graphical form Definition\n(ST language - see 3.3)\n1 Rising edge detector\n        +--------+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 208,
    "text": "and shall return\nto 0 at the next execution.\nTable 35 - Standard edge detection function blocks\nNo. Graphical form Definition\n(ST language - see 3.3)\n1 Rising edge detector\n        +--------+\n        | R_TRIG |\n BOOL---|CLK    Q|---BOOL\n        +--------+\nFUNCTION_BLOCK R_TRIG\n     VAR_INPUT  CLK: BOOL; END_VAR\n     VAR_OUTPUT  Q: BOOL; END_VAR\n     VAR M: BOOL; END_VAR\nQ := CLK AND NOT M;\nM := CLK;\nEND_FUNCTION_BLOCK\n2 Falling edge detector\n        +--------+\n        | F_TRIG |\n BOOL---|CLK    Q|---BOOL\n        +--------+\nFUNCTION_BLOCK F_TRIG\n     VAR_INPUT  CLK: BOOL; END_VAR\n     VAR_OUTPUT   Q: BOOL; END_VAR\n     VAR M: BOOL; END_VAR\nQ := NOT CLK AND NOT M;\nM := NOT CLK;\nEND_FUNCTION_BLOCK\nNOTE When the CLK input of an instance of the R_TRIG type is connected to a value of\nBOOL#1, its Q output will stand at BOOL#1 after its first execution following a “cold restart”\nas described in 2.4.2.  The Q output will stand at BOOL#0 following all subsequent\nexecutions.  The same applies to an F_TRIG instance whose CLK input is disconnected\nor is connected to a value of FALSE.\n2.5.2.3.3  Counters\nThe graphic representations of standard counter function blocks, with the types of the asso"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 209,
    "text": "an F_TRIG instance whose CLK input is disconnected\nor is connected to a value of FALSE.\n2.5.2.3.3  Counters\nThe graphic representations of standard counter function blocks, with the types of the associated\ninputs and outputs, shall be as shown in table 36.  The operation of these function blocks shall be as\nspecified in the corresponding function block bodies.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 79 –\nTable 36 - Standard counter function blocks\nNo. Graphical form Function block body\n(ST language - see 3.3)\nUp-counter\n1a          +-----+\n         | CTU |\n  BOOL--->CU  Q|---BOOL\n  BOOL---|R    |\n   INT---|PV CV|---INT\n         +-----+\n IF R THEN CV := 0 ;\n ELSIF CU AND (CV < PVmax)\n     THEN CV := CV+1;\n END_IF ;\n Q := (CV >= PV) ;\n1b          +----------+\n         | CTU_DINT |\n  BOOL--->CU       Q|---BOOL\n  BOOL---|R         |\n  DINT---|PV      CV|---DINT\n         +----------+\nSame as 1a\n1c          +----------+\n         | CTU_LINT |\n  BOOL--->CU       Q|---BOOL\n  BOOL---|R         |\n  LINT---|PV"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 210,
    "text": "OOL\n  BOOL---|R         |\n  DINT---|PV      CV|---DINT\n         +----------+\nSame as 1a\n1c          +----------+\n         | CTU_LINT |\n  BOOL--->CU       Q|---BOOL\n  BOOL---|R         |\n  LINT---|PV      CV|---LINT\n         +----------+\nSame as 1a\n1d          +-----------+\n         | CTU_UDINT |\n  BOOL--->CU        Q|---BOOL\n  BOOL---|R          |\n UDINT---|PV       CV|---UDINT\n         +-----------+\nSame as 1a\n1e          +-----------+\n         | CTU_ULINT |\n  BOOL--->CU        Q|---BOOL\n  BOOL---|R          |\n ULINT---|PV       CV|---ULINT\n         +-----------+\nSame as 1a\nDown-counter\n2a          +-----+\n         | CTD |\n  BOOL--->CD  Q|---BOOL\n  BOOL---|LD   |\n   INT---|PV CV|---INT\n         +-----+\n IF LD THEN CV := PV ;\n ELSIF CD AND (CV > PVmin)\n     THEN CV := CV-1;\n END_IF ;\n Q := (CV <= 0) ;\n2b          +----------+\n         | CTD_DINT |\n  BOOL--->CD       Q|---BOOL\n  BOOL---|LD        |\n  DINT---|PV      CV|---DINT\n         +----------+\nSame as 2a\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 80 – 61131-3  IEC:2003(E"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 211,
    "text": "ctrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 80 – 61131-3  IEC:2003(E)\nTable 36 - Standard counter function blocks\nNo. Graphical form Function block body\n(ST language - see 3.3)\n2c          +----------+\n         | CTD_LINT |\n  BOOL--->CD       Q|---BOOL\n  BOOL---|LD        |\n  LINT---|PV      CV|---LINT\n         +----------+\nSame as 2a\n2d          +-----------+\n         | CTD_UDINT |\n  BOOL--->CD        Q|---BOOL\n  BOOL---|LD         |\n UDINT---|PV       CV|---UDINT\n         +-----------+\nSame as 2a\n2e          +-----------+\n         | CTD_ULINT |\n  BOOL--->CD        Q|---BOOL\n  BOOL---|LD         |\n ULINT---|PV       CV|---ULINT\n         +-----------+\nSame as 2a\nUp-down counter\n3a          +------+\n         | CTUD |\n  BOOL--->CU  QU|---BOOL\n  BOOL--->CD  QD|---BOOL\n  BOOL---|R     |\n  BOOL---|LD    |\n   INT---|PV  CV|---INT\n         +------+\n IF R THEN CV := 0 ;\n ELSIF LD THEN CV := PV ;\n ELSE\n   IF NOT (CU AND CD) THEN\n     IF CU AND (CV < PVmax)\n     THEN CV := CV+1;\n     ELSIF CD AND (CV > PVmin)\n     THEN CV := CV-1;\n     END_IF;\n   END_IF;\n END_IF"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 212,
    "text": ":= 0 ;\n ELSIF LD THEN CV := PV ;\n ELSE\n   IF NOT (CU AND CD) THEN\n     IF CU AND (CV < PVmax)\n     THEN CV := CV+1;\n     ELSIF CD AND (CV > PVmin)\n     THEN CV := CV-1;\n     END_IF;\n   END_IF;\n END_IF ;\n QU := (CV >= PV) ;\n QD := (CV <= 0) ;\n3b          +-----------+\n         | CTUD_DINT |\n  BOOL--->CU       QU|---BOOL\n  BOOL--->CD       QD|---BOOL\n  BOOL---|R          |\n  BOOL---|LD         |\n  DINT---|PV       CV|---DINT\n         +-----------+\nSame as 3a\n3c          +-----------+\n         | CTUD_LINT |\n  BOOL--->CU       QU|---BOOL\n  BOOL--->CD       QD|---BOOL\n  BOOL---|R          |\n  BOOL---|LD         |\n  LINT---|PV       CV|---LINT\n         +-----------+\nSame as 3a\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 81 –\nTable 36 - Standard counter function blocks\nNo. Graphical form Function block body\n(ST language - see 3.3)\n3d          +------------+\n         | CTUD_ULINT |\n  BOOL--->CU        QU|---BOOL\n  BOOL--->CD        QD|---BOOL\n  BOOL---|R           |\n  BOOL---|LD          |\n ULINT---|PV        CV|"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 213,
    "text": "uage - see 3.3)\n3d          +------------+\n         | CTUD_ULINT |\n  BOOL--->CU        QU|---BOOL\n  BOOL--->CD        QD|---BOOL\n  BOOL---|R           |\n  BOOL---|LD          |\n ULINT---|PV        CV|---ULINT\n         +------------+\nSame as 3a\nNOTE The numerical values of the limit variables PVmin and PVmax are implementation-\ndependent.\n2.5.2.3.4  Timers\nThe graphic form for standard timer function blocks shall be as shown in table 37. The operation of\nthese function blocks shall be as defined in the timing diagrams given in table 38.\nTable 37 - Standard timer function blocks\nNo. Description Graphical form\n1\n2a\n2b a\n3a\n3b a\n*** is: TP  (Pulse)\n        TON (On-delay)\n        T---0  (On-delay)\n        TOF   (Off-delay)\n        0---T  (Off-delay)\n          +-------+\n          |  ***  |\n   BOOL---|IN    Q|---BOOL\n   TIME---|PT   ET|---TIME\n          +-------+\nNOTE The effect of a change in the value of the PT input during the timing operation, e.g., the\nsetting of PT to t#0s to reset the operation of a TP instance, is an implementation-\ndependent parameter.\na In textual languages, features 2b and 3b shall not be used.\nCopyright International Electrotechnical Commission \nProvided by IH"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 214,
    "text": "operation of a TP instance, is an implementation-\ndependent parameter.\na In textual languages, features 2b and 3b shall not be used.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 82 – 61131-3  IEC:2003(E)\nTable 38 - Standard timer function blocks - timing diagrams\nPulse (TP) timing\n      +--------+     ++ ++   +--------+\n IN   |        |     || ||   |        |\n    --+        +-----++-++---+        +---------\n      t0       t1    t2 t3    t4       t5\n      +----+         +----+  +----+\n Q    |    |         |    |  |    |\n    --+    +---------+    +--+    +-------------\n      t0   t0+PT    t2 t2+PT t4  t4+PT\n   PT      +---+          +       +---+\n    :     /    |         /|      /    |\n ET :    /     |        / |     /     |\n    :   /      |       /  |    /      |\n    :  /       |      /   |   /       |\n    0-+        +-----+    +--+        +---------\n      t0       t1    t2      t4       t5\nOn-delay (TON) timing\n      +--------+        +---+   +--------+\n IN   |        |        |   |   |        |\n    --+        +--------+   +--"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 215,
    "text": "+        +---------\n      t0       t1    t2      t4       t5\nOn-delay (TON) timing\n      +--------+        +---+   +--------+\n IN   |        |        |   |   |        |\n    --+        +--------+   +---+        +-------------\n      t0       t1       t2  t3  t4       t5\n           +---+                     +---+\n Q         |   |                     |   |\n    -------+   +---------------------+   +-------------\n        t0+PT  t1                t4+PT   t5\n   PT      +---+                     +---+\n    :     /    |            +       /    |\n ET :    /     |           /|      /     |\n    :   /      |          / |     /      |\n    :  /       |         /  |    /       |\n    0-+        +--------+   +---+        +-------------\n      t0       t1       t2  t3  t4       t5\nOff-delay (TOF) timing\n        +--------+        +---+   +--------+\n IN     |        |        |   |   |        |\n     ---+        +--------+   +---+        +-----------\n        t0       t1       t2  t3  t4       t5\n        +-------------+   +---------------------+\n Q      |             |   |                     |\n     ---+             +---+                     +------\n        t0          t1+PT t2                  t5+PT\n   PT"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 216,
    "text": "-------+   +---------------------+\n Q      |             |   |                     |\n     ---+             +---+                     +------\n        t0          t1+PT t2                  t5+PT\n   PT                 +---+                     +------\n    :                /    |       +            /\n ET :               /     |      /|           /\n    :              /      |     / |          /\n    :             /       |    /  |         /\n    0------------+        +---+   +--------+\n                 t1           t3           t5\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 83 –\n2.5.2.3.5  Communication function blocks\nStandard communication function blocks for programmable controllers are defined in IEC 61131-5.\nThese function blocks provide programmable communications functionality such as device verification,\npolled data acquisition, programmed data acquisition, parametric control, interlocked control,\nprogrammed alarm reporting, and connection management and protection.\n2.5.3  Programs\nA program is defined i"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 217,
    "text": "led data acquisition, programmed data acquisition, parametric control, interlocked control,\nprogrammed alarm reporting, and connection management and protection.\n2.5.3  Programs\nA program is defined in IEC 61131-1 as a “logical assembly of all the programming language elements\nand constructs necessary for the intended signal processing required for the control of a machine or\nprocess by a programmable controller system.”\nSubclause 1.4.1 of this part describes the place of programs in the overall software model of a\nprogrammable controller; subclause 1.4.2 describes the means available for inter- and intra-program\ncommunication; and subclause 1.4.3 describes the overall process of program development.\nThe declaration and usage of \nprograms is identical to that of function blocks as defined in 2.5.2.1 and\n2.5.2.2, with the additional features shown in table 39 and the following differences:\n1) The delimiting keywords for program declarations shall be PROGRAM...END_PROGRAM.\n2) A program can contain a VAR_ACCESS...END_VAR construction, which provides a means of\nspecifying named variables which can be accessed by some of the communication services\nspecified in IEC 61131-5.  An access pa"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 218,
    "text": "an contain a VAR_ACCESS...END_VAR construction, which provides a means of\nspecifying named variables which can be accessed by some of the communication services\nspecified in IEC 61131-5.  An access path associates each such variable with an input, output or\ninternal variable of the program.  The format and usage of this declaration shall be as described in\n2.7.1 and in IEC 61131-5.\n3) Programs can only be instantiated within resources, as defined in 2.7.1, while function blocks can\nonly be instantiated within programs or other function blocks.\n4) A program can contain location assignments as described in 2.4.3.1 and 2.4.3.2 in the\ndeclarations of its global and internal variables. Location assignments with not fully specified direct\nrepresentation as described in 2.4.1.1 and 2.4.3.1 can only be used in the declaration of internal\nvariables of a program.\nThe declaration and use of programs are illustrated in figure 19, and in examples F.7 and F.8.\nLimitations on the size of programs in a particular \nresource are implementation-dependent parameters.\nTable 39 - Program declaration features\nNo. DESCRIPTION\n1 to 9b Same as features 1 to 9b, respectively, of table 33\n10 Formal input and"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 219,
    "text": "a particular \nresource are implementation-dependent parameters.\nTable 39 - Program declaration features\nNo. DESCRIPTION\n1 to 9b Same as features 1 to 9b, respectively, of table 33\n10 Formal input and output variables\n11 to 14 Same as features 1 to 4, respectively, of table 17\n15 to 18 Same as features 1 to 4, respectively, of table 18\n19 Use of directly represented variables (subclause 2.4.1.1)\n20 VAR_GLOBAL...END_VAR declaration within a PROGRAM (see 2.4.3 and 2.7.1)\n21 VAR_ACCESS...END_VAR declaration within a PROGRAM\n22a VAR_EXTERNAL declarations within PROGRAM type declarations\n22b VAR_EXTERNAL CONSTANT declarations within PROGRAM type declarations\n23 VAR_GLOBAL CONSTANT declarations within PROGRAM type declarations\n24 VAR_TEMP declarations (see 2.4.3) within PROGRAM type declarations\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 84 – 61131-3  IEC:2003(E)\n2.6  Sequential Function Chart (SFC) elements\n2.6.1  General\nThis subclause defines sequential function chart  (SFC) elements for use in structuring the internal\norganizat"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 220,
    "text": "– 84 – 61131-3  IEC:2003(E)\n2.6  Sequential Function Chart (SFC) elements\n2.6.1  General\nThis subclause defines sequential function chart  (SFC) elements for use in structuring the internal\norganization of a programmable controller program organization unit, written in one of the languages\ndefined in this standard, for the purpose of performing sequential control functions.  The definitions in\nthis subclause are derived from IEC 60848, with the changes necessary to convert the representations\nfrom a documentation standard to a set of execution control elements  for a programmable controller\nprogram organization unit.\nThe SFC elements provide a means of partitioning a programmable controller program organization\nunit into a set of steps and transitions interconnected by directed links.  Associated with each step is a\nset of actions, and with each transition is associated a transition condition.\nSince SFC elements require storage of state information, the only program organization units which\ncan be structured using these elements are function blocks and programs.\nIf any part of a program organization unit is partitioned into SFC elements, the entire program\norganization unit shall"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 221,
    "text": "which\ncan be structured using these elements are function blocks and programs.\nIf any part of a program organization unit is partitioned into SFC elements, the entire program\norganization unit shall be so partitioned.  If no SFC partitioning is given for a program organization\nunit, the entire program organization unit shall be considered to be a single action which executes\nunder the control of the invoking entity.\n2.6.2  Steps\nA step represents a situation in which the behavior of a program organization unit with respect to its\ninputs and outputs follows a set of rules defined by the associated actions of the step.  A step is either\nactive or inactive.  At any given moment, the state of the program organization unit is defined by the\nset of active steps and the values of its internal and output variables.\nAs shown in table 40, a step shall be represented graphically by a block containing a step name in the\nform of an identifier as defined in 2.1.2, or textually by a STEP...END_STEP construction.  The\ndirected link(s) into the step can be represented graphically by a vertical line attached to the top of the\nstep.  The directed link(s) out of the step can be represented by a verti"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 222,
    "text": "construction.  The\ndirected link(s) into the step can be represented graphically by a vertical line attached to the top of the\nstep.  The directed link(s) out of the step can be represented by a vertical line attached to the bottom\nof the step.  Alternatively, the directed links can be represented textually by the TRANSITION...\nEND_TRANSITION construction defined in 2.6.3.\nThe step flag (active or inactive state of a step) can be represented by the logic value of a Boolean\nstructure element ***.X, where *** is the step name, as shown in table 40.  This Boolean variable\nhas the value 1 when the corresponding step is active, and 0 when it is inactive.  The state of this\nvariable is available for graphical connection at the right side of the step as shown in table 40.\nSimilarly, the elapsed time, ***.T, since initiation of a step can be represented by a structure element\nof type TIME, as shown in table 40.  When a step is deactivated, the value of the step elapsed time\nshall remain at the value it had when the step was deactivated. When a step is activated, the value of\nthe step elapsed time shall be reset to t#0s.\nThe scope of step names, step flags, and step times shall be local to"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 223,
    "text": "value it had when the step was deactivated. When a step is activated, the value of\nthe step elapsed time shall be reset to t#0s.\nThe scope of step names, step flags, and step times shall be local to the program organization unit in\nwhich the steps appear.\nThe initial state of the program organization unit is represented by the initial values of its internal and\noutput variables, and by its set of initial steps , i.e., the steps which are initially active.  Each SFC\nnetwork, or its textual equivalent, shall have exactly one initial step.\nAn initial step can be drawn graphically with double lines for the borders. When the character set\ndefined in 2.1.1 is used for drawing, the initial step shall be drawn as shown in table 40.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 85 –\nFor system initialization as defined in 2.4.2, the default initial elapsed time for steps is t#0s, and the\ndefault initial state is BOOL#0 for ordinary steps and BOOL#1 for initial steps.  However, when an\ninstance of a function block o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 224,
    "text": "in 2.4.2, the default initial elapsed time for steps is t#0s, and the\ndefault initial state is BOOL#0 for ordinary steps and BOOL#1 for initial steps.  However, when an\ninstance of a function block or a program is declared to be retentive (for instance, as in feature 3 of\ntable 33), the states and (if supported) elapsed times of all steps contained in the program or function\nblock shall be treated as retentive for system initialization as defined in 2.4.2.\nThe maximum number of steps per SFC and the precision of step elapsed time are \nimplementation-\ndependent parameters.\nIt shall be an error if:\n1) an SFC network does not contain exactly one initial step;\n2) a user program attempts to assign a value directly to the step state or the step time.\nTable 40 - Step features\nNo. REPRESENTATION DESCRIPTION\n1         |\n     +-----+\n     | *** |\n     +-----+\n        |\nStep - graphical form\nwith directed links\n\"***\" = step name\n        |\n    +=======+\n    || *** ||\n    ||     ||\n    +=======+\n        |\nInitial step - graphical form with directed links\n\"***\" = name of initial step\n2 STEP *** :\n  (* Step body *)\nEND_STEP\nStep - textual form\nwithout directed links (see 2.6.3)\n\"***\" = step name"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 225,
    "text": "|\nInitial step - graphical form with directed links\n\"***\" = name of initial step\n2 STEP *** :\n  (* Step body *)\nEND_STEP\nStep - textual form\nwithout directed links (see 2.6.3)\n\"***\" = step name\nINITIAL_STEP *** :\n  (* Step body *)\nEND_STEP\nInitial step - textual form\nwithout directed links (see 2.6.3)\n\"***\" =  name of initial step\n3a a\n***.X\nStep flag - general form\n\"***\" = step name\n***.X = BOOL#1 when *** is active, BOOL#0 otherwise\n3b a\n        |\n     +-----+\n     | *** |----\n     +-----+\n        |\nStep flag - direct connection\nof Boolean variable ***.X to\nright side of step \"***\"\n4 a\n***.T\nStep elapsed time - general form\n\"***\" = step name\n***.T = a variable of type TIME\n(See 2.6.2)\nNOTE The upper directed link to an initial step is not present if it has no predecessors.\na When feature 3a, 3b, or 4 is supported, it shall be an error if the user program attempts\nto modify the associated variable.  For example, if S4 is a step name, then the following\nstatements would be errors in the ST language defined in 3.3:\nS4.X := 1 ; (* ERROR *)\nS4.T := t#100ms ; (* ERROR *)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 226,
    "text": "s in the ST language defined in 3.3:\nS4.X := 1 ; (* ERROR *)\nS4.T := t#100ms ; (* ERROR *)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 86 – 61131-3  IEC:2003(E)\n2.6.3  Transitions\nA transition represents the condition whereby control passes from one or more steps preceding the\ntransition to one or more successor steps along the corresponding directed link.  The transition shall\nbe represented by a horizontal line across the vertical directed link.\nThe direction of evolution following the directed links shall be from the bottom of the predecessor\nstep(s) to the top of the successor step(s).\nEach transition shall have an associated transition condition which is the result of the evaluation of a\nsingle Boolean expression.  A transition condition which is always true shall be represented by the\nsymbol 1 or the keyword TRUE.\nA transition condition can be associated with a transition by one of the following means, as shown in\ntable 41:\n1) By placing the appropriate Boolean expression in the ST language defined in 3.3 physically or"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 227,
    "text": "ion condition can be associated with a transition by one of the following means, as shown in\ntable 41:\n1) By placing the appropriate Boolean expression in the ST language defined in 3.3 physically or\nlogically adjacent to the vertical directed link.\n2) By a ladder diagram network in the LD language defined in 4.2, physically or logically adjacent to\nthe vertical directed link.\n3) By a network in the FBD language defined in 4.3, physically or logically adjacent to the vertical\ndirected link.\n4) By a LD or FBD network whose output intersects the vertical directed link via a connector as\ndefined in 4.1.1.\n5) By a TRANSITION...END_TRANSITION construct using the ST language.  This shall consist of:\n- the keywords TRANSITION FROM followed by the step name of the predecessor step (or, if there\nis more than one predecessor, by a parenthesized list of predecessor steps);\n- the keyword TO followed by the step name of the successor step (or, if there is more than one\nsuccessor, by a parenthesized list of successor steps);\n- the assignment operator ( :=), followed by a Boolean expression in the ST language, specifying\nthe transition condition;\n- the terminating keyword END_TRANSITION.\n6) By a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 228,
    "text": "list of successor steps);\n- the assignment operator ( :=), followed by a Boolean expression in the ST language, specifying\nthe transition condition;\n- the terminating keyword END_TRANSITION.\n6) By a TRANSITION...END_TRANSITION construct using the IL language defined in 3.2.  This\nshall consist of:\n- the keywords TRANSITION FROM followed by the step name of the predecessor step (or, if there\nis more than one predecessor, by a parenthesized list of predecessor steps), followed by a\ncolon (:);\n- the keyword TO followed by the step name of the successor step (or, if there is more than one\nsuccessor, by a parenthesized list of successor steps);\n- beginning on a separate line, a list of instructions in the IL language, the result of whose\nevaluation determines the transition condition;\n- the terminating keyword END_TRANSITION on a separate line.\n7) By the use of a transition name in the form of an identifier to the right of the directed link.  This\nidentifier shall refer to a TRANSITION...END_TRANSITION construction defining one of the\nfollowing entities, whose evaluation shall result in the assignment of a Boolean value to the\nvariable denoted by the transition name:\n- a network in the"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 229,
    "text": "ND_TRANSITION construction defining one of the\nfollowing entities, whose evaluation shall result in the assignment of a Boolean value to the\nvariable denoted by the transition name:\n- a network in the LD or FBD language;\n- a list of instructions in the IL language;\n- an assignment of a Boolean expression in the ST language.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 87 –\nThe scope of a transition name shall be local to the program organization unit in which the transition is\nlocated.\nIt shall be an error in the sense of 1.5.1 if any “side effect” (for instance, the assignment of a value to\na variable other than the transition name) occurs during the evaluation of a transition condition.\nThe maximum number of transitions per SFC and per step are implementation-dependent\nparameters.\nTable 41 - Transitions and transition conditions\nNo. Example Description\n1a\n          |\n       +-----+\n       |STEP7|\n       +-----+\n          |\n          + %IX2.4 & %IX2.3\n          |\n       +-----+\n       |STEP8|\n       +----"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 230,
    "text": "transition conditions\nNo. Example Description\n1a\n          |\n       +-----+\n       |STEP7|\n       +-----+\n          |\n          + %IX2.4 & %IX2.3\n          |\n       +-----+\n       |STEP8|\n       +-----+\n          |\nPredecessor step\nTransition condition physically or\nlogically adjacent to the transition\nusing ST language (see 3.3)\nSuccessor step\n2a\n                       |\n                    +-----+\n                    |STEP7|\n                    +-----+\n  | %IX2.4  %IX2.3     |\n  +---||-----||--------+\n  |                    |\n                    +-----+\n                    |STEP8|\n                    +-----+\n                       |\nPredecessor step\nTransition condition physically or\nlogically adjacent to the transition\nusing LD language (see 4.2)\nSuccessor step\n3a\n                       |\n                    +-----+\n                    |STEP7|\n         +-------+  +-----+\n         |   &   |     |\n%IX2.4---|       |-----+\n%IX2.3---|       |     |\n         +-------+  +-----+\n                    |STEP8|\n                    +-----+\n                       |\nPredecessor step\nTransition condition physically or\nlogically adjacent to the transition\nusing FBD language\n(see 4.3)\nSuccessor s"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 231,
    "text": "|STEP8|\n                    +-----+\n                       |\nPredecessor step\nTransition condition physically or\nlogically adjacent to the transition\nusing FBD language\n(see 4.3)\nSuccessor step\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 88 – 61131-3  IEC:2003(E)\nTable 41 - Transitions and transition conditions\n4a\n                        |\n                     +-----+\n                     |STEP7|\n                     +-----+\n                        |\n    >TRANX>-------------+\n                        |\n                     +-----+\n                     |STEP8|\n                     +-----+\n                        |\nUse of connector:\npredecessor step\ntransition connector\nsuccessor step\n4a\n4b\n    | %IX2.4  %IX2.3\n    +---||-----||---->TRANX>\n    |\n           +-------+\n           |   &   |\n  %IX2.4---|       |-->TRANX>\n  %IX2.3---|       |\n           +-------+\nTransition condition:\nUsing LD language\n(see 4.2)\nUsing FBD language\n(see 4.3)\n5b\nSTEP STEP7: END_STEP\nTRANSITION FROM STEP7 TO STEP8\n  := %IX2.4 & %IX2.3 ;\nEND_TRA"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 232,
    "text": ".3---|       |\n           +-------+\nTransition condition:\nUsing LD language\n(see 4.2)\nUsing FBD language\n(see 4.3)\n5b\nSTEP STEP7: END_STEP\nTRANSITION FROM STEP7 TO STEP8\n  := %IX2.4 & %IX2.3 ;\nEND_TRANSITION\nSTEP STEP8: END_STEP\nTextual equivalent\nof feature 1\nusing ST language\n(see 3.3)\n6b\nSTEP STEP7: END_STEP\nTRANSITION FROM STEP7 TO STEP 8:\n  LD  %IX2.4\n  AND %IX2.3\nEND_TRANSITION\nSTEP STEP8: END_STEP\nTextual equivalent\nof feature 1\nusing IL language\n(see 3.2)\n7a\n|\n+-----+\n|STEP7|\n+-----+\n|\n       + TRAN78\n|\n+-----+\n|STEP8|\n+-----+\n|\nUse of transition name:\npredecessor step\ntransition name\nsuccessor step\n7a\nTRANSITION TRAN78 FROM STEP7 TO STEP8:\n  |                        |\n  | %IX2.4  %IX2.3  TRAN78 |\n  +---||-----||------( )---+\n  |                        |\n END_TRANSITION\nTransition condition\nusing LD language\n(see 4.2)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 89 –\nTable 41 - Transitions and transition conditions\n7b\nTRANSITION TRAN78 FROM STEP7 TO STEP8:\n          +-------+\n          |   &   |\n %"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 233,
    "text": "from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 89 –\nTable 41 - Transitions and transition conditions\n7b\nTRANSITION TRAN78 FROM STEP7 TO STEP8:\n          +-------+\n          |   &   |\n %IX2.4---|       |--TRAN78\n %IX2.3---|       |\n          +-------+\nEND_TRANSITION\nTransition condition\nusing FBD language\n(see 4.3)\n7c TRANSITION TRAN78 FROM STEP7 TO STEP8:\n      LD   %IX2.4\n      AND  %IX2.3\nEND_TRANSITION\nTransition condition\nusing IL language\n(see 3.2)\n7d TRANSITION TRAN78  FROM STEP7 TO STEP8\n  := %IX2.4 & %IX2.3 ;\nEND_TRANSITION\nTransition condition using\nST language (see 3.3)\na If feature 1 of table 40 is supported, then one or more of features 1, 2, 3, 4, or 7 of this\ntable shall be supported.\nb If feature 2 of table 40 is supported, then feature 5 or 6 of this table, or both, shall be\nsupported.\n2.6.4  Actions\nZero or more actions shall be associated with each step.  A step which has zero associated actions\nshall be considered as having a WAIT function, that is, waiting for a successor transition condition to\nbecome true.\nAn action can be a Boolean variable, a collection of instructions in the IL language defined in 3.2, a\ncollection of statements in the ST lan"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 234,
    "text": "iting for a successor transition condition to\nbecome true.\nAn action can be a Boolean variable, a collection of instructions in the IL language defined in 3.2, a\ncollection of statements in the ST language defined in 3.3, a collection of rungs in the LD language\ndefined in 4.2, a collection of networks in the FBD language defined in 4.3, or a sequential function\nchart (SFC) organized as defined in 2.6.\nActions shall be declared via one or more of the mechanisms defined in 2.6.4.1, and shall be\nassociated with steps via textual  step bodies  or graphical action blocks , as defined in 2.6.4.2.  The\ndetails of action block representation are defined in 2.6.4.3.  Control of actions shall be expressed by\naction qualifiers as defined in 2.6.4.4.\n2.6.4.1  Declaration\nA programmable controller implementation which supports SFC elements shall provide one or more of\nthe mechanisms defined in table 42 for the declaration of actions.  The scope of the declaration of an\naction shall be local to the program organization unit containing the declaration.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitte"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 235,
    "text": "program organization unit containing the declaration.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 90 – 61131-3  IEC:2003(E)\nTable 42 - Declaration of actions a,b\nNo. Feature\n1 Any Boolean variable declared in a VAR or VAR_OUTPUT block, or their graphical\nequivalents, can be an action.\nNo. Example Feature\n2l\n+----------------------------------------+\n|                ACTION_4                |\n+----------------------------------------+\n|     |  %IX1   %MX3  S8.X  %QX17  |     |\n|     +---||-----||----||-----()---+     |\n|     |                            |     |\n|     |    +------+                |     |\n|     +----|EN ENO|         %MX10  |     |\n|     | C--|  LT  |----------(S)---+     |\n|     | D--|      |                |     |\n|     |    +------+                |     |\n+----------------------------------------+\nGraphical\ndeclaration in LD\nlanguage (see 4.2)\n2s\n+----------------------------------------+\n|             OPEN_VALVE_1               |\n+----------------------------------------+\n|          | ..."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 236,
    "text": "ration in LD\nlanguage (see 4.2)\n2s\n+----------------------------------------+\n|             OPEN_VALVE_1               |\n+----------------------------------------+\n|          | ...                         |\n| +=================+                    |\n| || VALVE_1_READY ||                    |\n| +=================+                    |\n|          |                             |\n|          + STEP8.X                     |\n|          |                             |\n| +-----------------+  +---+-----------+ |\n| | VALVE_1_OPENING |--| N |VALVE_1_FWD| |\n| +-----------------+  +---+-----------+ |\n|          | ...                         |\n+----------------------------------------+\nInclusion of SFC\nelements in action\n2f\n+----------------------------------------+\n|                ACTION_4                |\n+----------------------------------------+\n|                +---+                   |\n|          %IX1--| & |                   |\n|          %MX3--|   |--%QX17            |\n|   S8.X---------|   |                   |\n|                +---+    FF28           |\n|                        +----+          |\n|                        | SR |          |\n|              +------+  |  Q1|-%MX10    |\n|"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 237,
    "text": "|\n|                +---+    FF28           |\n|                        +----+          |\n|                        | SR |          |\n|              +------+  |  Q1|-%MX10    |\n|           C--|  LT  |--|S1  |          |\n|           D--|      |  +----+          |\n|              +------+                  |\n+----------------------------------------+\nGraphical\ndeclaration\nin FBD  language\n(see 4.3)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 91 –\nTable 42 - Declaration of actions a,b\nNo. Feature\n3s ACTION ACTION_4:\n  %QX17 := %IX1 & %MX3 & S8.X ;\n  FF28(S1 := (C<D));\n  %MX10 := FF28.Q;\nEND_ACTION\nTextual declaration\nin ST  language\n(see 3.3)\n3i ACTION     ACTION_4:\n  LD         S8.X\n  AND        %IX1\n  AND        %MX3\n  ST         %QX17\n  LD         C\n  LT         D\n  S1         FF28\n  LD         FF28.Q\n  ST         %MX10\nEND_ACTION\nTextual declaration\nin IL\nlanguage (see 3.2)\nNOTE The step flag S8.X is used in these examples to obtain the desired result such\nthat, when S8 is deactivated, %QX17"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 238,
    "text": "F28.Q\n  ST         %MX10\nEND_ACTION\nTextual declaration\nin IL\nlanguage (see 3.2)\nNOTE The step flag S8.X is used in these examples to obtain the desired result such\nthat, when S8 is deactivated, %QX17 := 0.\na If feature 1 of table 40 is supported, then one or more of the features in this table, or\nfeature 4 of table 43, shall be supported.\nb If feature 2 of table 40 is supported, then one or more of features 1,3 s, or 3i of this table\nshall be supported.\n2.6.4.2  Association with steps\nA programmable controller implementation which supports SFC elements shall provide one or more of\nthe mechanisms defined in table 43 for the association of actions with steps.  The maximum number\nof action blocks per step is an implementation-dependent parameter.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 92 – 61131-3  IEC:2003(E)\nTable 43 - Step/action association\nNo. Example Feature\n1\n    |\n  +----+  +-----+----------+---+\n  | S8 |--|  L  | ACTION_1 |DN1|\n  +----+  |t#10s|          |   |\n    |     +-----+----------+---+\n    + DN1\n    |\nActio"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 239,
    "text": "action association\nNo. Example Feature\n1\n    |\n  +----+  +-----+----------+---+\n  | S8 |--|  L  | ACTION_1 |DN1|\n  +----+  |t#10s|          |   |\n    |     +-----+----------+---+\n    + DN1\n    |\nAction block\nphysically or\nlogically\nadjacent to the\nstep\n(see 2.6.4.3)\n2\n    |\n  +----+  +-----+---------------------+---+\n  | S8 |--|  L  |      ACTION_1       |DN1|\n  +----+  |t#10s|                     |   |\n    |     +-----+---------------------+---+\n    +DN1  |  P  |      ACTION_2       |   |\n    |     +-----+---------------------+---+\n    |     |  N  |      ACTION_3       |   |\n    |     +-----+---------------------+---+\nConcatenated\naction blocks\nphysically or\nlogically\nadjacent to the\nstep\n3\nSTEP S8:\n  ACTION_1(L,t#10s,DN1) ;\n  ACTION_2(P) ;\n  ACTION_3(N) ;\nEND_STEP\nTextual\nstep body\n4 a\n     +-----+----------------------+---+\n ----| N   |      ACTION_4        |   |---\n     +-----+----------------------+---+\n     |  %QX17 := %IX1 & %MX3 & S8.X ; |\n     |  FF28 (S1 := (C<D));           |\n     |  %MX10 := FF28.Q;              |\n     +--------------------------------+\nAction block\n\"d\" field\n(see 2.6.4.3)\na When feature 4 is used, the corresponding action name cannot be used in any oth"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 240,
    "text": "|\n     |  %MX10 := FF28.Q;              |\n     +--------------------------------+\nAction block\n\"d\" field\n(see 2.6.4.3)\na When feature 4 is used, the corresponding action name cannot be used in any other\naction block.\n2.6.4.3  Action blocks\nAs shown in table 44, an action block is a graphical element for the combination of a Boolean variable\nwith one of the action qualifiers  specified in subclause 2.6.4.4 to produce an enabling condition,\naccording to the rules given in subclause 2.6.4.5, for an associated action.\nThe action block provides a means of optionally specifying Boolean “indicator” variables, indicated by\nthe “c” field in table 44, which can be set by the specified action to indicate its completion, timeout,\nerror conditions, etc.  If the “c” field is not present, and the “b” field specifies that the action shall be a\nBoolean variable, then this variable shall be interpreted as the “ c” variable when required. If the (c)\nfield is not defined, and the (b) field does not specify a Boolean variable, then the value of the\n“indicator” variable is considered to be always FALSE.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for R"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 241,
    "text": "y a Boolean variable, then the value of the\n“indicator” variable is considered to be always FALSE.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 93 –\nWhen action blocks are concatenated graphically as illustrated in table 43, such concatenations can\nhave multiple indicator variables, but shall have only a single common Boolean input variable, which\nshall act simultaneously upon all the concatenated blocks.\nAs well as being associated with a step, an action block can be used as a graphical element in the LD\nor FBD languages specified in clause 4.  In this case, signal or power flow through an action block\nshall follow the rules specified in 4.1.1.\nTable 44 - Action block features\nNo. Feature Graphical form\n1 a\n2\n3 b\n4\n5\n6\n7\n\"a\"\n : Qualifier as per 2.6.4.4\n\"b\" : Action name\n\"c\" : Boolean \"indicator\"\n        variables\n\"d\" : Action using:\n - IL language (3.2)\n - ST language (3.3)\n - LD language (4.2)\n - FBD language (4.3)\n+-----+--------------+-----+\n---| \"a\" |      \"b\"     | \"c\" |---\n+-----+--------------+----"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 242,
    "text": "bles\n\"d\" : Action using:\n - IL language (3.2)\n - ST language (3.3)\n - LD language (4.2)\n - FBD language (4.3)\n+-----+--------------+-----+\n---| \"a\" |      \"b\"     | \"c\" |---\n+-----+--------------+-----+\n|            \"d\"           |\n|                          |\n+--------------------------+\nNo. Feature/Example\n8 Use of action blocks in ladder diagrams (see 4.2):\n|  S8.X  %IX7.5  +---+------+---+  OK1  |\n+--| |----| |----| N | ACT1 |DN1|--( )--+\n|                +---+------+---+       |\n9 Use of action blocks in function block diagrams (see 4.3):\n                 +---+     +---+------+-----+\n          S8.X---| & |-----| N | ACT1 | DN1 |---OK1\n        %IX7.5---|   |     +---+------+-----+\n                 +---+\na Field “a” can be omitted when the qualifier is “N”.\nb Field “c” can be omitted when no indicator variable is used.\n2.6.4.4  Action qualifiers\nAssociated with each step/action association defined in 2.6.4.2, or each occurrence of an action block\nas defined in 2.6.4.3, shall be an action qualifier.  The value of this qualifier shall be one of the values\nlisted in table 45.  In addition, the qualifiers L, D, SD, DS, and SL shall have an associated duration of\ntype TIME.\nNOTE IEC"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 243,
    "text": "ction qualifier.  The value of this qualifier shall be one of the values\nlisted in table 45.  In addition, the qualifiers L, D, SD, DS, and SL shall have an associated duration of\ntype TIME.\nNOTE IEC 60848 gives informal definitions and examples of the use of these qualifiers.\nThis standard formalizes these definitions, redefining the S qualifier and introducing\nthe R qualifier.  The control of actions using these qualifiers is defined in the\nfollowing subclause, and additional examples of their use are given in annex F.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 94 – 61131-3  IEC:2003(E)\nTable 45 - Action qualifiers\nNo. Qualifier Explanation\n1 None Non-stored (null qualifier)\n2 N Non-stored\n3 R overriding Reset\n4 S Set (Stored)\n5 L time Limited\n6 D time Delayed\n7 P Pulse\n8 SD Stored and time Delayed\n9 DS Delayed and Stored\n10 SL Stored and time Limited\n11 P1 Pulse (rising edge)\n12 P0 Pulse (falling edge)\n2.6.4.5  Action control\nThe control of actions shall be functionally equivalent to the application of the following rules"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 244,
    "text": "L Stored and time Limited\n11 P1 Pulse (rising edge)\n12 P0 Pulse (falling edge)\n2.6.4.5  Action control\nThe control of actions shall be functionally equivalent to the application of the following rules:\n 1) Associated with each action shall be the functional equivalent of an instance of the\nACTION_CONTROL function block defined in figures 14 and 15.  If the action is declared as a\nBoolean variable, as defined in 2.6.4.1, the Q output of this block shall be the state of this\nBoolean variable.  If the action is declared as a collection of statements or networks, as defined\nin 2.6.4.1, then this collection shall be executed continually while the A (activation) output of the\nACTION_CONTROL function block stands at BOOL#1.  In this case, the state of the output Q\n(called the \"action flag\") can be accessed within the action by reading a read-only boolean\nvariable which has the form of a reference to the Q output of a function block instance whose\ninstance name is the same as the corresponding action name, for example, ACTION1.Q.\nNOTE 1 The condition Q=FALSE will ordinarily be used by an action to determine that it is being\nexecuted for the final time during its current activation.\nNOTE 2"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 245,
    "text": "action name, for example, ACTION1.Q.\nNOTE 1 The condition Q=FALSE will ordinarily be used by an action to determine that it is being\nexecuted for the final time during its current activation.\nNOTE 2 The value of Q will always be FALSE during execution of actions invoked by  P0 and P1\nqualifiers.\nNOTE 3 The value of A will be TRUE for only one execution of an action invoked by a P1 or P0\nqualifier. For all other qualifiers, A will be true for one additional execution following the\nfalling edge of Q.\nNOTE 4 Access to the functional equivalent of the Q or A outputs of an ACTION_CONTROL function\nblock from outside of the associated action is an implementation-dependent feature.\nNOTE 5 The manufacturer may opt for a simpler implementation as shown in figure 15 b).  In this\ncase, if the action is declared as a collection of statements or networks, as defined in 2.6.4.1,\nthen this collection shall be executed continually while the Q output of the ACTION_CONTROL\nfunction block stands at BOOL#1. In any case the manufacturer shall specify which of the\nfeatures given in table 45 a) is supported.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot f"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 246,
    "text": "1. In any case the manufacturer shall specify which of the\nfeatures given in table 45 a) is supported.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 95 –\n2) A Boolean input to the ACTION_CONTROL block for an action shall be said to have an\nassociation with a step as defined in 2.6.4.2, or with an action block as defined in 2.6.4.3, if the\ncorresponding qualifier is equivalent to the input name (N, R, S, L, D, P, P0, P1, SD,\nDS, or SL).  The association shall be said to be active if the associated step is active, or if the\nassociated action block's input has the value BOOL#1.  The active associations of an action are\nequivalent to the set of active associations of all inputs to its ACTION_CONTROL function block.\nA Boolean input to an ACTION_CONTROL block shall have the value BOOL#1 if it has at least one\nactive association, and the value BOOL#0 otherwise.\n3) The value of the T input to an ACTION_CONTROL block shall be the value of the duration portion\nof a time-related qualifier (L, D, SD, DS, or SL) of an a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 247,
    "text": "association, and the value BOOL#0 otherwise.\n3) The value of the T input to an ACTION_CONTROL block shall be the value of the duration portion\nof a time-related qualifier (L, D, SD, DS, or SL) of an active association.  If no such association\nexists, the value of the T input shall be t#0s.\n4) It shall be an error in the sense of subclause 1.5.1 if one or more of the following conditions\nexist:\n a) More than one active association  of an action has a time-related qualifier ( L, D, SD, DS,\nor SL).\n b) The SD input to an ACTION_CONTROL block has the BOOL#1 when the Q1 output of its\nSL_FF block has the value BOOL#1.\n c) The SL input to an ACTION_CONTROL block has the value BOOL#1 when the Q1 output of\nits SD_FF block has the value BOOL#1.\n 5) It is not required that the ACTION_CONTROL block itself be implemented, but only that the\ncontrol of actions be equivalent to the preceding rules.  Only those portions of the action control\nappropriate to a particular action need be instantiated, as illustrated in figure 16.  In particular,\nnote that simple MOVE (:=) and Boolean OR functions suffice for control of Boolean variable\nactions if the latter's associations have only “N” qualifiers.\na) b"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 248,
    "text": "llustrated in figure 16.  In particular,\nnote that simple MOVE (:=) and Boolean OR functions suffice for control of Boolean variable\nactions if the latter's associations have only “N” qualifiers.\na) b)\n       +----------------+\n       | ACTION_CONTROL |\nBOOL---|N              Q|---BOOL\nBOOL---|R              A|---BOOL\nBOOL---|S               |\nBOOL---|L               |\nBOOL---|D               |\nBOOL---|P               |\nBOOL---|P1              |\nBOOL---|P0              |\nBOOL---|SD              |\nBOOL---|DS              |\nBOOL---|SL              |\nTIME---|T               |\n       +----------------+\n       +----------------+\n       | ACTION_CONTROL |\nBOOL---|N              Q|---BOOL\nBOOL---|R               |\nBOOL---|S               |\nBOOL---|L               |\nBOOL---|D               |\nBOOL---|P               |\nBOOL---|P1              |\nBOOL---|P0              |\nBOOL---|SD              |\nBOOL---|DS              |\nBOOL---|SL              |\nTIME---|T               |\n       +----------------+\nFigure 14 - ACTION_CONTROL function block - External interface (Not visible to the user)\n a) With “final scan” logic - see figure 15 a); b) Without “final scan” logic - see figure 15 b)\nIEC   2485/"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 249,
    "text": "-+\nFigure 14 - ACTION_CONTROL function block - External interface (Not visible to the user)\n a) With “final scan” logic - see figure 15 a); b) Without “final scan” logic - see figure 15 b)\nIEC   2485/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 96 – 61131-3  IEC:2003(E)\n                                                          +---+\n   +-----------------------------------------------------O| & |---Q\n   |                                             +-----+  |   |\nN--|---------------------------------------------| >=1 |--|   |\n   |                       S_FF                  |     |  +---+\nR--+                      +----+                 |     |\n   |                      | RS |                 |     |   NOTE 1\nS--|----------------------|S Q1|-----------------|     |   Instances of this\n   +----------------------|R1  |                 |     |   function block\n   |                      +----+  +---+          |     |   are not visible\nL--|---------+--------------------| & |----------|     |   to the user\n   |         |       L_T"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 250,
    "text": "|     |   function block\n   |                      +----+  +---+          |     |   are not visible\nL--|---------+--------------------| & |----------|     |   to the user\n   |         |       L_TMR    +--O|   |          |     |\n   |         |      +-----+   |   +---+          |     |   NOTE 2\n   |         |      | TON |   |                  |     |   The external\n   |         +------|IN  Q|---+      D_TMR       |     |   interface of this\n   |  +-------------|PT   |         +-----+      |     |   function block type\n   |  |             +-----+         | TON |      |     |   is given in figure\nD--|--|-----------------------------|IN  Q|------|     |   14 a)\n   |  +-----------------------------|PT   |      |     |\n   |  |              P_TRIG         +-----+      |     |\n   |  |            +--------+                    |     |\n   |  |            | R_TRIG |                    |     |\nP--|--|------------|CLK    Q|--------------------|     |\n   |  |    SD_FF   +--------+   SD_TMR           |     |\n   |  |   +----+                +-----+          |     |\n   |  |   | RS |                | TON |          |     |\nSD-|--|---|S Q1|----------------|IN  Q|----------|     |\n   +--|---|R1  |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 251,
    "text": "|     |\n   |  |   +----+                +-----+          |     |\n   |  |   | RS |                | TON |          |     |\nSD-|--|---|S Q1|----------------|IN  Q|----------|     |\n   +--|---|R1  |   +------------|PT   |          |     |\n   |  |   +----+   |   DS_TMR   +-----+  DS_FF   |     |\n   |  +------------+   +-----+          +----+   |     |\n   |  |                | TON |          | RS |   |     |\nDS-|--|----------------|IN  Q|----------|S Q1|---|     |\n   |  +----------------|PT   |      +---|R1  |   |     |\n   |  |                +-----+      |   +----+   |     |\n   +--|-----------------------------+            |     |\n   |  |         SL_FF                            |     |\n   |  |        +----+                            |     |\n   |  |        | RS |                     +---+  |     |\nSL-|--|--------|S Q1|--+------------------| & |--|     |\n   +--|--------|R1  |  |     SL_TMR   +--O|   |  +-----+\n      |        +----+  |    +-----+   |   +---+\n      |                |    | TON |   |\n      |                +----|IN  Q|---+                     +-----+\nT-----+---------------------|PT   |      +--------+         | >=1 |\n                            +-----+      | F_TRIG |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 252,
    "text": "| TON |   |\n      |                +----|IN  Q|---+                     +-----+\nT-----+---------------------|PT   |      +--------+         | >=1 |\n                            +-----+      | F_TRIG |     Q---|     |---A\n                +--------+           Q---|CLK    Q|---------|     |\n                | R_TRIG |               +--------+         |     |\nP1--------------|CLK    Q|----------------------------------|     |\n                +--------+     +--------+                   |     |\n                               | F_TRIG |                   |     |\nP0-----------------------------|CLK    Q|-------------------|     |\n                               +--------+                   +-----+\nFigure 15 a) - ACTION_CONTROL function block body with “final scan” logic\nIEC   2486/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 97 –\n                                                          +---+\n   +-----------------------------------------------------O| & |---Q\n   |                                             +-----"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 253,
    "text": "03(E) – 97 –\n                                                          +---+\n   +-----------------------------------------------------O| & |---Q\n   |                                             +-----+  |   |\nN--|---------------------------------------------| >=1 |--|   |\n   |                       S_FF                  |     |  +---+\nR--+                      +----+                 |     |\n   |                      | RS |                 |     |   NOTE 1 -\nS--|----------------------|S Q1|-----------------|     |   instances of this\n   +----------------------|R1  |                 |     |   function block\n   |                      +----+  +---+          |     |   are not visible\nL--|---------+--------------------| & |----------|     |   to the user\n   |         |       L_TMR    +--O|   |          |     |\n   |         |      +-----+   |   +---+          |     |   NOTE 2 -\n   |         |      | TON |   |                  |     |   The external\n   |         +------|IN  Q|---+      D_TMR       |     |   interface of this\n   |  +-------------|PT   |         +-----+      |     |   function block type\n   |  |             +-----+         | TON |      |     |   is given in figure\nD--|--|---"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 254,
    "text": "|     |   interface of this\n   |  +-------------|PT   |         +-----+      |     |   function block type\n   |  |             +-----+         | TON |      |     |   is given in figure\nD--|--|-----------------------------|IN  Q|------|     |   14 b)\n   |  +-----------------------------|PT   |      |     |\n   |  |              P_TRIG         +-----+      |     |\n   |  |            +--------+                    |     |\n   |  |            | R_TRIG |                    |     |\nP--|--|------------|CLK    Q|--------------------|     |\n   |  |    SD_FF   +--------+   SD_TMR           |     |\n   |  |   +----+                +-----+          |     |\n   |  |   | RS |                | TON |          |     |\nSD-|--|---|S Q1|----------------|IN  Q|----------|     |\n   +--|---|R1  |   +------------|PT   |          |     |\n   |  |   +----+   |   DS_TMR   +-----+  DS_FF   |     |\n   |  +------------+   +-----+          +----+   |     |\n   |  |                | TON |          | RS |   |     |\nDS-|--|----------------|IN  Q|----------|S Q1|---|     |\n   |  +----------------|PT   |      +---|R1  |   |     |\n   |  |                +-----+      |   +----+   |     |\n   +--|--------------------------"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 255,
    "text": "--|----------------|IN  Q|----------|S Q1|---|     |\n   |  +----------------|PT   |      +---|R1  |   |     |\n   |  |                +-----+      |   +----+   |     |\n   +--|-----------------------------+            |     |\n   |  |         SL_FF                            |     |\n   |  |        +----+                            |     |\n   |  |        | RS |                     +---+  |     |\nSL-|--|--------|S Q1|--+------------------| & |--|     |\n   +--|--------|R1  |  |     SL_TMR   +--O|   |  |     |\n      |        +----+  |    +-----+   |   +---+  |     |\n      |                |    | TON |   |          |     |\n      |                +----|IN  Q|---+          |     |\nT-----+---------------------|PT   |              |     |\n          +--------+        +-----+              |     |\n          | R_TRIG |                             |     |\nP1--------|CLK    Q|-----------------------------|     |\n          +--------+     +--------+              |     |\n                         | F_TRIG |              |     |\nP0-----------------------|CLK    Q|--------------|     |\n                         +--------+              +-----+\nFigure 15 b) - ACTION_CONTROL function block body without “final"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 256,
    "text": "|     |\nP0-----------------------|CLK    Q|--------------|     |\n                         +--------+              +-----+\nFigure 15 b) - ACTION_CONTROL function block body without “final scan” logic\nIEC   2487/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 98 – 61131-3  IEC:2003(E)\n        |\n     +-----+   +---+------------+----------------+\n     | S22 |---| N | HV_BREAKER | HV_BRKR_CLOSED |\n     +-----+   +---+------------+----------------+\n        |      | S | START_INDICATOR             |\n        |      +---+-----------------------------+\n        + HV_BRKR_CLOSED\n        |\n     +-----+   +----+---------------+\n     | S23 |---| SL | RUNUP_MONITOR |\n     +-----+   |t#1m|               |\n        |      +----+---------------+\n        |      | D  | START_WAIT    |\n        |      |t#1s|               |\n        |      +----+---------------+\n        + START_WAIT\n        |\n     +-----+   +-----+-----------------+------------------+\n     | S24 |---| N   | ADVANCE_STARTER | STARTER_ADVANCED |\n     +-----+   +-----+-----"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 257,
    "text": "----+---------------+\n        + START_WAIT\n        |\n     +-----+   +-----+-----------------+------------------+\n     | S24 |---| N   | ADVANCE_STARTER | STARTER_ADVANCED |\n     +-----+   +-----+-----------------+------------------+\n        |      | L   | START_MONITOR                      |\n        |      |t#30s|                                    |\n        |      +-----+------------------------------------+\n        + STARTER_ADVANCED\n        |\n     +-----+   +-----+-----------------+-------------------+\n     | S26 |---| N   | RETRACT_STARTER | STARTER_RETRACTED |\n     +-----+   +-----+-----------------+-------------------+\n        |\n        |\n        + STARTER_RETRACTED\n        |\n     +-----+   +-----+-----------------+\n     | S27 |---| R   | START_INDICATOR |\n     +-----+   +-----+-----------------+\n        |      | R   | RUNUP_MONITOR   |\n        |      +-----+-----------------+\nNOTE The complete SFC network and its associated declarations are not shown in this example.\nFigure 16 a) - Action control example - SFC representation\nTable 45 a) - Action control features\nNo. Description\n1 per figures 14 a) and 15 a)\n2 per figures 14 b) and 15 b)\nIEC   2488/02\nCopyright International"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 258,
    "text": ") - Action control example - SFC representation\nTable 45 a) - Action control features\nNo. Description\n1 per figures 14 a) and 15 a)\n2 per figures 14 b) and 15 b)\nIEC   2488/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 99 –\nS22.X---------------------------------------------------HV_BREAKER\nS24.X----------------------------------------------ADVANCE_STARTER\nS26.X----------------------------------------------RETRACT_STARTER\n                      START_INDICATOR_S_FF\n                            +----+\n                            | RS |\nS22.X-----------------------|S Q1|-----------------START_INDICATOR\nS27.X-----------------------|R1  |\n                            +----+\n                       START_WAIT_D_TMR\n                            +-----+\n                            | TON |\nS23.X-----------------------|IN  Q|---------------------START_WAIT\nt#1s------------------------|PT   |\n                            +-----+\nRUNUP_MONITOR_SL_FF\n        +----+\n        | RS |                                +---+\nS23.X-"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 259,
    "text": "Q|---------------------START_WAIT\nt#1s------------------------|PT   |\n                            +-----+\nRUNUP_MONITOR_SL_FF\n        +----+\n        | RS |                                +---+\nS23.X---|S Q1|--+-----------------------------| & |--RUNUP_MONITOR\nS27.X---|R1  |  |   RUNUP_MONITOR_SL_TMR  +--O|   |\n        +----+  |         +-----+         |   +---+\n                |         | TON |         |\n                +---------|IN  Q|---------+\nt#1m----------------------|PT   |\n                          +-----+\n                                             +---+\nS24.X------------+---------------------------| & |---START_MONITOR\n                 | START_MONITOR_L_TMR  +---O|   |\n                 |        +-----+       |    +---+\n                 |        | TON |       |\n                 +--------|IN  Q|-------+\nt#30s---------------------|PT   |\n                          +-----+\nFigure 16 b) - Action control example - functional equivalent\n2.6.5  Rules of evolution\nThe initial situation of a SFC network is characterized by the initial step  which is in the active state\nupon initialization of the program or function block containing the network.\nEvolutions of the active states of s"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 260,
    "text": "on of a SFC network is characterized by the initial step  which is in the active state\nupon initialization of the program or function block containing the network.\nEvolutions of the active states of steps shall take place along the directed links when caused by the\nclearing of one or more transitions.\nA transition is enabled when all the preceding steps, connected to the corresponding transition symbol\nby directed links, are active.  The  clearing of a transition occurs when the transition is enabled and\nwhen the associated transition condition is true.\nThe clearing of a transition causes the deactivation (or \"resetting\") of all the immediately preceding\nsteps connected to the corresponding transition symbol by directed links, followed by the activation of\nall the immediately following steps.\nIEC   2489/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 100 – 61131-3  IEC:2003(E)\nThe alternation step/transition and transition/step shall always be maintained in SFC element\nconnections, that is:\n- Two steps shall never be directly"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 261,
    "text": "-`,,`,,`,`,,`---\n\n– 100 – 61131-3  IEC:2003(E)\nThe alternation step/transition and transition/step shall always be maintained in SFC element\nconnections, that is:\n- Two steps shall never be directly linked; they shall always be separated by a transition.\n- Two transitions shall never be directly linked; they shall always be separated by a step.\nWhen the clearing of a transition leads to the activation of several steps at the same time, the\nsequences to which these steps belong are called \nsimultaneous sequences.  After their simultaneous\nactivation, the evolution of each of these sequences becomes independent.  In order to emphasize the\nspecial nature of such constructs, the divergence and convergence of simultaneous sequences shall\nbe indicated by a double horizontal line.\nIt shall be an \nerror if the possibility can arise that non-prioritized transitions in a selection divergence,\nas shown in feature 2a of table 46, are simultaneously true. The user may make provisions to avoid\nthis error as shown in features 2b and 2c of table 46.\nTable 46 defines the syntax and semantics of the allowed combinations of steps and transitions.\nThe clearing time of a transition may theoretically b"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 262,
    "text": "error as shown in features 2b and 2c of table 46.\nTable 46 defines the syntax and semantics of the allowed combinations of steps and transitions.\nThe clearing time of a transition may theoretically be considered as short as one may wish, but it can\nnever be zero. In practice, the clearing time will be imposed by the programmable controller\nimplementation.  For the same reason, the duration of a step activity can never be considered to be\nzero.\nSeveral transitions which can be cleared simultaneously shall be cleared simultaneously, within the\ntiming constraints of the particular programmable controller implementation and the priority constraints\ndefined in table 46.\nTesting of the successor transition condition(s) of an active step shall not be performed until the\neffects of the step activation have propagated throughout the program organization unit in which the\nstep is declared.\nFigure 17 illustrates the application of these rules.  In this figure, the active state of a step is indicated\nby the presence of an asterisk (*) in the corresponding block.  This notation is used for illustration only,\nand is not a required language feature.\nThe application of the rules given in this sub"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 263,
    "text": "ated\nby the presence of an asterisk (*) in the corresponding block.  This notation is used for illustration only,\nand is not a required language feature.\nThe application of the rules given in this subclause cannot prevent the formulation of “unsafe” SFCs,\nsuch as the one shown in figure 18 a), which may exhibit uncontrolled proliferation of tokens.\nLikewise, the application of these rules cannot prevent the formulation of “unreachable” SFCs, such as\nthe one shown in figure 18 b), which may exhibit “locked up” behavior.  The programmable controller\nsystem shall treat the existence of such conditions as \nerrors as defined in 1.5.1.\nThe maximum allowed widths of the “divergence” and “convergence” constructs in table 46 are\nimplementation-dependent parameters.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 101 –\nTable 46 - Sequence evolution\nNo. Example Rule\n1 |\n+----+\n| S3 |\n+----+\n|\n  + c\n|\n+----+\n| S4 |\n+----+\n|\nSingle sequence:\nThe alternation step-transition is repeated in\nseries.\nExample:\nAn evolution from"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 264,
    "text": "le 46 - Sequence evolution\nNo. Example Rule\n1 |\n+----+\n| S3 |\n+----+\n|\n  + c\n|\n+----+\n| S4 |\n+----+\n|\nSingle sequence:\nThe alternation step-transition is repeated in\nseries.\nExample:\nAn evolution from step S3 to step S4 shall take\nplace if and only if step S3 is in the active state\nand the transition condition c is true.\n2a |\n+----+\n| S5 |\n +----+\n|\n     +-----*----+--...\n|          |\n  + e        + f\n|          |\n+----+      +----+\n| S6 |      | S8 |\n+----+      +----+\n|          |\nDivergence of sequence selection:\nA selection between several sequences is\nrepresented by as many transition symbols, under\nthe horizontal line, as there are different possible\nevolutions.  The asterisk denotes left-to-right\npriority of transition evaluations.\nExample:\nAn evolution shall take place from S5 to S6 only if\nS5 is active and the transition condition e is true,\nor from S5 to S8 only if S5 is active and f is true\nand e is false.\n2b  |\n +----+\n | S5 |\n +----+\n |\n      +-----*-----+--...\n  |2          |1\n   + e         + f\n |           |\n +----+      +----+\n | S6 |      | S8 |\n +----+      +----+\n |           |\nDivergence of sequence selection:\nThe asterisk, followed by numbered  branches,\nindic"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 265,
    "text": "|1\n   + e         + f\n |           |\n +----+      +----+\n | S6 |      | S8 |\n +----+      +----+\n |           |\nDivergence of sequence selection:\nThe asterisk, followed by numbered  branches,\nindicates a user-defined priority of transition\nevaluation, with the lowest-numbered branch\nhaving the highest priority.\nExample:\nAn evolution shall take place from S5 to S8 only if\nS5 is active and the transition condition f is true,\nor from S5 to S6 only if S5 is active, and e is true,\nand f is false.\n2c   |\n  +----+\n  | S5 |\n  +----+\n  |\n     +------+----+--...\n|           |\n         +e          +NOT e & f\n|           |\n+----+      +----+\n| S6 |      | S8 |\n+----+      +----+\n|           |\nDivergence of sequence selection:\nThe connection of the branch indicates that the\nuser must assure that transition conditions are\nmutually exclusive, as specified by IEC 60848.\nExample:\nAn evolution shall take place from S5 to S6 only if\nS5 is active and the transition condition e is true,\nor from S5 to S8 only if S5 is active and e is false\nand f is true.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted w"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 266,
    "text": "only if S5 is active and e is false\nand f is true.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 102 – 61131-3  IEC:2003(E)\nTable 46 - Sequence evolution\nNo. Example Rule\n3 |           |\n+----+      +----+\n| S7 |      | S9 |\n+----+      +----+\n|           |\n  + h         + j\n|           |\n     +-----+-----+--...\n|\n+----+\n|S10 |\n+----+\n|\nConvergence of sequence selection:\nThe end of a sequence selection is\nrepresented by as many transition\nsymbols, above the horizontal line, as there are\nselection paths to be ended.\nExample:\nAn evolution shall take place\nfrom S7 to S10 only if S7 is active and the\ntransition condition h is true, or from S9 to S10\nonly if S9 is active and j is true.\n4 |\n+----+\n|S11 |\n+----+\n|\n  + b\n|\n   ==+=====+=====+==...\n|           |\n+----+      +----+\n| S12|      | S14|\n+----+      +----+\n|           |\nSimultaneous sequences - divergence:\nOnly one common transition symbol shall be\npossible, above the double horizontal line of\nsynchronization.\nExample:\nAn evolution shall take place from S11 to S12,\nS14,... o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 267,
    "text": "eous sequences - divergence:\nOnly one common transition symbol shall be\npossible, above the double horizontal line of\nsynchronization.\nExample:\nAn evolution shall take place from S11 to S12,\nS14,... only if S11 is active and the transition\ncondition “b” associated to the common transition\nis true.  After the simultaneous activation of S12,\nS14, etc., the evolution of each sequence\nproceeds independently.\n|           |\n+----+      +----+\n| S13|      | S15|\n+----+      +----+\n|           |\n   ==+=====+=====+==...\n|\n  + d\n|\n+----+\n|S16 |\n+----+\n|\nSimultaneous sequences - convergence:\nOnly one common transition symbol shall be\npossible, under the double horizontal line of\nsynchronization.\nExample:\nAn evolution shall take place from S13,  S15,... to\nS16 only if all steps above and connected to the\ndouble horizontal line are active and the transition\ncondition “d” associated to the common transition\nis true.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 103 –\nTable 46 - Sequence evolution\nNo. Example Rule\n5a\n5b\n5"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 268,
    "text": "ith IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 103 –\nTable 46 - Sequence evolution\nNo. Example Rule\n5a\n5b\n5c\n   |\n   +-----+\n   | S30 |\n   +-----+\n   |\n   +---*---+\n   |       |\n    + a     +d\n   |       |\n+-----+    |\n| S31 |    |\n+-----+    |\n   |       |\n   + b     |\n   |       |\n+-----+    |\n| S32 |    |\n+-----+    |\n   |       |\n   + c     |\n   |       |\n   +---+---+\n   |\n   +-----+\n   | S33 |\n   +-----+\n   |\nSequence skip:\nA “sequence skip” is a special case of\nsequence selection (feature 2) in which one or\nmore of the branches contain no steps. features\n5a, 5b, and 5c correspond to the representation\noptions given in features 2a, 2b, and 2c,\nrespectively.\nExample:\n(feature 5a shown)\nAn evolution shall take place from S30 to S33 if\n“a” is false and “d” is true, that is, the sequence\n(S31, S32) will be skipped.\n6a\n6b\n6c\n|\n+-----+\n| S30 |\n+-----+\n|\n  + a\n|\n          +---------+\n          |         |\n       +-----+      |\n       | S31 |      |\n       +-----+      |\n          |         |\n          + b       |\n          |         |\n       +-----+      |\n       | S32 |      |\n       +-----+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 269,
    "text": "|\n       +-----+      |\n       | S31 |      |\n       +-----+      |\n          |         |\n          + b       |\n          |         |\n       +-----+      |\n       | S32 |      |\n       +-----+      |\n          |         |\n          *-----+   |\n          |     |   |\n          + c   + d |\n          |     |   |\n       +-----+  +---+\n| S33 |\n+-----+\n|\nSequence loop:\nA “sequence loop” is a special case of sequence\nselection (feature 2) in which one or more of the\nbranches returns to a preceding step.  Features\n6a, 6b, and 6c correspond to the representation\noptions given in features 2a, 2b, and 2c,\nrespectively.\nExample:\n(feature 6a shown)\nAn evolution shall take place from S32 to S31 if\n“c” is false and “d” is true, that is, the sequence\n(S31, S32) will be repeated.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 104 – 61131-3  IEC:2003(E)\nTable 46 - Sequence evolution\nNo. Example Rule\n7 |\n+-----+\n| S30 |\n+-----+\n|\n  + a\n|\n          +----<----+\n          |         |\n       +-----+      |\n       | S31 |      |\n       +-----+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 270,
    "text": "EC:2003(E)\nTable 46 - Sequence evolution\nNo. Example Rule\n7 |\n+-----+\n| S30 |\n+-----+\n|\n  + a\n|\n          +----<----+\n          |         |\n       +-----+      |\n       | S31 |      |\n       +-----+      |\n          |         |\n          + b       |\n          |         |\n       +-----+      |\n       | S32 |      |\n       +-----+      |\n          |         |\n          *-----+   |\n          |     |   |\n          + c   + d |\n          |     |   |\n       +-----+  +->-+\n| S33 |\n+-----+\n|\nDirectional arrows:\nWhen necessary for clarity, the “less than”  (<)\ncharacter of the character set defined in 2.1.1 can\nbe used to indicate right-to-left control flow, and\nthe “greater than” (>) character to represent left-\nto-right control flow.  When this feature is used,\nthe corresponding character shall be located\nbetween two “-” characters, that is, in the\ncharacter sequence “-<-” or “->-” as shown in the\naccompanying example.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 105 –\na) Transition not\nenabled\n(X = 0 or 1)\n    |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 271,
    "text": "license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 105 –\na) Transition not\nenabled\n(X = 0 or 1)\n    |                  |        |         |\n+------+            +-----+  +------+  +------+\n|STEP10|            |STEP9|  |STEP13|  |STEP22|\n|      |            |     |  |  *   |  |  *   |\n+------+            +-----+  +------+  +------+\n    |                  |        |         |\n    + X            ====+========+=========+====\n    |                           |\n+------+                        + X\n|STEP11|                        |\n|      |               ====+====+===+====\n+------+                   |        |\n    |                  +------+  +------+\n                       |STEP15|  |STEP16|\n                       |      |  |      |\n                       +------+  +------+\n                           |        |\nb) Transition enabled\nbut not cleared\n(X = 0 )\n    |                 |        |         |\n+------+           +-----+  +------+  +------+\n|STEP10|           |STEP9|  |STEP13|  |STEP22|\n|  *   |           |  *  |  |  *   |  |  *   |\n+------+           +-----+  +------+  +------+\n    |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 272,
    "text": "|\n+------+           +-----+  +------+  +------+\n|STEP10|           |STEP9|  |STEP13|  |STEP22|\n|  *   |           |  *  |  |  *   |  |  *   |\n+------+           +-----+  +------+  +------+\n    |                 |        |         |\n    + X            ===+========+=========+====\n    |                          |\n+------+                       + X\n|STEP11|                       |\n|      |              ====+====+====+====\n+------+                  |         |\n    |                  +------+  +------+\n                       |STEP15|  |STEP16|\n                       |      |  |      |\n                       +------+  +------+\n                          |         |\nc) Transition\ncleared\n (X = 1 )\n    |                  |        |         |\n+------+            +-----+  +------+  +------+\n|STEP10|            |STEP9|  |STEP13|  |STEP22|\n|      |            |     |  |      |  |      |\n+------+            +-----+  +------+  +------+\n    |                  |        |         |\n    + X            ====+========+=========+====\n    |                           |\n+------+                        + X\n|STEP11|                        |\n|  *   |               ====+====+===+====\n+------+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 273,
    "text": "==+========+=========+====\n    |                           |\n+------+                        + X\n|STEP11|                        |\n|  *   |               ====+====+===+====\n+------+                   |        |\n    |                  +------+  +------+\n                       |STEP15|  |STEP16|\n                       |   *  |  |  *   |\n                       +------+  +------+\n                           |        |\nNOTE In this figure, the active state of a step is indicated by the presence of an asterisk ( *) in\nthe corresponding block.  This notation is used for illustration only, and is not a required\nlanguage feature.\nFigure 17 - Examples of SFC evolution rules\nIEC   2490/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 106 – 61131-3  IEC:2003(E)\n+----------------------+\n|                      |\n|                   +=====+\n|                   || A ||\n|                   +=====+\n|                      |\n|                      + t1\n|                      |\n|     ======+==========+============+=======\n|           |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 274,
    "text": "|| A ||\n|                   +=====+\n|                      |\n|                      + t1\n|                      |\n|     ======+==========+============+=======\n|           |                       |\n|        +-----+                 +-----+\n|        |  B  |                 |  C  |\n|        +-----+                 +-----+\n|           |                       |\n|           |                       *--------+\n|           |                       |        |\n|           |                       + t2     + t3\n|           |                       |        |\n|           |                     +---+    +---+\n|           |                     | D |    | E |\n|           |                     +---+    +---+\n|           |                       |        |\n|        ===+==========+============+===     |\n|                      |                     |\n|                      + t4                  + t5\n|                      |                     |\n|                    +---+                 +---+\n|                    | F |                 | G |\n|                    +---+                 +---+\n|                      |                     |\n|                      + t6                  + t7\n|"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 275,
    "text": "| F |                 | G |\n|                    +---+                 +---+\n|                      |                     |\n|                      + t6                  + t7\n|                      |                     |\n+----------------------+---------------------+\nFigure 18 a) - Examples of SFC errors: an “unsafe” SFC\n(see 2.6.5)\nIEC   2491/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 107 –\n+----------------------+\n|                      |\n|                   +=====+\n|                   || A ||\n|                   +=====+\n|                      |\n|                      + t1\n|                      |\n|     ======+==========+============+=======\n|           |                       |\n|        +-----+                 +-----+\n|        |  B  |                 |  C  |\n|        +-----+                 +-----+\n|           |                       |\n|           |                       *--------+\n|           |                       |        |\n|           |                       + t2     + t3\n|"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 276,
    "text": "+-----+\n|           |                       |\n|           |                       *--------+\n|           |                       |        |\n|           |                       + t2     + t3\n|           |                       |        |\n|           |                     +---+    +---+\n|           |                     | D |    | E |\n|           |                     +---+    +---+\n|           |                       |        |\n|        ===+==========+============+===     |\n|                      |                     |\n|                      + t4                  + t5\n|                      |                     |\n|                    +---+                 +---+\n|                    | F |                 | G |\n|                    +---+                 +---+\n|                      |                     |\n|                  ====+==========+==========+===\n|                                 |\n|                                 + t6\n|                                 |\n+---------------------------------+\nFigure 18 b) - Examples of SFC errors: an “unreachable” SFC\n(see 2.6.5)\n2.6.6  Compatibility of SFC elements\nSFCs can be represented graphically or textually, utilizing the element"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 277,
    "text": "------------------+\nFigure 18 b) - Examples of SFC errors: an “unreachable” SFC\n(see 2.6.5)\n2.6.6  Compatibility of SFC elements\nSFCs can be represented graphically or textually, utilizing the elements defined above.  Table 47\nsummarizes for convenience those elements which are mutually compatible for graphical and textual\nrepresentation, respectively.\nIEC   2492/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 108 – 61131-3  IEC:2003(E)\nTable 47 - Compatible SFC features\nTable Graphical representation Textual representation\n40 1, 3a, 3b, 4 2, 3a, 4\n41 1, 2, 3, 4, 4a, 4b, 7, 7a, 7b 5, 6, 7c, 7d\n42 1, 2l, 2s, 2f 3s, 3i\n43 1, 2, 4 3\n44 1 to 9 --\n45 1 to 10 1 to 10 (textual equivalent)\n46 1 to 7 1 to 6\n57 All --\n2.6.7  SFC Compliance requirements\nIn order to claim compliance with the requirements of 2.6, the elements shown in table 48 shall be\nsupported and the compatibility requirements defined in 2.6.6 shall be observed.\nTable 48 - SFC minimal compliance requirements\nTable Graphical representation Textual representation\n40 1 2\n4"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 278,
    "text": "shall be\nsupported and the compatibility requirements defined in 2.6.6 shall be observed.\nTable 48 - SFC minimal compliance requirements\nTable Graphical representation Textual representation\n40 1 2\n41 1 or 2 or 3 or (4 and (4a or 4b))\n or (7 and (7a or 7b or 7c or 7d))\n5 or 6\n42 1 or 2l or 2f 1 or 3s or 3i\n43 1 or 2 or 4 3\n45 1 or 2 1 or 2\n46 1 and (2a or 2b or 2c) and 3 and 4 Same (textual equivalent)\n57 (1 or 2) and (3 or 4) and (5 or 6) and\n(7 or 8) and (9 or 10) and (11 or 12)\nNot required\n2.7  Configuration elements\nAs described in 1.4.1, a configuration consists of resources, tasks  (which are defined within\nresources), global variables , access paths  and instance specific initializations.  Each of these\nelements is defined in detail in this subclause.\nA graphic example of a simple configuration is shown in figure 19 a). Skeleton declarations for the\ncorresponding function blocks and programs are given in figure 19 b). This figure serves as a\nreference point for the examples of configuration elements given in the remainder of this subclause\nsuch as in figure 20.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo rep"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 279,
    "text": "configuration elements given in the remainder of this subclause\nsuch as in figure 20.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 109 –\nCONFIGURATION CELL_1\nRESOURCE STATION_1\nF G\nB\nRESOURCE STATION_2\nC D\nGLOBAL AND DIRECTLY REPRESENTED VARIABLES\nAND INSTANCE-SPECIFIC INITIALIZATIONS\nACCESS PATHS\nTASK\nSLOW_1\nP1 P2 P1 P4\nx1 y1\ny2\nFB2\nFB1 FB2\nz1\nx2\nFAST_1SLOW_1\nBAKER ABLE CHARLIE DOG GAMMA ALPHA BETA\nx1\nx2\nPER_2\nF H\nHOUT1\nINT_2\nb1\nb2\nd1\nCommunication function (See IEC 1131-5)\nPER_2COUNT\nS1_COUNT\nTHETA\nC2\nC3\nTASK\nFAST_1\nTASK\nPER_2\nTASK\nINT_2\n%IX1.1\nA y1\nFB1\ny2\nSLOW_1\nout1\nw z2 %QW5\nZETA\n%QB25\nc1\nOMEGA\nFigure 19 a) - Graphical example of a configuration\nIEC   2493/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 110 – 61131-3  IEC:2003(E)\nFUNCTION_BLOCK A\n  VAR_OUTPUT\n    y1 : UINT ; y2 : BYTE ;\n  END_VAR\nEND_FUNCTION_BLOCK\nFUNCTION_BLOCK B\n  VAR_INPUT"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 280,
    "text": "without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 110 – 61131-3  IEC:2003(E)\nFUNCTION_BLOCK A\n  VAR_OUTPUT\n    y1 : UINT ; y2 : BYTE ;\n  END_VAR\nEND_FUNCTION_BLOCK\nFUNCTION_BLOCK B\n  VAR_INPUT\n    b1 : UINT ; b2 : BYTE ;\n  END_VAR\nEND_FUNCTION_BLOCK\nFUNCTION_BLOCK C\n  VAR_OUTPUT c1 : BOOL ; END_VAR\n  VAR C2 AT %Q*: BYTE;\n      C3: INT;\n  END_VAR\nEND_FUNCTION_BLOCK\nFUNCTION_BLOCK D\n   VAR_INPUT d1 : BOOL ; END_VAR\n   VAR_OUTPUT y2 : INT ; END_VAR\nEND_FUNCTION_BLOCK\n    PROGRAM F\n      VAR_INPUT  x1 : BOOL ;  x2 : UINT ; END_VAR\n      VAR_OUTPUT y1 : BYTE ; END_VAR\n      VAR COUNT: INT; TIME1: TON; END_VAR\n    END_PROGRAM\n    PROGRAM G\n      VAR_OUTPUT out1 : UINT ;  END_VAR\n      VAR_EXTERNAL z1 : BYTE ;  END_VAR\n      VAR  FB1 : A ;  FB2 : B ; END_VAR\n      FB1(...);  out1 := FB1.y1;  z1 := FB1.y2;\n      FB2(b1 := FB1.y1, b2 := FB1.y2) ;\n    END_PROGRAM\n    PROGRAM H\n      VAR_OUTPUT HOUT1: INT ;  END_VAR\n      VAR  FB1 : C ;  FB2 : D ; END_VAR\n      FB1(...) ;\n      FB2(...);  HOUT1 := FB2.y2;\n    END_PROGRAM\nFigure 19 b) - Skeleton function block and program declarations for configuration example\n2.7.1  Configurations, resources, and access paths\nTable 49 enumerates the lan"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 281,
    "text": "OUT1 := FB2.y2;\n    END_PROGRAM\nFigure 19 b) - Skeleton function block and program declarations for configuration example\n2.7.1  Configurations, resources, and access paths\nTable 49 enumerates the language features for declaration of configurations, resources, global\nvariables, access paths and instance specific initializations.  Partial enumeration of TASK declaration\nfeatures is also given; additional information on tasks is provided in 2.7.2.  The formal syntax for these\nfeatures is given in B.1.7. Figure 20 provides examples of these features, corresponding to the\nexample configuration shown in figure 19 a) and the supporting declarations in figure 19 b).\nThe ON qualifier in the RESOURCE...ON...END_RESOURCE construction is used to specify the type of\n“processing function” and its “man-machine interface” and “sensor and actuator interface” functions\nupon which the resource and its associated programs and tasks are to be implemented. The\nmanufacturer shall supply an implementation-dependent resource library  of such functions, as\nillustrated in figure 3. Associated with each element in this library shall be an identifier (the resource\ntype name) for use in resource declaration.\nN"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 282,
    "text": "pendent resource library  of such functions, as\nillustrated in figure 3. Associated with each element in this library shall be an identifier (the resource\ntype name) for use in resource declaration.\nNOTE The RESOURCE...ON...END_RESOURCE construction is not required in a configuration\nwith a single resource.  See the production single_resource_declaration in B.1.7\nfor the syntax to be used in this case.\nIEC   2494/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 111 –\nThe scope of a VAR_GLOBAL declaration shall be limited to the configuration or resource in which it is\ndeclared, with the exception that an access path can be declared to a global variable in a resource\nusing feature 10d in table 49.\nThe VAR_ACCESS...END_VAR construction provides a means of specifying variable names which\ncan be used for remote access by some of the communication services specified in IEC 61131-5.  An\naccess path associates each such variable name with a global variable, a directly represented variable\nas defined in 2.4.1.1, or"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 283,
    "text": "ess by some of the communication services specified in IEC 61131-5.  An\naccess path associates each such variable name with a global variable, a directly represented variable\nas defined in 2.4.1.1, or any input, output, or internal variable of a program or function block.\nThe association shall be accomplished by qualifying the name of the variable with the complete\nhierarchical concatenation of instance names, beginning with the name of the resource (if any),\nfollowed by the name of the program instance (if any), followed by the name(s) of the function block\ninstance(s) (if any). The name of the variable is concatenated at the end of the chain. All names in the\nconcatenation shall be separated by dots. If such a variable is a \nmulti-element variable  (structure or\narray), an access path can also be specified to an element of the variable.\nIt shall not be possible to define access paths  to variables that are declared in VAR_TEMP,\nVAR_EXTERNAL or VAR_IN_OUT declarations.\nThe direction of the access path can be specified as READ_WRITE or READ_ONLY, indicating that the\ncommunication services can both read and modify the value of the variable in the first case, or read\nbut not modify t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 284,
    "text": "f the access path can be specified as READ_WRITE or READ_ONLY, indicating that the\ncommunication services can both read and modify the value of the variable in the first case, or read\nbut not modify the value in the second case. If no direction is specified, the default direction is\nREAD_ONLY.\nAccess to variables that are declared CONSTANT or to function block inputs that are externally\nconnected to other variables shall be READ_ONLY.\nNOTE The effect of using READ_WRITE access to function block output variables is\nimplementation-dependent.\nThe VAR_CONFIG...END_VAR construction provides a means to assign instance specific locations to\nsymbolically represented variables, which are nominated for the respective purpose by using the\nasterisk notation described in 2.4.1.1 and 2.4.3.1, respectively, or to assign instance specific initial\nvalues to symbolically represented variables, or both.\nThe assignment shall be accomplished by qualifying the name of the object to be located or initialized\nwith the complete hierarchical concatenation of instance names, beginning with the name of the\nresource (if any), followed by the name of the program instance, followed by the name(s) of the\nfunction"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 285,
    "text": "with the complete hierarchical concatenation of instance names, beginning with the name of the\nresource (if any), followed by the name of the program instance, followed by the name(s) of the\nfunction block instance(s) (if any). The name of the object to be located or initialized is concatenated\nat the end of the chain. All names in the concatenation shall be separated by dots. The location\nassignment or the initial value assignment follows the syntax and the semantics described in 2.4.3.1\nand 2.4.3.2 respectively.\nInstance specific initial values provided by the \nVAR_CONFIG...END_VAR construction always\noverride type specific initial values. It shall not be possible to define instance specific initializations to\nvariables which are declared in VAR_TEMP, VAR_EXTERNAL, VAR CONSTANT  or VAR_IN_OUT\ndeclarations.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 112 – 61131-3  IEC:2003(E)\nTable 49 - Configuration and resource declaration features\nNo. Description\n1 CONFIGURATION...END_CONFIGURATION construction\n2 VAR_GLOBAL...END_VAR co"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 286,
    "text": "`-`-`,,`,,`,`,,`---\n\n– 112 – 61131-3  IEC:2003(E)\nTable 49 - Configuration and resource declaration features\nNo. Description\n1 CONFIGURATION...END_CONFIGURATION construction\n2 VAR_GLOBAL...END_VAR construction within CONFIGURATION\n3 RESOURCE...ON...END_RESOURCE construction\n4 VAR_GLOBAL...END_VAR construction within RESOURCE\n5a Periodic TASK construction (see note 1)\n5b Non-periodic TASK construction (see note 1)\n6a WITH construction for PROGRAM to TASK association (see note 1)\n6b WITH construction for Function Block to TASK association (see note 1)\n6c PROGRAM declaration with no TASK association (see note 1)\n7 Declaration of directly represented variables in VAR_GLOBAL (see note 2)\n8a Connection of directly represented variables to PROGRAM inputs\n8b Connection of GLOBAL variables to PROGRAM inputs\n9a Connection of PROGRAM outputs to directly represented variables\n9b Connection of PROGRAM outputs to GLOBAL variables\n10a VAR_ACCESS...END_VAR construction\n10b Access paths to directly represented variables\n10c Access paths to PROGRAM inputs\n10d Access paths to GLOBAL variables in RESOURCEs\n10e Access paths to GLOBAL variables in CONFIGURATIONs\n10f Access paths to PROGRAM outputs\n10g"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 287,
    "text": "presented variables\n10c Access paths to PROGRAM inputs\n10d Access paths to GLOBAL variables in RESOURCEs\n10e Access paths to GLOBAL variables in CONFIGURATIONs\n10f Access paths to PROGRAM outputs\n10g Access paths to PROGRAM internal variables\n10h Access paths to function block inputs\n10i Access paths to function block outputs\n11 VAR_CONFIG...END_VAR constructiona\n12a VAR_GLOBAL CONSTANT in RESOURCE declarations\n12b VAR_GLOBAL CONSTANT in CONFIGURATION declarations\n13a VAR_EXTERNAL in RESOURCE declarations\n13b VAR_EXTERNAL CONSTANT in RESOURCE declarations\nNOTE 1 See 2.7.2 for further descriptions of TASK features.\nNOTE 2 See 2.4.3.1 for further descriptions of related features.\na This feature shall be supported if feature 10 in table 15 is supported.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 113 –\nFigure 20 - Examples of CONFIGURATION and RESOURCE declaration features\nNo. Example\n1 CONFIGURATION CELL_1\n2   VAR_GLOBAL  w: UINT;  END_VAR\n3   RESOURCE STATION_1 ON PROCESSOR_TYPE_1\n4     VAR_GLOBAL  z1: BYT"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 288,
    "text": "- Examples of CONFIGURATION and RESOURCE declaration features\nNo. Example\n1 CONFIGURATION CELL_1\n2   VAR_GLOBAL  w: UINT;  END_VAR\n3   RESOURCE STATION_1 ON PROCESSOR_TYPE_1\n4     VAR_GLOBAL  z1: BYTE;  END_VAR\n5a     TASK SLOW_1(INTERVAL := t#20ms, PRIORITY := 2) ;\n5a     TASK FAST_1(INTERVAL := t#10ms, PRIORITY := 1) ;\n6a\n8a\n    PROGRAM P1 WITH SLOW_1 :\n                 F(x1 := %IX1.1) ;\n9b     PROGRAM P2 : G(OUT1 => w,\n6b                    FB1 WITH SLOW_1,\n6b                    FB2 WITH FAST_1)  ;\n3   END_RESOURCE\n3   RESOURCE STATION_2 ON PROCESSOR_TYPE_2\n4     VAR_GLOBAL  z2      : BOOL ;\n7                 AT %QW5 : INT  ;\n4     END_VAR\n5a     TASK PER_2(INTERVAL := t#50ms, PRIORITY := 2) ;\n5b     TASK INT_2(SINGLE := z2,       PRIORITY := 1) ;\n6a\n8b\n    PROGRAM P1 WITH PER_2 :\n          F(x1 := z2, x2 := w)  ;\n6a\n9a\n    PROGRAM P4 WITH INT_2 :\n          H(HOUT1 => %QW5,\n6b             FB1 WITH  PER_2);\n3   END_RESOURCE\n10a   VAR_ACCESS\n10b     ABLE    : STATION_1.%IX1.1    : BOOL READ_ONLY  ;\n10c     BAKER   : STATION_1.P1.x2     : UINT READ_WRITE ;\n10d     CHARLIE : STATION_1.z1        : BYTE            ;\n10e     DOG     : w                   : UINT READ_ONLY  ;\n10f     AL"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 289,
    "text": "OL READ_ONLY  ;\n10c     BAKER   : STATION_1.P1.x2     : UINT READ_WRITE ;\n10d     CHARLIE : STATION_1.z1        : BYTE            ;\n10e     DOG     : w                   : UINT READ_ONLY  ;\n10f     ALPHA   : STATION_2.P1.y1     : BYTE READ_ONLY  ;\n10f     BETA    : STATION_2.P4.HOUT1  : INT READ_ONLY   ;\n10d     GAMMA   : STATION_2.z2        : BOOL READ_WRITE ;\n10g     S1_COUNT : STATION_1.P1.COUNT : INT;\n10h     THETA : STATION_2.P4.FB2.d1 : BOOL READ_WRITE;\n10i     ZETA : STATION_2.P4.FB1.c1 : BOOL READ_ONLY;\n10k     OMEGA : STATION_2.P4.FB1.C3 : INT READ_WRITE;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 114 – 61131-3  IEC:2003(E)\nFigure 20 - Examples of CONFIGURATION and RESOURCE declaration features\nNo. Example\n10a   END_VAR\n11   VAR_CONFIG\n    STATION_1.P1.COUNT : INT := 1;\n    STATION_2.P1.COUNT : INT := 100;\n    STATION_1.P1.TIME1 : TON := (PT := T#2.5s);\n    STATION_2.P1.TIME1 : TON := (PT := T#4.5s);\n    STATION_2.P4.FB1.C2 AT %QB25 : BYTE;\n  END_VAR\n1 END_CONFIGURATION\nNOTE 1 Graphical and semigraphic representatio"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 290,
    "text": ".P1.TIME1 : TON := (PT := T#2.5s);\n    STATION_2.P1.TIME1 : TON := (PT := T#4.5s);\n    STATION_2.P4.FB1.C2 AT %QB25 : BYTE;\n  END_VAR\n1 END_CONFIGURATION\nNOTE 1 Graphical and semigraphic representation of these features is allowed but is\nbeyond the scope of this part of IEC 61131.\nNOTE 2 It is an error if the data type declared for a variable in a VAR_ACCESS\nstatement is not the same as the data type declared for the variable elsewhere,\ne.g., if variable BAKER is declared of type WORD in the above examples.\n2.7.2  Tasks\nFor the purposes of this part of IEC 61131, a task is defined as an execution control element which is\ncapable of invoking, either on a periodic basis or upon the occurrence of the rising edge of a specified\nBoolean variable, the execution of a set of program organization units, which can include programs\nand function blocks whose instances are specified in the declaration of programs.\nThe maximum number of tasks per resource and task interval resolution are implementation-\ndependent parameters.\nTasks and their association with program organization units can be represented graphically or\ntextually using the WITH construction, as shown in table 50, as part of resourc"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 291,
    "text": "ion-\ndependent parameters.\nTasks and their association with program organization units can be represented graphically or\ntextually using the WITH construction, as shown in table 50, as part of resources within configurations.\nA task is implicitly enabled or disabled by its associated resource according to the mechanisms\ndefined in 1.4.1.  The control of program organization units by enabled tasks shall conform to the\nfollowing rules:\n1) The associated program organization units shall be scheduled for execution upon each rising edge\nof the \nSINGLE input of the task.\n2) If the INTERVAL input is non-zero, the associated program organization units shall be scheduled\nfor execution periodically at the specified interval as long as the SINGLE input stands at zero (0).  If\nthe INTERVAL input is zero (the default value), no periodic scheduling of the associated program\norganization units shall occur.\n3) The PRIORITY input of a task establishes the scheduling priority of the associated program\norganization units, with zero (0) being highest priority and successively lower priorities having\nsuccessively higher numeric values.  As shown in table 50, the priority of a program organization\nunit"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 292,
    "text": "rganization units, with zero (0) being highest priority and successively lower priorities having\nsuccessively higher numeric values.  As shown in table 50, the priority of a program organization\nunit (that is, the priority of its associated task) can be used for preemptive or non-preemptive\nscheduling.\nIEC   2495/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 115 –\na) In non-preemptive scheduling, processing power becomes available on a resource when\nexecution of a program organization unit or operating system function is complete.  When\nprocessing power is available, the program organization unit with highest scheduled priority\nshall begin execution.  If more than one program organization unit is waiting at the highest\nscheduled priority, then the program organization unit with the longest waiting time at the\nhighest scheduled priority shall be executed.\nb) In \npreemptive scheduling, when a program organization unit is scheduled, it can interrupt the\nexecution of a program organization unit of lower prio"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 293,
    "text": "e\nhighest scheduled priority shall be executed.\nb) In \npreemptive scheduling, when a program organization unit is scheduled, it can interrupt the\nexecution of a program organization unit of lower priority on the same resource, that is, the\nexecution of the lower-priority unit can be suspended until the execution of the higher-priority\nunit is completed.  A program organization unit shall not interrupt the execution of another unit\nof the same or higher priority.\nNOTE Depending on schedule priorities, a program organization unit might not begin\nexecution at the instant it is scheduled.  However, in the examples shown in\ntable 50, all program organization units meet their \ndeadlines, that is, they all\ncomplete execution before being scheduled for re-execution.  The manufacturer\nshall provide information to enable the user to determine whether all deadlines\nwill be met in a proposed configuration.\n4) A \nprogram with no task association shall have the lowest system priority.  Any such program shall\nbe scheduled for execution upon “starting” of its  resource, as defined in 1.4.1, and shall be re-\nscheduled for execution  as soon as its execution terminates.\n5) When a function block inst"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 294,
    "text": "ram shall\nbe scheduled for execution upon “starting” of its  resource, as defined in 1.4.1, and shall be re-\nscheduled for execution  as soon as its execution terminates.\n5) When a function block instance is associated with a task, its execution shall be under the exclusive\ncontrol of the task, independent of the rules of evaluation of the program organization unit in which\nthe task-associated function block instance is declared.\n6) Execution of a function block instance  which is not directly associated with a task shall follow the\nnormal rules for the order of evaluation of language elements for the program organization unit\n(which can itself be under the control of a task) in which the function block instance is declared.\n7) The execution of function blocks within a program shall be synchronized to ensure that data\nconcurrency is achieved according to the following rules:\na) If a function block receives more than one input from another function block, then when the\nformer is executed, all inputs from the latter shall represent the results of the same evaluation.\nFor instance, in the example represented by figure 21 a), when Y2 is evaluated, the inputs Y2.A\nand Y2.B shall represe"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 295,
    "text": "d, all inputs from the latter shall represent the results of the same evaluation.\nFor instance, in the example represented by figure 21 a), when Y2 is evaluated, the inputs Y2.A\nand Y2.B shall represent the outputs Y1.C and Y1.D from the same (not two different)\nevaluations of Y1.\nb) If two or more function blocks receive inputs from the same function block, and if the\n“destination” blocks are all explicitly or implicitly associated with the same task, then the inputs\nto all such “destination” blocks at the time of their evaluation shall represent the results of the\nsame evaluation of the “source” block.  For instance, in the example represented by figures 21\nb) and 21 c), when \nY2 and Y3 are evaluated in the normal course of evaluating program P1, the\ninputs Y2.A and Y2.B shall be the results of the same evaluation of Y1 as the inputs Y3.A and\nY3.B.\nProvision shall be made for storage of the outputs of functions or function blocks which have explicit\ntask associations, or which are used as inputs to program organization units which have explicit task\nassociations, as necessary to satisfy the rules given above.\nIt shall be an \nerror in the sense of subclause 1.5.1 if a task fails t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 296,
    "text": "ed as inputs to program organization units which have explicit task\nassociations, as necessary to satisfy the rules given above.\nIt shall be an \nerror in the sense of subclause 1.5.1 if a task fails to be scheduled or to meet its\nexecution deadline because of excessive resource requirements or other task scheduling conflicts.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 116 – 61131-3  IEC:2003(E)\nTable 50 - Task features\nNo. Description/Examples\n1a Textual declaration of periodic TASK (feature 5a of table 49)\n1b Textual declaration of non-periodic TASK (feature 5b of table 49)\nGraphical representation of TASKs (general form)\n       TASKNAME\n       +---------+\n       |  TASK   |\nBOOL---|SINGLE   |\nTIME---|INTERVAL |\nUINT---|PRIORITY |\n       +---------+\n2a Graphical representation of periodic TASKs\n            SLOW_1                        FAST_1\n         +---------+                   +---------+\n         |  TASK   |                   |  TASK   |\n         |SINGLE   |                   |SINGLE   |\nt#20ms---|INTERVAL |          t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 297,
    "text": "FAST_1\n         +---------+                   +---------+\n         |  TASK   |                   |  TASK   |\n         |SINGLE   |                   |SINGLE   |\nt#20ms---|INTERVAL |          t#10ms---|INTERVAL |\n     2---|PRIORITY |               1---|PRIORITY |\n         +---------+                   +---------+\n2b Graphical representation of non-periodic TASK\n                             INT_2\n                          +---------+\n                          |  TASK   |\n                   %IX2---|SINGLE   |\n                          |INTERVAL |\n                      1---|PRIORITY |\n                          +---------+\n3a Textual association with PROGRAMs (feature 6a of table 49)\n3b Textual association with function blocks (feature 6b of table 49)\n4a Graphical association with PROGRAMs\nRESOURCE STATION_2\n        P1                  P4\n    +-------+           +-------+\n    |   F   |           |   H   |\n    |       |           |       |\n    |       |           |       |\n    +-------+           +-------+\n    | PER_2 |           | INT_2 |\n    +-------+           +-------+\nEND_RESOURCE\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 298,
    "text": "--+           +-------+\n    | PER_2 |           | INT_2 |\n    +-------+           +-------+\nEND_RESOURCE\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 117 –\nTable 50 - Task features\nNo. Description/Examples\n4b Graphical association with function blocks within PROGRAMs\nRESOURCE STATION_1\n   P2\n   +---------------------------------------------------+\n   |                         G                         |\n   |                                                   |\n   |             FB1                FB2                |\n   |          +------+           +------+              |\n   |          |   A  |           |   B  |              |\n   |          |      |           |      |              |\n   |          |      |           |      |              |\n   |          +------+           +------+              |\n   |          |SLOW_1|           |FAST_1|              |\n   |          +------+           +------+              |\n   +---------------------------------------------------+\nEND_RESOURCE\n5a Non-preemptive scheduling\nEX"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 299,
    "text": "SLOW_1|           |FAST_1|              |\n   |          +------+           +------+              |\n   +---------------------------------------------------+\nEND_RESOURCE\n5a Non-preemptive scheduling\nEXAMPLE 1:\n- RESOURCE STATION_1 as configured in figure 20\n- Execution times: P1 = 2 ms;  P2 = 8 ms;\n- P2.FB1 = P2.FB2 = 2 ms (see note 3)\n- STATION_1 starts at t = 0\nSCHEDULE (repeats every 40 ms)\nt(ms) Executing Waiting\n0 P2.FB2@1P 1 @2, P2.FB1@2, P2\n2 P1@2 P2.FB1@2, P2\n4 P2.FB1@2 P2\n6 P2\n10 P2 P2.FB2@1\n14 P2.FB2@1 P2\n16 P2 (P2 restarts)\n20 P2 P2.FB2@1, P1@2, P2.FB1@2\n24 P2.FB2@1 P1@2, P2.FB1@2, P2\n26 P1@2 P2.FB1@2, P2\n28 P2.FB1@2 P2\n30 P2.FB2@1 P2\n32 P2\n40 P2.FB2@1 P1@2, P2.FB1@2, P2\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 118 – 61131-3  IEC:2003(E)\nTable 50 - Task features\nNo. Description/Examples\n5a Non-preemptive scheduling\nEXAMPLE 2:\n- RESOURCE STATION_2 as configured in figure 20\n- Execution times:  P1 = 30 ms, P4 = 5 ms, P4.FB1 = 10 ms (see note 4)\n- INT_2 is triggered at t = 25, 50, 90, ... ms\n- STATION_2 starts at t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 300,
    "text": "XAMPLE 2:\n- RESOURCE STATION_2 as configured in figure 20\n- Execution times:  P1 = 30 ms, P4 = 5 ms, P4.FB1 = 10 ms (see note 4)\n- INT_2 is triggered at t = 25, 50, 90, ... ms\n- STATION_2 starts at t = 0\n SCHEDULE\nt(ms) Executing Waiting\n0 P1@2 P4.FB1@2\n25 P1@2 P4.FB1@2, P4@1\n30 P4@1 P4.FB1@2\n35 P4.FB1@2\n50 P4@1 P1@2, P4.FB1@2\n55 P1@2 P4.FB1@2\n85 P4.FB1@2\n90 P4.FB1@2 P4@1\n95 P4@1\n100 P1@2 P4.FB1@2\n5b Preemptive scheduling\nEXAMPLE 3:\n- RESOURCE STATION_1 as configured in figure 20\n- Execution times: P1 = 2 ms;  P2 = 8 ms;  P2.FB1 = P2.FB2 = 2 ms ( see note 3)\n- STATION_1 starts at t = 0\nSCHEDULE\nt(ms) Executing Waiting\n0 P2.FB2@1 P1@2, P2.FB1@2, P2\n2 P1@2 P2.FB1@2, P2\n4 P2.FB1@2 P2\n6 P2\n10 P2.FB2@1 P2\n12 P2\n16 P2 (P2 restarts)\n20 P2.FB2@1 P1@2, P2.FB1@2, P2\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 119 –\nTable 50 - Task features\nNo. Description/Examples\n5b Preemptive scheduling\nEXAMPLE 4:\n- RESOURCE STATION_2 as configured in figure 20\n- Execution times:  P1 = 30 ms, P4 = 5 ms, P4.FB1 = 10 ms (note 4)\n-"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 301,
    "text": "le 50 - Task features\nNo. Description/Examples\n5b Preemptive scheduling\nEXAMPLE 4:\n- RESOURCE STATION_2 as configured in figure 20\n- Execution times:  P1 = 30 ms, P4 = 5 ms, P4.FB1 = 10 ms (note 4)\n- INT_2 is triggered at t = 25, 50, 90, ... ms\n- STATION_2 starts at t = 0\nSCHEDULE\nt(ms) Executing Waiting\n0 P1@2 P4.FB1@2\n25 P4@1 P1@2, P4.FB1@2\n30 P1@2 P4.FB1@2\n35 P4.FB1@2\n50 P4@1 P1@2, P4.FB1@2\n55 P1@2 P4.FB1@2\n85 P4.FB1@2\n90 P4@1 P4.FB1@2\n95 P4.FB1@2\n100 P1@2 P4.FB1@2\nNOTE 1 Details of RESOURCE and PROGRAM declarations are not shown;  see 2.7 and\n2.7.1.\nNOTE 2 The notation X@Y indicates that program organization unit X is scheduled or\nexecuting at priority Y.\nNOTE 3 The execution times of P2.FB1 and P2.FB2 are not included in the execution\ntime of P2.\nNOTE 4 The execution time of P4.FB1 is not included in the execution time of P4.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 120 – 61131-3  IEC:2003(E)\nRESOURCE R1\n             fast1\n         +----------+\n         |   TASK   |\nt#10ms---|INTERVAL  |\n     1---|PRIORITY  |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 302,
    "text": "cense from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 120 – 61131-3  IEC:2003(E)\nRESOURCE R1\n             fast1\n         +----------+\n         |   TASK   |\nt#10ms---|INTERVAL  |\n     1---|PRIORITY  |\n         +----------+\n             slow1\n         +----------+\n         |   TASK   |\nt#20ms---|INTERVAL  |\n     2---|PRIORITY  |\n         +----------+\nP1\nPROGRAM X\n      Y1                  Y2\n    +-----+             +-----+\n    |  Y  |             |  Y  |\n ---|A   C|----+--------|A   C|---\n ---|B   D|----|--+-----|B   D|---\n    +-----+    |  |     +-----+\n    |slow1|    |  |     |fast1|\n    +-----+    |  |     +-----+\n               |  |\n               |  |     Y3\n               |  |  +-----+\n               |  |  |  Y  |\n               +--|--|A   C|---\n                  +--|B   D|---\n                     +-----+\n                     |fast1|\n                     +-----+\nEND_PROGRAM\nFigure 21 a) - Synchronization of function blocks with explicit task associations\nIEC   2496/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E)"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 303,
    "text": "al Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 121 –\nRESOURCE R1\n             fast1\n         +----------+\n         |   TASK   |\nt#10ms---|INTERVAL  |\n     1---|PRIORITY  |\n         +----------+\n             slow1\n         +----------+\n         |   TASK   |\nt#20ms---|INTERVAL  |\n     2---|PRIORITY  |\n         +----------+\nP1\nPROGRAM X\n      Y1                  Y2\n    +-----+             +-----+\n    |  Y  |             |  Y  |\n ---|A   C|----+--------|A   C|---\n ---|B   D|----|--+-----|B   D|---\n    +-----+    |  |     +-----+\n    |fast1|    |  |\n    +-----+    |  |\n               |  |\n               |  |     Y3\n               |  |  +-----+\n               |  |  |  Y  |\n               +--|--|A   C|---\n                  +--|B   D|---\n                     +-----+\n END_PROGRAM\nslow1\nFigure 21 b) - Synchronization of function blocks with implicit task associations\nIEC   2497/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without licen"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 304,
    "text": "mplicit task associations\nIEC   2497/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 122 – 61131-3  IEC:2003(E)\nRESOURCE R1\n             fast1\n         +----------+\n         |   TASK   |\nt#10ms---|INTERVAL  |\n     1---|PRIORITY  |\n         +----------+\n             slow1\n         +----------+\n         |   TASK   |\nt#20ms---|INTERVAL  |\n     2---|PRIORITY  |\n         +----------+\nP1\nPROGRAM X\n      Y1                  Y2\n    +-----+             +-----+\n    |  Y  |             |  Y  |\n ---|A   C|----+--------|A   C|---\n ---|B   D|----|--+-----|B   D|---\n    +-----+    |  |     +-----+\n    |fast1|    |  |     |slow1|\n    +-----+    |  |     +-----+\n               |  |\n               |  |     Y3\n               |  |  +-----+\n               |  |  |  Y  |\n               +--|--|A   C|---\n                  +--|B   D|---\n                     +-----+\n                     |slow1|\n                     +-----+\nEND_PROGRAM\nFigure 21 c) - Explicit task associations equivalent to figure 21 b)\nIEC   2498/02\nCopyright International Electrotechni"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 305,
    "text": "+-----+\n                     |slow1|\n                     +-----+\nEND_PROGRAM\nFigure 21 c) - Explicit task associations equivalent to figure 21 b)\nIEC   2498/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 123 –\n3  Textual languages\nThe textual languages defined in this standard are IL (Instruction List) and ST (Structured Text).  The\nsequential function chart (SFC) elements defined in 2.6 can be used in conjunction with either of these\nlanguages.\n3.1  Common elements\nThe textual elements specified in clause 2 shall be common to the textual languages (IL and ST)\ndefined in this clause.  In particular, the following program structuring elements shall be common to\ntextual languages:\nTYPE...END_TYPE (2.3.3)\nVAR...END_VAR (2.4.3)\nVAR_INPUT...END_VAR (2.4.3)\nVAR_OUTPUT...END_VAR (2.4.3)\nVAR_IN_OUT...END_VAR (2.4.3)\nVAR_EXTERNAL...END_VAR (2.4.3)\nVAR_TEMP...END_VAR (2.4.3)\nVAR_ACCESS...END_VAR (2.4.3)\nVAR_GLOBAL...END_VAR (2.4.3)\nVAR_CONFIG...END_VAR (2.4.3)\nFUNCTION ... END_FUNCTION (2.5.1.3)\nFUNCTION_BLOCK.."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 306,
    "text": "3)\nVAR_EXTERNAL...END_VAR (2.4.3)\nVAR_TEMP...END_VAR (2.4.3)\nVAR_ACCESS...END_VAR (2.4.3)\nVAR_GLOBAL...END_VAR (2.4.3)\nVAR_CONFIG...END_VAR (2.4.3)\nFUNCTION ... END_FUNCTION (2.5.1.3)\nFUNCTION_BLOCK...END_FUNCTION_BLOCK (2.5.2.2)\nPROGRAM...END_PROGRAM (2.5.3)\nSTEP...END_STEP (2.6.2)\nTRANSITION...END_TRANSITION (2.6.3)\nACTION...END_ACTION (2.6.4)\n3.2  Instruction list (IL)\nThis subclause defines the semantics of the IL (Instruction List) language whose formal syntax is\ngiven in B.2.\n3.2.1  Instructions\nAs illustrated in table 51, an instruction list  is composed of a sequence of instructions.  Each\ninstruction shall begin on a new line and shall contain an operator with optional modifiers, and, if\nnecessary for the particular operation, one or more operands separated by commas.  Operands can\nbe any of the data representations defined in 2.2 for literals, in 2.3.3 for enumerated values, and in 2.4\nfor variables.\nThe instruction can be preceded by an identifying label followed by a colon (:). Empty lines can be\ninserted between instructions.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitte"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 307,
    "text": "(:). Empty lines can be\ninserted between instructions.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 124 – 61131-3  IEC:2003(E)\nTable 51 a) - Examples of instruction fields\nLABEL OPERATOR OPERAND COMMENT\nSTART: LD %IX1 (* PUSH BUTTON *)\nANDN %MX5 (* NOT INHIBITED *)\nST %QX2 (* FAN ON *)\n3.2.2  Operators, modifiers and operands\nStandard operators with their allowed modifiers and operands shall be as listed in table 52.  The typing\nof operators shall conform to the conventions of 2.5.1.4.\nUnless otherwise defined in table 52, the semantics of the operators shall be\nresult := result OP operand\nThat is, the value of the expression being evaluated is replaced by its current value operated upon by\nthe operator with respect to the operand.  For instance, the instruction AND %IX1 is interpreted as\nresult := result AND %IX1\nThe comparison operators shall be interpreted with the current result to the left of the comparison and\nthe operand to the right, with a Boolean result.  For instance, the instruction “GT %IW10” will have the\nBoolean"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 308,
    "text": "perators shall be interpreted with the current result to the left of the comparison and\nthe operand to the right, with a Boolean result.  For instance, the instruction “GT %IW10” will have the\nBoolean result 1 if the current result is greater than the value of Input Word 10, and the Boolean result\n0 otherwise.\nThe modifier “N” indicates bitwise Boolean negation (one's complement) of the operand.  For instance,\nthe instruction ANDN %IX2 is interpreted as\nresult := result AND NOT %IX2\nIt shall be an \nerror in the sense of subclause 1.5.1 if the current result and operand are not of same\ndata type, or if the result of a numerical operation exceeds the range of values for its data type.\nThe left parenthesis modifier “(” indicates that evaluation of the operator shall be deferred until a right\nparenthesis operator “)” is encountered. In table 51 b) two equivalent forms of a parenthesized\nsequence of instructions are shown. Both features in table 51 b) shall be interpreted as\nresult := result AND (%IX1 OR %IX2)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--`````"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 309,
    "text": "t AND (%IX1 OR %IX2)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 125 –\nTable 51 b) - Parenthesized expression features for IL language\nNo. DESCRIPTION/EXAMPLE\n1 Parenthesized expression beginning with explicit operator:\nAND(\nLD  %IX1   (NOTE 1)\nOR  %IX2\n)\n2 Parenthesized expression (short form):\nAND(  %IX1\nOR    %IX2\n)\nNOTE In form 1 the LD operator may be modified or the LD operation may be\nreplaced by another operation or function invocation respectively.\nThe modifier “C” indicates that the associated instruction shall be performed only if the value of the\ncurrently evaluated result is Boolean 1 (or Boolean 0 if the operator is combined with the “N” modifier).\nTable 52 - Instruction list operators\nNo. OPERATOR a MODIFIERS\n (Note 1)\nSEMANTICS\n1 LD N Set current result equal to operand\n2 ST N Store current result to operand location\n3 Se Set operand to 1 if current result is Boolean 1\nRe Reset operand to 0 if current result is Boolean\n1\n4 AND N, ( Logical AND\n5 & N, ( Logical AND\n6 OR N, ( Logical OR\n7 XO"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 310,
    "text": "sult to operand location\n3 Se Set operand to 1 if current result is Boolean 1\nRe Reset operand to 0 if current result is Boolean\n1\n4 AND N, ( Logical AND\n5 & N, ( Logical AND\n6 OR N, ( Logical OR\n7 XOR N, ( Logical exclusive OR\n7a NOTd Logical negation (one's complement)\n8 ADD ( Addition\n9 SUB ( Subtraction\n10 MUL ( Multiplication\n11 DIV ( Division\n11a MOD ( Modulo-division\n12 GT ( Comparison: >\n13 GE ( Comparison: >=\n14 EQ ( Comparison: =\n15 NE ( Comparison: <>\n16 LE ( Comparison: <=\n17 LT ( Comparison: <\n18 JMPb C, N Jump to label\n19 CALc C, N Call function block (See table 53)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 126 – 61131-3  IEC:2003(E)\nTable 52 - Instruction list operators\nNo. OPERATOR a MODIFIERS\n (Note 1)\nSEMANTICS\n20 RETf C, N Return from called function, function block or\nprogram\n21 )f Evaluate deferred operation\nNOTE See preceding text for explanation of modifiers and evaluation of\nexpressions.\na Unless otherwise noted, these operators shall be either overloaded or typed as\ndefined in 2.5.1.4 and 2.5.1.5.6."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 311,
    "text": "n\nNOTE See preceding text for explanation of modifiers and evaluation of\nexpressions.\na Unless otherwise noted, these operators shall be either overloaded or typed as\ndefined in 2.5.1.4 and 2.5.1.5.6.\nb  The operand of a JMP instruction shall be the label of an instruction to which\nexecution is to be transferred. When a JMP instruction is contained in an\nACTION... END_ACTION construct, the operand shall be a label within the same\nconstruct.\nc The operand of this instruction shall be the name of a function block instance to\nbe invoked.\nd The result of this operation shall be the bitwise Boolean negation (one's\ncomplement) of the current result.\ne The type of the operand of this instruction shall be BOOL.\nf This instruction does not have an operand.\n3.2.3  Functions and function blocks\nFunctions as defined in 2.5.1 shall be invoked by placing the function name in the operator field. As\nshown in features 4 and 5 of table 53, this invocation can take one of two forms. The value returned by\na function upon the successful execution of a RET instruction or upon reaching the physical end of the\nfunction shall become the “current result” described in 3.2.2.\nThe argument list of functions (f"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 312,
    "text": "a function upon the successful execution of a RET instruction or upon reaching the physical end of the\nfunction shall become the “current result” described in 3.2.2.\nThe argument list of functions (feature 4 in table 53) is equivalent to feature 1 in table 19 a) . The rules\nand features defined in 2.5.1.1 and table 19 a) for function calls apply.\nA non-formal input list of functions (feature 5 in table 53) is equivalent to feature 2 in table 19 a). The\nrules and features defined in 2.5.1.1 and table 19 a) for function calls apply. In contrast to the\nexamples given in table 19 a) for ST language, the first argument is not contained in the non-formal\ninput list in IL , but the current result shall be used as the first argument of the function. Additional\narguments (starting with the 2nd), if required, shall be given in the operand field, separated by\ncommas, in the order of their declaration.\nFunction blocks as defined in 2.5.2 can be invoked conditionally and unconditionally via the CAL (Call)\noperator listed in table 52.  As shown in features 1a, 1b, 2 and 3 of table 53, this invocation can take\none of four forms.\nA formal argument list of a function block invocation (feature 1a i"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 313,
    "text": "L (Call)\noperator listed in table 52.  As shown in features 1a, 1b, 2 and 3 of table 53, this invocation can take\none of four forms.\nA formal argument list of a function block invocation (feature 1a in table 53)  is equivalent to feature 1\nin table 19 a). A non-formal argument list of a function block invocation (feature 1b in table 53)  is\nequivalent to feature 2 in table 19 a) . The rules and features defined in 2.5.1.1 and table 19 a) for\nfunction calls apply correspondingly, by replacing each occurrence of the term ‘function’ by the term\n‘function block’ in these rules.\nAll assignments in an argument list of a conditional function block invocation shall only be performed\ntogether with the invocation, if the condition is true.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 127 –\nTable 53 - Function block invocation and\nFunction invocation features for IL language\nNo. DESCRIPTION/EXAMPLE\n1a CAL of function block with non-formal argument list:\nCAL      C10(%IX10, FALSE, A, OUT, B)\nCAL      CMD_TMR(%IX5, T#3"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 314,
    "text": "cation and\nFunction invocation features for IL language\nNo. DESCRIPTION/EXAMPLE\n1a CAL of function block with non-formal argument list:\nCAL      C10(%IX10, FALSE, A, OUT, B)\nCAL      CMD_TMR(%IX5, T#300ms, OUT, ELAPSED)\n1b CAL of function block with formal argument list:\nCAL  C10(\n     CU := %IX10,\n     Q =>  OUT)\nCAL  CMD_TMR(\n     IN :=  %IX5,\n     PT :=  T#300ms,\n     Q =>   OUT,\n     ET =>  ELAPSED,\n     ENO => ERR)\n2 CAL of function block with load/store of arguments (note 2)\nLD A\nADD 5\nST C10.PV\nLD %IX10\nST C10.CU\nCAL C10\n3 Use of function block input operators:\nLD A\nADD 5\nPV C10\nLD %IX10\nCU C10\n4 Function invocation with formal argument list:\nLIMIT(\n EN:=    COND,\n IN:=    B,\n MN:=    1,\n MX:=    5,\n ENO=>   TEMPL\n)\nST       A\n5 Function invocation with non-formal argument list:\nLD       1\nLIMIT    B, 5\nST       A\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 128 – 61131-3  IEC:2003(E)\nTable 53 - Function block invocation and\nFunction invocation features for IL language\nNo. DESCRIPTION/EXAMPLE\nNOTE 1 A declaration such a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 315,
    "text": "IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 128 – 61131-3  IEC:2003(E)\nTable 53 - Function block invocation and\nFunction invocation features for IL language\nNo. DESCRIPTION/EXAMPLE\nNOTE 1 A declaration such as\nVAR\n  C10 : CTU;\n  CMD_TMR : TON;\n  A, B : INT;\n  ELAPSED : TIME;\n  OUT, ERR, TEMPL, COND : BOOL;\nEND_VAR\nis assumed in the above examples.\nNOTE 2 This usage is an exception to the rule given in 2.5.2.1\nthat “The assignment of a value to the inputs of a function\nblock is permitted only as part of the invocation of the\nfunction block.”\nThe input operators shown in table 54 can be used in conjunction with feature 3 of table 53. This\nmethod of invocation is equivalent to a CAL with an argument list, which contains only one variable\nwith the name of the input operator. Arguments, which are not supplied, are taken from the last\nassignment or, if not present, from initialization. This feature supports problem situations, where\nevents are predictable and therefore only one variable can change from one call to the next.\nEXAMPLE 1\nTogether with the declaration\nVAR C10: CTU; END_VAR\nthe instruction sequence\nLD 15\nPV C10\ngives the same result as\nCAL C10(PV:=15)\nThe missing inputs R and CU have"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 316,
    "text": "rom one call to the next.\nEXAMPLE 1\nTogether with the declaration\nVAR C10: CTU; END_VAR\nthe instruction sequence\nLD 15\nPV C10\ngives the same result as\nCAL C10(PV:=15)\nThe missing inputs R and CU have values previously assigned to them. Since the CU input\ndetects a rising edge, only the PV input value will be set by this call; counting cannot\nhappen because an unsupplied argument cannot change. In contrast to this, the\nsequence\nLD %IX10\nCU C10\nresults in counting at maximum in every second call, depending on the change rate of the\ninput %IX10. Every call uses the previously set values for PV and R.\nEXAMPLE 2\nWith bistable function blocks, taking a declaration\nVAR FORWARD: SR; END_VAR\nthis results into an implicit conditional behavior. The sequence\nLD FALSE\nS1 FORWARD\ndoes not change the state of the bistable FORWARD.  A following sequence\nLD TRUE\nR FORWARD\nresets the bistable.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 129 –\nTable 54 - Standard function block input operators for IL language\nNo. Operators"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 317,
    "text": "eproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 129 –\nTable 54 - Standard function block input operators for IL language\nNo. Operators FB Type Reference\n4 S1,R SR 2.5.2.3.1\n5 S,R1 RS 2.5.2.3.1\n6 CLK TRIGGER 2.5.2.3.2\n8 CU,R,PV CTU 2.5.2.3.3\n9 CD,PV CTD 2.5.2.3.3 (note 1)\n10 CU,CD,R,PV CTUD 2.5.2.3.3 (note 1)\n11 IN,PT TP 2.5.2.3.4\n12 IN,PT TON 2.5.2.3.4\n13 IN,PT TOF 2.5.2.3.4\nNOTE 1 LD is not necessary as a Standard Function Block input\noperator, because the LD functionality is included in PV.\nNOTE 2 The feature numbering in this table is such as to\nmaintain consistency with the first edition of IEC 61131-3.\n3.3  Structured Text (ST)\nThis subclause defines the semantics of the ST (Structured Text) language whose syntax is defined in\nB.3.  In this language, the end of a textual line shall be treated the same as a space (SP) character, as\ndefined in 2.1.4.\n3.3.1  Expressions\nAn expression is a construct which, when evaluated, yields a value corresponding to one of the data\ntypes defined in 2.3.1 and 2.3.3.  The maximum allowed length of expressions is an implementation-\ndependent parameter.\nExpressions are composed of op"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 318,
    "text": ", yields a value corresponding to one of the data\ntypes defined in 2.3.1 and 2.3.3.  The maximum allowed length of expressions is an implementation-\ndependent parameter.\nExpressions are composed of operators and operands. An operand shall be a literal as defined in 2.2,\nan enumerated value as defined in 2.3.3, a variable as defined in 2.4, a function invocation as defined\nin 2.5.1, or another expression.\nThe operators of the ST language are summarized in table 55.  The evaluation of an expression\nconsists of applying the operators to the operands in a sequence defined by the operator precedence\nshown in table 55.  The operator with highest precedence in an expression shall be applied first,\nfollowed by the operator of next lower precedence, etc., until evaluation is complete.  Operators of\nequal precedence shall be applied as written in the expression from left to right.  For example, if \nA, B,\nC, and D are of type INT with values 1, 2, 3, and 4, respectively, then\nA+B-C*ABS(D)\nshall evaluate to -9, and\n(A+B-C)*ABS(D)\nshall evaluate to 0.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitte"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 319,
    "text": "valuate to -9, and\n(A+B-C)*ABS(D)\nshall evaluate to 0.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 130 – 61131-3  IEC:2003(E)\nWhen an operator has two operands, the leftmost operand shall be evaluated first.  For example, in\nthe expression\nSIN(A)*COS(B)\nthe expression SIN(A) shall be evaluated first, followed by COS(B), followed by evaluation of the\nproduct.\nThe following conditions in the execution of operators shall be treated as errors in the sense of\nsubclause 1.5.1:\n1) An attempt is made to divide by zero.\n2) Operands are not of the correct data type for the operation.\n3) The result of a numerical operation exceeds the range of values for its data type.\nBoolean expressions may be evaluated only to the extent necessary to determine the resultant value.\nFor instance, if \nA<=B, then only the expression ( A>B) would be evaluated to determine that the value\nof the expression\n(A>B) & (C<D)\nis Boolean zero.\nFunctions shall be invoked as elements of expressions consisting of the function name followed by a\nparenthesized list of"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 320,
    "text": "to determine that the value\nof the expression\n(A>B) & (C<D)\nis Boolean zero.\nFunctions shall be invoked as elements of expressions consisting of the function name followed by a\nparenthesized list of arguments, as defined in 2.5.1.1.\nWhen an operator in an expression can be represented as one of the overloaded functions defined in\n2.5.1.5, conversion of operands and results shall follow the rule and examples given in 2.5.1.4.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 131 –\nTable 55 - Operators of the ST language\nNo. Operation a Symbol Precedence\n1 Parenthesization (expression) HIGHEST\n2 Function evaluation identifier(argument list)\nEXAMPLES LN(A), MAX(X,Y), etc.\n4 Negation -\n5 Complement NOT\n3 Exponentiationb **\n6 Multiply *\n7 Divide /\n8 Modulo MOD\n9 Add +\n10 Subtract -\n11 Comparison < , > , <= , >=\n12 Equality =\n13 Inequality <>\n14 Boolean AND &\n15 Boolean AND AND\n16 Boolean Exclusive OR XOR\n17 Boolean OR OR LOWEST\nNOTE The feature numbering in this table is such as to maintain consistency with the fir"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 321,
    "text": "lity =\n13 Inequality <>\n14 Boolean AND &\n15 Boolean AND AND\n16 Boolean Exclusive OR XOR\n17 Boolean OR OR LOWEST\nNOTE The feature numbering in this table is such as to maintain consistency with the first edition\nof IEC 61131-3.\na The same restrictions apply to the operands of these operators as to the inputs of the\ncorresponding functions defined in 2.5.1.5.\nb The result of evaluating the expression A**B shall be the same as the result of evaluating the\nfunction EXPT(A,B) as defined in table 24.\n3.3.2  Statements\nThe statements of the ST language are summarized in table 56.  Statements shall be terminated by\nsemicolons as specified in the syntax of B.3. The maximum allowed length of statements is an\nimplementation-dependent parameter.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 132 – 61131-3  IEC:2003(E)\nTable 56 - ST language statements\nNo. Statement type/Reference Examples\n1 Assignment (3.3.2.1) A := B;  CV := CV+1; C := SIN(X);\n2 Function block Invocation and FB output\nusage (3.3.2.2)\nCMD_TMR(IN:=%IX5, PT:=T#300ms) ;\nA := C"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 322,
    "text": "tements\nNo. Statement type/Reference Examples\n1 Assignment (3.3.2.1) A := B;  CV := CV+1; C := SIN(X);\n2 Function block Invocation and FB output\nusage (3.3.2.2)\nCMD_TMR(IN:=%IX5, PT:=T#300ms) ;\nA := CMD_TMR.Q ;\n3 RETURN (3.3.2.2) RETURN ;\n4 IF (3.3.2.3) D := B*B - 4*A*C ;\nIF D < 0.0 THEN NROOTS := 0 ;\nELSIF D = 0.0 THEN\n  NROOTS := 1 ;\n  X1 := - B/(2.0*A) ;\nELSE\n  NROOTS := 2 ;\n  X1 := (- B + SQRT(D))/(2.0*A) ;\n  X2 := (- B - SQRT(D))/(2.0*A) ;\nEND_IF ;\n5 CASE (3.3.2.3) TW := BCD_TO_INT(THUMBWHEEL);\nTW_ERROR := 0;\nCASE TW OF\n  1,5:  DISPLAY := OVEN_TEMP;\n  2:  DISPLAY := MOTOR_SPEED;\n  3:  DISPLAY := GROSS - TARE;\n  4,6..10: DISPLAY := STATUS(TW - 4);\nELSE  DISPLAY := 0 ;\n      TW_ERROR := 1;\nEND_CASE;\nQW100 := INT_TO_BCD(DISPLAY);\n6 FOR (3.3.2.4) J := 101 ;\nFOR I := 1 TO 100 BY 2 DO\n  IF WORDS[I] = 'KEY' THEN\n    J := I ;\n    EXIT ;\n  END_IF ;\nEND_FOR ;\n7 WHILE (3.3.2.4) J := 1;\nWHILE J <= 100 & WORDS[J] <> 'KEY' DO\n  J := J+2 ;\nEND_WHILE ;\n8 REPEAT (3.3.2.4) J := -1 ;\nREPEAT\n  J := J+2 ;\nUNTIL J = 101 OR WORDS[J] = 'KEY'\nEND_REPEAT ;\n9 EXIT (3.3.2.4)a\nEXIT ;\n10 Empty Statement ;\na If the EXIT statement (9) is supported, then it shall be supported for all of the iteration statemen"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 323,
    "text": "+2 ;\nUNTIL J = 101 OR WORDS[J] = 'KEY'\nEND_REPEAT ;\n9 EXIT (3.3.2.4)a\nEXIT ;\n10 Empty Statement ;\na If the EXIT statement (9) is supported, then it shall be supported for all of the iteration statements\n(FOR, WHILE, REPEAT) which are supported in the implementation.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 133 –\n3.3.2.1  Assignment statements\nThe assignment statement replaces the current value of a single or multi-element variable by the\nresult of evaluating an expression.  An assignment statement shall consist of a variable reference on\nthe left-hand side, followed by the assignment operator  “:=”, followed by the expression to be\nevaluated.  For instance, the statement\nA := B ;\nwould be used to replace the single data value of variable A by the current value of variable B if both\nwere of type INT.  However, if both A and B were of type ANALOG_CHANNEL_CONFIGURATION as\ndescribed in table 12, then the values of all the elements of the structured variable A would be\nreplaced by the current values of the"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 324,
    "text": "er, if both A and B were of type ANALOG_CHANNEL_CONFIGURATION as\ndescribed in table 12, then the values of all the elements of the structured variable A would be\nreplaced by the current values of the corresponding elements of variable B.\nAs illustrated in figure 6, the assignment statement shall also be used to assign the value to be returned by\na function, by placing the function name to the left of an assignment operator in the body of the function\ndeclaration.  The value returned by the function shall be the result of the most recent evaluation of such an\nassignment.  It is an \nerror to return from the evaluation of a function with an  ENO value of TRUE, or with a\nnon-existent ENO output, unless at least one such assignment has been made.\n3.3.2.2  Function and function block control statements\nFunction and function block control statements consist of the mechanisms for invoking function blocks\nand for returning control to the invoking entity before the physical end of a function or function block.\nFunction evaluation shall be invoked as part of expression evaluation, as specified in 3.3.1.\nFunction blocks shall be invoked by a statement consisting of the name of the function blo"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 325,
    "text": "function block.\nFunction evaluation shall be invoked as part of expression evaluation, as specified in 3.3.1.\nFunction blocks shall be invoked by a statement consisting of the name of the function block instance\nfollowed by a parenthesized list of arguments, as illustrated in table 56. The rules and features defined\nin 2.5.1.1 and table 19 a) for function calls apply correspondingly, by replacing each occurrence of the\nterm ‘function’ by the term ‘function block’ in these rules.\nThe \nRETURN statement shall provide early exit from a function, function block or program (for example,\nas the result of the evaluation of an IF statement).\n3.3.2.3  Selection statements\nSelection statements include the IF and CASE statements.  A selection statement selects one (or a\ngroup) of its component statements for execution, based on a specified condition. Examples of\nselection statements are given in table 56.\nThe IF statement specifies that a group of statements is to be executed only if the associated Boolean\nexpression evaluates to the value 1 (true).  If the condition is false, then either no statement is to be\nexecuted, or the statement group following the ELSE keyword (or the ELSIF keyword if"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 326,
    "text": "d Boolean\nexpression evaluates to the value 1 (true).  If the condition is false, then either no statement is to be\nexecuted, or the statement group following the ELSE keyword (or the ELSIF keyword if its associated\nBoolean condition is true) is to be executed.\nThe CASE statement consists of an expression which shall evaluate to a variable of type ANY_INT or\nof an enumerated data type (the “selector”), and a list of statement groups, each group being labeled\nby one or more integer or enumerated values or ranges of integer values, as applicable.  It specifies\nthat the first group of statements, one of whose ranges contains the computed value of the selector,\nshall be executed .  If the value of the selector does not occur in a range of any case, the statement\nsequence following the keyword \nELSE (if it occurs in the CASE statement) shall be executed.\nOtherwise, none of the statement sequences shall be executed.\nThe maximum allowed number of selections in CASE statements is an implementation-dependent\nparameter.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 327,
    "text": "tion-dependent\nparameter.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 134 – 61131-3  IEC:2003(E)\n3.3.2.4  Iteration statements\nIteration statements specify that the group of associated statements shall be executed repeatedly. The\nFOR statement is used if the number of iterations can be determined in advance; otherwise, the WHILE\nor REPEAT constructs are used.\nThe EXIT statement shall be used to terminate iterations before the termination condition is satisfied.\nWhen the EXIT statement is located within nested iterative constructs, exit shall be from the innermost\nloop in which the EXIT is located, that is, control shall pass to the next statement after the first loop\nterminator (END_FOR, END_WHILE, or END_REPEAT) following the EXIT statement. For instance, after\nexecuting the statements shown in figure 22, the value of the variable SUM shall be 15 if the value of\nthe Boolean variable FLAG is 0, and 6 if FLAG=1.\nSUM := 0 ;\nFOR I := 1 TO 3 DO\n  FOR J := 1 TO 2 DO\n    IF FLAG THEN EXIT ; END_IF\n    SUM := SUM + J ;\n  END_FOR ;"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 328,
    "text": "le SUM shall be 15 if the value of\nthe Boolean variable FLAG is 0, and 6 if FLAG=1.\nSUM := 0 ;\nFOR I := 1 TO 3 DO\n  FOR J := 1 TO 2 DO\n    IF FLAG THEN EXIT ; END_IF\n    SUM := SUM + J ;\n  END_FOR ;\n  SUM := SUM + I ;\nEND_FOR ;\nFigure 22 - EXIT statement example\nThe FOR statement indicates that a statement sequence shall be repeatedly executed, up to the\nEND_FOR keyword, while a progression of values is assigned to the FOR loop control variable.  The\ncontrol variable, initial value, and final value shall be expressions of the same integer type (for\nexample, SINT, INT, or DINT) and shall not be altered by any of the repeated statements.  The FOR\nstatement increments the control variable up or down from an initial value to a final value in\nincrements determined by the value of an expression; this value defaults to 1.  The test for the\ntermination condition is made at the beginning of each iteration, so that the statement sequence is not\nexecuted if the initial value exceeds the final value.  The value of the control variable after completion\nof the \nFOR loop is implementation-dependent.\nAn example of the usage of the FOR statement is given in feature 6 of table 56.  In this example,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 329,
    "text": "ue.  The value of the control variable after completion\nof the \nFOR loop is implementation-dependent.\nAn example of the usage of the FOR statement is given in feature 6 of table 56.  In this example, the\nFOR loop is used to determine the index J of the first occurrence (if any) of the string 'KEY' in the odd-\nnumbered elements of an array of strings WORDS with a subscript range of (1..100). If no occurrence\nis found, J will have the value 101.\nThe WHILE statement causes the sequence of statements up to the END_WHILE keyword to be\nexecuted repeatedly until the associated Boolean expression is false.  If the expression is initially\nfalse, then the group of statements is not executed at all.  For instance, the FOR...END_FOR example\ngiven in table 56 can be rewritten using the WHILE...END_WHILE construction shown in table 56.\nThe REPEAT statement causes the sequence of statements up to the UNTIL keyword to be executed\nrepeatedly (and at least once) until the associated Boolean condition is true.  For instance, the\nWHILE...END_WHILE example given in table 56 can be rewritten using the REPEAT...END_REPEAT\nconstruction shown in table 56.\nThe WHILE and REPEAT statements shall not be used t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 330,
    "text": "true.  For instance, the\nWHILE...END_WHILE example given in table 56 can be rewritten using the REPEAT...END_REPEAT\nconstruction shown in table 56.\nThe WHILE and REPEAT statements shall not be used to achieve interprocess synchronization, for\nexample as a \"wait loop\" with an externally determined termination condition.  The SFC elements\ndefined in  2.6 shall be used for this purpose.\nIt shall be an error in the sense of 1.5.1 if a WHILE or REPEAT statement is used in an algorithm for\nwhich satisfaction of the loop termination condition or execution of an EXIT statement cannot be\nguaranteed.\nIEC   2499/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 135 –\n4  Graphic languages\nThe graphic languages defined in this standard are LD (Ladder Diagram) and FBD (Function Block\nDiagram).  The sequential function chart (SFC) elements defined in 2.6 can be used in conjunction\nwith either of these languages.\n4.1  Common elements\nThe elements defined in this clause apply to both the graphic languages in this standard,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 331,
    "text": "(SFC) elements defined in 2.6 can be used in conjunction\nwith either of these languages.\n4.1  Common elements\nThe elements defined in this clause apply to both the graphic languages in this standard, that is, LD\n(Ladder Diagram) and FBD (Function Block Diagram), and to the graphic representation of sequential\nfunction chart (SFC) elements.\n4.1.1 Representation of lines and blocks\nThe graphic language elements defined in this clause are drawn with line elements using characters\nfrom the character set defined in 2.1.1, or using graphic or semigraphic elements, as shown in table\n57.\nLines can be extended by the use of \nconnectors as shown in table 57. No storage of data or\nassociation with data elements shall be associated with the use of connectors; hence, to avoid\nambiguity, it shall be an error if the identifier used as a connector label is the same as the name of\nanother named element within the same program organization unit.\nAny restrictions on network topology in a particular implementation shall be expressed as\nimplementation-dependent parameters.\n4.1.2  Direction of flow in networks\nA network is defined as a maximal set of interconnected graphic elements, excluding the left a"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 332,
    "text": "mentation shall be expressed as\nimplementation-dependent parameters.\n4.1.2  Direction of flow in networks\nA network is defined as a maximal set of interconnected graphic elements, excluding the left and right\nrails in the case of networks in the LD language defined in 4.2.  Provision shall be made to associate\nwith each network or group of networks in a graphic language a network label delimited on the right by\na colon (:). This label shall have the form of an identifier or an unsigned decimal integer as defined in\nclause 2. The scope of a network and its label shall be local to the program organization unit in which\nthe network is located. Examples of networks and network labels are shown in annex F.\nGraphic languages are used to represent the flow of a conceptual quantity through one or more\nnetworks representing a control plan, that is:\n- “Power flow”, analogous to the flow of electric power in an electromechanical relay system,\ntypically used in relay ladder diagrams;\n- “Signal flow”, analogous to the flow of signals between elements of a signal processing system,\ntypically used in function block diagrams;\n- “Activity flow”, analogous to the flow of control between elements of"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 333,
    "text": "w”, analogous to the flow of signals between elements of a signal processing system,\ntypically used in function block diagrams;\n- “Activity flow”, analogous to the flow of control between elements of an organization, or between\nthe steps of an electromechanical sequencer, typically used in sequential function charts.\nThe appropriate conceptual quantity shall flow along lines between elements of a network according to\nthe following rules:\n1) Power flow in the LD language shall be from left to right.\n2) Signal flow in the FBD language shall be from the output (right-hand) side of a function or\nfunction block to the input (left-hand) side of the function or function block(s) so connected.\n3) Activity flow between the SFC elements defined in 2.6 shall be from the bottom of a step\nthrough the appropriate transition to the top of the corresponding successor step(s).\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 136 – 61131-3  IEC:2003(E)\nTable 57 - Representation of lines and blocks\nNo. Feature Example\n1\n2\nHorizontal lines:\nISO/IEC 1"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 334,
    "text": "etworking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 136 – 61131-3  IEC:2003(E)\nTable 57 - Representation of lines and blocks\nNo. Feature Example\n1\n2\nHorizontal lines:\nISO/IEC 10646-1 “minus” character\nGraphic or semigraphic\n-----\n3\n4\nVertical lines:\nISO/IEC 10646-1 “vertical line” character\nGraphic or semigraphic\n|\n5\n6\nHorizontal/vertical connection:\nISO/IEC 10646-1 “plus” character\nGraphic or semigraphic\n  |\n--+--\n  |\n7\n8\nLine crossings without connection:\nISO/IEC 10646-1 characters\nGraphic or semigraphic\n        |   |\n--------|----\n        |   |\n9\n10\nConnected and non-connected corners:\nISO/IEC 10646-1 characters\nGraphic or semigraphic\n         |   |\n     ----+   +----\n         |\n     ----+-+ +----\n         | | |\n11\n12\nBlocks with connecting lines:\nISO/IEC 10646-1 characters\nGraphic or semigraphic\n          |\n      +--------+\n   ---|        |\n      |        |---\n   ---|        |\n      +--------+\n          |\n13\n14\nConnectors using ISO/IEC 10646-1 characters:\nConnector\nContinuation of a connected line\nGraphic or semigraphic connectors\n---------->OTTO>\n>OTTO>----------\n4.1.3  Evaluation of networks\nThe order in which networks and their  elements are evaluated"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 335,
    "text": "nnector\nContinuation of a connected line\nGraphic or semigraphic connectors\n---------->OTTO>\n>OTTO>----------\n4.1.3  Evaluation of networks\nThe order in which networks and their  elements are evaluated is not necessarily the same as the\norder in which they are labeled or displayed.  Similarly, it is not necessary that all networks be\nevaluated before the evaluation of a given network can be repeated.  However, when the body of a\nprogram organization unit consists of  one or more networks, the results of network evaluation within\nthe said body shall be functionally equivalent to the observance of the following rules:\n1) No element of a network shall be evaluated until the states of all of its inputs have been\nevaluated.\n2) The evaluation of a network element shall not be complete until the states of all of its outputs\nhave been evaluated.\n3) The evaluation of a network is not complete until the outputs of all of its elements have been\nevaluated, even if the network contains one of the execution control elements defined in 4.1.4.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without li"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 336,
    "text": "ecution control elements defined in 4.1.4.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 137 –\n4) The order in which networks are evaluated shall conform to the provisions of 4.2.6 for the LD\nlanguage and 4.3.3 for the FBD language.\nA feedback path is said to exist in a network when the output of a function or function block is used as\nthe input to a function or function block which precedes it in the network; the associated variable is\ncalled a feedback variable.  For instance, the Boolean variable RUN is the feedback variable in the\nexample shown in figure 23.  A feedback variable can also be an output element of a function block\ndata structure as defined in 2.5.2.\nFeedback paths can be utilized in the graphic languages defined in 4.2 and 4.3, subject to the\nfollowing rules:\n1) Explicit loops such as the one shown in figure 23 a) shall only appear in the FBD language\ndefined in 4.3.\n2) It shall be possible for the user to utilize an implementation-dependent means to determine\nthe order of execution of the"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 337,
    "text": "shown in figure 23 a) shall only appear in the FBD language\ndefined in 4.3.\n2) It shall be possible for the user to utilize an implementation-dependent means to determine\nthe order of execution of the elements in an explicit loop, for instance by selection of feedback\nvariables to form an implicit loop as shown in figure 23 b).\n3) Feedback variables shall be initialized by one of the mechanisms defined in clause 2.  The initial\nvalue shall be used during the first evaluation of the network. It shall be an error if a feedback\nvariable is not initialized.\n4) Once the element with a feedback variable as output has been evaluated, the new value of the\nfeedback variable shall be used until the next evaluation of the element.\na)                              +---+\n                    ENABLE---| & |-----RUN---+\n                         +---|   |           |\n                 +---+   |   +---+           |\n        START1---|>=1|---+                   |\n        START2---|   |                       |\n              +--|   |                       |\n              |  +---+                       |\n              +------------------------------+\nb)                               +---+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 338,
    "text": "|\n              +--|   |                       |\n              |  +---+                       |\n              +------------------------------+\nb)                               +---+\n                     ENABLE---| & |-----RUN\n                          +---|   |\n                  +---+   |   +---+\n         START1---|>=1|---+\n         START2---|   |\n            RUN---|   |\n                  +---+\nc)            |  START1    ENABLE     RUN   |\n           +---| |----+---| |------( )---+\n           |  START2  |                  |\n           +---| |----+                  |\n           |   RUN    |                  |\n           +---| |----+                  |\n           |                             |\nFigure 23 - Feedback path example\na) Explicit loop\nb) Implicit loop\nc) LD language equivalent\nIEC   2500/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 138 – 61131-3  IEC:2003(E)\n4.1.4  Execution control elements\nTransfer of program control in the LD and FBD languages shall be represented by the graphical\nelements shown in table 58.\nJum"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 339,
    "text": "`,`,,`---\n\n– 138 – 61131-3  IEC:2003(E)\n4.1.4  Execution control elements\nTransfer of program control in the LD and FBD languages shall be represented by the graphical\nelements shown in table 58.\nJumps shall be shown by a Boolean signal line terminated in a double arrowhead.  The signal line for\na jump condition shall originate at a Boolean variable, at a Boolean output of a function or function\nblock, or on the power flow line of a ladder diagram.  A transfer of program control to the designated\nnetwork label shall occur when the Boolean value of the signal line is 1 (\nTRUE); thus, the unconditional\njump is a special case of the conditional jump.\nThe target of a jump shall be a network label within the program organization unit within which the\njump occurs.  If the jump occurs within an ACTION...END_ACTION construct, the target of the jump\nshall be within the same construct.\nConditional returns from functions and function blocks shall be implemented using a RETURN\nconstruction as shown in table 58.  Program execution shall be transferred back to the invoking entity\nwhen the Boolean input is 1 ( TRUE), and shall continue in the normal fashion when the Boolean input\nis 0 (FALSE)."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 340,
    "text": "wn in table 58.  Program execution shall be transferred back to the invoking entity\nwhen the Boolean input is 1 ( TRUE), and shall continue in the normal fashion when the Boolean input\nis 0 (FALSE).  Unconditional returns shall be provided by the physical end of the function or function\nblock, or by a RETURN element connected to the left rail in the LD language, as shown in table 58.\nTable 58 - Graphic execution control elements\nNo. Symbol/Example Explanation\n1\n2\n    1---->>LABELA\n    |\n    +---->>LABELA\n    |\nUnconditional Jjump:\nFBD language\nLD language\n3       X---->>LABELB\n           +---+\n   %IX20---| & |--->>NEXT\n   %MX50---|   |\n           +---+\n   NEXT:\n           +---+\n   %IX25---|>=1|---%QX100\n   %MX60---|   |\n           +---+\nConditional jump\n(FBD language)\nExample:\njump condition\njump target\n4\n  |  X\n  +-| |---->>LABELB\n  |\n  |\n  |   %IX20   %MX50\n  +---| |-----| |--->>NEXT\n  |\n  |\n  NEXT:\n  |   %IX25      %QX100  |\n  +----| |----+----( )---+\n  |   %MX60   |          |\n  +----| |----+          |\n  |                      |\nConditional jump\n(LD language)\nExample:\njump condition\njump target\nCopyright International Electrotechnical Commission \nProvided by IHS under license"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 341,
    "text": "---| |----+          |\n  |                      |\nConditional jump\n(LD language)\nExample:\njump condition\njump target\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 139 –\nTable 58 - Graphic execution control elements\nNo. Symbol/Example Explanation\n5\n6\n   |   X\n   +--| |---<RETURN>\n   |\n   X---<RETURN>\nConditional return:\nLD language\nFBD language\n7\n8\nEND_FUNCTION\nEND_FUNCTION_BLOCK\n      |\n      +---<RETURN>\n      |\nUnconditional return:\nfrom FUNCTION\nfrom FUNCTION_BLOCK\nAlternative representation\nin LD language\n4.2  Ladder diagram (LD)\nThis subclause defines the LD language for ladder diagram programming of programmable\ncontrollers.\nA LD program enables the programmable controller to test and modify data by means of standardized\ngraphic symbols.  These symbols are laid out in networks in a manner similar to a “rung” of a relay\nladder logic diagram.  LD networks are bounded on the left and right by power rails.\n4.2.1  Power rails\nAs shown in table 59, the LD network shall be delimited on the left by a vertical"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 342,
    "text": "ng” of a relay\nladder logic diagram.  LD networks are bounded on the left and right by power rails.\n4.2.1  Power rails\nAs shown in table 59, the LD network shall be delimited on the left by a vertical line known as the left\npower rail, and on the right by a vertical line known as the right power rail. The right power rail may be\nexplicit or implied.\nTable 59 - Power rails\nNo. Symbol Description\n1   |\n  +---\n  |\nLeft power rail\n(with attached horizontal link)\n2         |\n     ---+\n        |\nRight power rail\n(with attached horizontal link)\n4.2.2  Link elements and states\nAs shown in table 60, link elements may be horizontal or vertical.  The state of the link element shall\nbe denoted “ON” or “OFF”, corresponding to the literal Boolean values 1 or 0, respectively.  The term\nlink state shall be synonymous with the term power flow.\nThe state of the left rail shall be considered ON at all times..  No state is defined for the right rail.\nA horizontal link element shall be indicated by a horizontal line.  A horizontal link element transmits the\nstate of the element on its immediate left to the element on its immediate right.\nCopyright International Electrotechnical Commission \nProvided by"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 343,
    "text": "ontal line.  A horizontal link element transmits the\nstate of the element on its immediate left to the element on its immediate right.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 140 – 61131-3  IEC:2003(E)\nThe vertical link element shall consist of a vertical line intersecting with one or more horizontal link\nelements on each side.  The state of the vertical link shall represent the inclusive OR of the ON states\nof the horizontal links on its left side, that is, the state of the vertical link shall be:\n- OFF if the states of all the attached horizontal links to its left are OFF;\n- ON if the state of one or more of the attached horizontal links to its left is ON.\nThe state of the vertical link shall be copied to all of the attached horizontal links on its right.  The state\nof the vertical link shall not be copied to any of the attached horizontal links on its left.\nTable 60 - Link elements\nNo. Symbol Description\n1 ----------- Horizontal link\n2       |\n  ----+----\n  ----+\n      |\n      +----\nVertical link\n(with attached horizon"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 344,
    "text": "ached horizontal links on its left.\nTable 60 - Link elements\nNo. Symbol Description\n1 ----------- Horizontal link\n2       |\n  ----+----\n  ----+\n      |\n      +----\nVertical link\n(with attached horizontal links)\n4.2.3  Contacts\nA contact is an element which imparts a state to the horizontal link on its right side which is equal to\nthe Boolean AND of the state of the horizontal link at its left side with an appropriate function of an\nassociated Boolean input, output, or memory variable.  A contact does not modify the value of the\nassociated Boolean variable. Standard contact symbols are given in table 61.\n4.2.4  Coils\nA coil copies the state of the link on its left to the link on its right without modification, and stores an\nappropriate function of the state or transition of the left link into the associated Boolean variable.\nStandard coil symbols are given in table 62.\nEXAMPLE   In the rung shown below, the value of the Boolean output a is always TRUE, while the\nvalue of outputs c, d and e upon completion of an evaluation of the rung is equal to the value of the\ninput b.\n|   a    b       c    d    |\n+--( )--| |--+--( )---( )--+\n|            |      e      |\n|            +-----( )----"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 345,
    "text": "d e upon completion of an evaluation of the rung is equal to the value of the\ninput b.\n|   a    b       c    d    |\n+--( )--| |--+--( )---( )--+\n|            |      e      |\n|            +-----( )-----+\n|                          |\n4.2.5  Functions and function blocks\nThe representation of functions and function blocks in the LD language shall be as defined in clause 2,\nwith the following exceptions:\n1) Actual variable connections may optionally be shown by writing the appropriate data or variable\noutside the block adjacent to the formal variable name on the inside.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 141 –\n2) At least one Boolean input and one Boolean output shall be shown on each block to allow for\npower flow through the block.\n4.2.6  Order of network evaluation\nWithin a program organization unit written in LD, networks shall be evaluated in top to bottom order as\nthey appear in the ladder diagram, except as this order is modified by the execution control elements\ndefined in 4.1.4.\nTable 61 - Co"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 346,
    "text": "itten in LD, networks shall be evaluated in top to bottom order as\nthey appear in the ladder diagram, except as this order is modified by the execution control elements\ndefined in 4.1.4.\nTable 61 - Contacts a\nStatic contacts\nNo. Symbol Description\n1\n2\n***\n--| |--\nor\n***\n--! !--\nNormally open contact\nThe state of the left link is copied to the right link if the\nstate of the associated Boolean variable (indicated by\n\"***\") is ON.  Otherwise, the state of the right link is\nOFF.\n3\n4\n***\n--|/|--\nor\n***\n--!/!--\nNormally closed contact\nThe state of the left link is copied to the right link if the\nstate of the associated Boolean variable is OFF.\nOtherwise, the state of the right link is OFF.\nTransition-sensing contacts\n5\n6\n***\n--|P|--\nor\n***\n--!P!--\nPositive transition-sensing contact\nThe state of the right link is ON from one evaluation of\nthis element to the next when a transition of the\nassociated variable from OFF to ON is sensed at the\nsame time that the state of the left link is ON.  The state\nof the right link shall be OFF at all other times.\n7\n8\n***\n--|N|--\nor\n***\n--!N!--\nNegative transition-sensing contact\nThe state of the right link is ON from one evaluation of\nthis element to th"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 347,
    "text": "state\nof the right link shall be OFF at all other times.\n7\n8\n***\n--|N|--\nor\n***\n--!N!--\nNegative transition-sensing contact\nThe state of the right link is ON from one evaluation of\nthis element to the next when a transition of the\nassociated variable from ON to OFF is sensed at the\nsame time that the state of the left link is ON.  The state\nof the right link shall be OFF at all other times.\na As specified in 2.1.1, the exclamation mark “!” shall be used when a national\ncharacter set does not support the vertical bar “|”.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 142 – 61131-3  IEC:2003(E)\nTable 62 - Coils\nNo. Symbol Description\nMomentary coils\n1\n***\n--( )--\nCoil\nThe state of the left link is copied to the associated\nBoolean variable and to the right link.\n2\n***\n--(/)--\nNegated coil\nThe state of the left link is copied to the right link.  The\ninverse of the state of the left link is copied to the\nassociated Boolean variable, that is, if the state of the\nleft link is OFF, then the state of the associated variable\nis ON, and"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 348,
    "text": "ight link.  The\ninverse of the state of the left link is copied to the\nassociated Boolean variable, that is, if the state of the\nleft link is OFF, then the state of the associated variable\nis ON, and vice versa.\nLatched Coils\n3\n***\n--(S)--\nSET (latch) coil\nThe associated Boolean variable is set to the ON state\nwhen the left link is in the ON state, and remains set\nuntil reset by a RESET coil.\n4\n***\n--(R)--\nRESET (unlatch) coil\nThe associated Boolean variable is reset to the OFF\nstate when the left link is in the ON state, and remains\nreset until set by a SET coil.\nTransition-sensing coils\n8\n***\n--(P)--\nPositive transition-sensing coil\nThe state of the associated Boolean variable is ON from\none evaluation of this element to the next when a\ntransition of the left link from OFF to ON is sensed.  The\nstate of the left link is always copied to the right link.\n9\n***\n--(N)--\nNegative transition-sensing coil\nThe state of the associated Boolean variable is ON from\none evaluation of this element to the next when a\ntransition of the left link from ON to OFF is sensed.  The\nstate of the left link is always copied to the right link.\nNOTE Features 5, 6 and 7 of the first edition are deleted in t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 349,
    "text": "to the next when a\ntransition of the left link from ON to OFF is sensed.  The\nstate of the left link is always copied to the right link.\nNOTE Features 5, 6 and 7 of the first edition are deleted in this edition.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 143 –\n4.3  Function Block Diagram (FBD)\n4.3.1  General\nThis subclause defines FBD, a graphic language for the programming of programmable controllers\nwhich is consistent, as far as possible, with IEC 60617-12.  Where conflicts exist between this\nstandard and IEC 60617-12, the provisions of this standard shall apply for the programming of\nprogrammable controllers in the FBD language.\nThe provisions of clause 2 and subclause 4.1 shall apply to the construction and interpretation of\nprogrammable controller programs in the FBD language.\nExamples of the use of the FBD language are given in annex F.\n4.3.2  Combination of elements\nElements of the FBD language shall be interconnected by signal flow lines following the conventions\nof 4.1.2.\nOutputs of function b"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 350,
    "text": "he FBD language are given in annex F.\n4.3.2  Combination of elements\nElements of the FBD language shall be interconnected by signal flow lines following the conventions\nof 4.1.2.\nOutputs of function blocks shall not be connected together.  In particular, the “wired- OR” construct of\nthe LD language is not allowed in the FBD language; an explicit Boolean “ OR” block is required\ninstead, as shown in figure 24.\na) b)\n|   a      c   |\n+---||--+--()--+\n|  b    |      |\n+--||---+      |\n|              |\n      +-----+\n  a---| >=1 |---c\n  b---|     |\n      +-----+\nFigure 24 - Boolean OR examples\na) “Wired-OR” in LD language\nb) Function in FBD language\n4.3.3  Order of network evaluation\nWhen a program organization unit written in the FBD language contains more than one network, the\nmanufacturer shall provide implementation-dependent means by which the user may determine the\norder of execution of networks.\nIEC   2501/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 144 – 61131-3  IEC:2003(E)\nANNEX A\n(normative)\nSpecification method for t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 351,
    "text": "icense with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 144 – 61131-3  IEC:2003(E)\nANNEX A\n(normative)\nSpecification method for textual languages\nProgramming languages are specified in terms of a syntax, which specifies the allowable\ncombinations of symbols which can be used to define a program; and a set of semantics, which\nspecify the relationship between programmed operations and the symbol combinations defined by the\nsyntax.\nA.1  Syntax\nA syntax is defined by a set of terminal symbols to be utilized for program specification; a set of non-\nterminal symbols  defined in terms of the terminal symbols; and a set of production rules  specifying\nthose definitions.\nA.1.1    Terminal symbols\nThe terminal symbols for textual programmable controller programs shall consist of combinations of\nthe characters in the character set defined in 2.1.1.\nFor the purposes of this part, terminal textual symbols consist of the appropriate character string\nenclosed in paired single or double quotes.  For example, a terminal symbol represented by the\ncharacter string ABC can be represented by either\n\"ABC\"\nor\n'ABC'\nThis allows the rep"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 352,
    "text": "ate character string\nenclosed in paired single or double quotes.  For example, a terminal symbol represented by the\ncharacter string ABC can be represented by either\n\"ABC\"\nor\n'ABC'\nThis allows the representation of strings containing either single or double quotes; for instance, a\nterminal symbol consisting of the double quote itself would be represented by '\"'.\nA special terminal symbol utilized in this syntax is the end-of-line delimiter, which is represented by the\nunquoted character string EOL. This symbol shall normally consist of the “paragraph separator”\ncharacter defined as hexadecimal code 2029 by ISO/IEC 10646-1.\nA second special terminal symbol utilized in this syntax is the “null string”, that is, a string containing\nno characters.  This is represented by the terminal symbol \nNIL.\nThe case of letters shall not be significant in terminal symbols.\nA.1.2    Non-terminal symbols\nNon-terminal textual symbols shall be represented by strings of lower-case letters, numbers, and the\nunderline character (_), beginning with a lower-case letter.  For instance, the strings\nnonterm1\nand\nnon_term_2\nare valid non-terminal symbols, while the strings\n3nonterm\nand\n_nonterm4\nare not.\nCopyr"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 353,
    "text": "underline character (_), beginning with a lower-case letter.  For instance, the strings\nnonterm1\nand\nnon_term_2\nare valid non-terminal symbols, while the strings\n3nonterm\nand\n_nonterm4\nare not.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 145 –\nA.1.3   Production rules\nThe production rules for textual programmable controller programming languages shall form an\nextended grammar in which each rule has the form\nnon_terminal_symbol ::= extended_structure\nThis rule can be read as:\n“A non_terminal_symbol can consist of an extended_structure.”\nExtended structures can be constructed according to the following rules:\n1) The null string, NIL, is an extended structure.\n2) A terminal symbol is an extended structure.\n3) A non-terminal symbol is an extended structure.\n4) If S is an extended structure, then the following expressions are also extended structures:\n(S), meaning S itself.\n{S}, closure, meaning zero or more concatenations of S.\n[S], option, meaning zero or one occurrence of S.\n5) If S1 and S2 are extended st"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 354,
    "text": "pressions are also extended structures:\n(S), meaning S itself.\n{S}, closure, meaning zero or more concatenations of S.\n[S], option, meaning zero or one occurrence of S.\n5) If S1 and S2 are extended structures, then the following expressions are extended structures:\nS1 | S2, alternation, meaning a choice of S1 or S2.\nS1 S2, concatenation, meaning S1 followed by S2.\n6) Concatenation precedes alternation, that is, S1 | S2 S3 is equivalent to S1 | (S2 S3),\n and S1 S2 | S3 is equivalent to (S1 S2) | S3.\nA.2  Semantics\nProgrammable controller textual programming language semantics are defined in this part of IEC\n61131 by appropriate natural language text, accompanying the production rules, which references the\ndescriptions provided in the appropriate clauses.  Standard options available to the user and\nmanufacturer are specified in these semantics.\nIn some cases it is more convenient to embed semantic information in an extended structure.  In such\ncases, this information is delimited by paired angle brackets, for example, \n<semantic\ninformation>.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permit"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 355,
    "text": "ed angle brackets, for example, \n<semantic\ninformation>.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 146 – 61131-3  IEC:2003(E)\nANNEX B\n(normative)\nFormal specifications of language elements\nB.0  Programming model\nThe contents of this annex are normative in the sense that a compiler which is capable of recognizing\nall the syntax in this annex shall be capable of recognizing the syntax of any textual language\nimplementation complying with this standard.\nPRODUCTION RULES:\nlibrary_element_name ::= data_type_name | function_name\n| function_block_type_name | program_type_name\n| resource_type_name | configuration_name\nlibrary_element_declaration ::= data_type_declaration\n| function_declaration | function_block_declaration\n| program_declaration | configuration_declaration\nSEMANTICS: These productions reflect the basic programming model defined in 1.4.3, where\ndeclarations are the basic mechanism for the production of named library elements.  The syntax and\nsemantics of the non-terminal symbols given above are defined in the subclaus"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 356,
    "text": "defined in 1.4.3, where\ndeclarations are the basic mechanism for the production of named library elements.  The syntax and\nsemantics of the non-terminal symbols given above are defined in the subclauses listed below.\nNon-terminal symbol Syntax Semantics\ndata_type_name\ndata_type_declaration\nB.1.3 2.3\nfunction_name\nfunction_declaration\nB.1.5.1 2.5.1\nfunction_block_type_name\nfunction_block_declaration\nB.1.5.2 2.5.2\nprogram_type_name\nprogram_declaration\nB.1.5.3 2.5.3\nresource_type_name\nconfiguration_name B.1.7 2.7\nconfiguration_declaration\nB.1  Common elements\nB.1.1 Letters, digits and identifiers\nPRODUCTION RULES:\nletter  ::=  'A' | 'B' | <...> | 'Z' | 'a' | 'b' | <...> | 'z'\ndigit ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\noctal_digit ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7'\nhex_digit ::= digit | 'A'|'B'|'C'|'D'|'E'|'F'\nidentifier ::= (letter | ('_' (letter | digit))) {['_'] (letter | digit)}\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 147 –\nSEMANTICS:\nThe ellipsis <...> here ind"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 357,
    "text": "under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 147 –\nSEMANTICS:\nThe ellipsis <...> here indicates the ISO/IEC 10646-1 sequence of 26 letters.\nCharacters from national character sets can be used; however, international portability of the printed\nrepresentation of programs cannot be guaranteed in this case.\nB.1.2  Constants\nPRODUCTION RULE:\nconstant ::= numeric_literal | character_string | time_literal\n| bit_string_literal | boolean_literal\nSEMANTICS:\nThe external representations of data described in 2.2 are designated as “constants” in this annex.\nB.1.2.1   Numeric literals\nPRODUCTION RULES:\nnumeric_literal ::= integer_literal | real_literal\ninteger_literal ::= [ integer_type_name '#' ]\n( signed_integer | binary_integer | octal_integer | hex_integer)\nsigned_integer ::= ['+' |'-'] integer\ninteger ::= digit {['_'] digit}\nbinary_integer ::= '2#' bit {['_'] bit}\nbit ::= '1' | '0'\noctal_integer ::= '8#' octal_digit {['_'] octal_digit}\nhex_integer ::= '16#' hex_digit {['_'] hex_digit}\nreal_literal ::= [ real_type_name '#' ]\nsigned_integer  '.' integer [exponent]\nexponent ::= ('E' |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 358,
    "text": "al_integer ::= '8#' octal_digit {['_'] octal_digit}\nhex_integer ::= '16#' hex_digit {['_'] hex_digit}\nreal_literal ::= [ real_type_name '#' ]\nsigned_integer  '.' integer [exponent]\nexponent ::= ('E' | 'e') ['+'|'-'] integer\nbit_string_literal ::=\n[ ('BYTE' | 'WORD' | 'DWORD' | 'LWORD') '#' ]\n( unsigned_integer | binary_integer | octal_integer | hex_integer)\nboolean_literal ::=\n( [ 'BOOL#' ] ( '1' | '0' )  )| 'TRUE' | 'FALSE'\nSEMANTICS: see 2.2.1.\nB.1.2.2  Character strings\nPRODUCTION RULES:\ncharacter_string ::=\nsingle_byte_character_string | double_byte_character_string\nsingle_byte_character_string ::=\n\"'\" {single_byte_character_representation} \"'\"\ndouble_byte_character_string ::=\n'\"' {double_byte_character_representation} '\"'\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 148 – 61131-3  IEC:2003(E)\nsingle_byte_character_representation ::= common_character_representation\n| \"$'\" | '\"' | '$' hex_digit hex_digit\ndouble_byte_character_representation ::= common_character_representation\n|  '$\"' | \"'\"| '$' hex_digit hex_digit hex_digit"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 359,
    "text": "ion ::= common_character_representation\n| \"$'\" | '\"' | '$' hex_digit hex_digit\ndouble_byte_character_representation ::= common_character_representation\n|  '$\"' | \"'\"| '$' hex_digit hex_digit hex_digit hex_digit\ncommon_character_representation ::=\n<any printable character except '$', '\"' or \"'\">\n| '$$' | '$L' | '$N' | '$P' | '$R' | '$T'\n| '$l' | '$n' | '$p' | '$r' | '$t'\nSEMANTICS: see 2.2.2.\nB.1.2.3 Time literals\nPRODUCTION RULE:\ntime_literal ::= duration | time_of_day | date | date_and_time\nSEMANTICS: see 2.2.3.\nB.1.2.3.1  Duration\nPRODUCTION RULES:\nduration ::= ('T' | 'TIME') '#' ['-'] interval\ninterval ::= days | hours | minutes | seconds | milliseconds\ndays ::= fixed_point ('d') | integer ('d') ['_'] hours\nfixed_point ::= integer [ '.' integer]\nhours ::= fixed_point ('h') | integer ('h') ['_'] minutes\nminutes ::= fixed_point ('m')  | integer ('m') ['_'] seconds\nseconds ::= fixed_point ('s') | integer ('s') ['_'] milliseconds\nmilliseconds ::= fixed_point ('ms')\nSEMANTICS: see 2.2.3.1.\nNOTE The semantics of 2.2.3.1 impose additional constraints on the allowable values of hours,\nminutes, seconds, and milliseconds.\nB.1.2.3.2  Time of day and date\nPRODUCTION RULES:\ntime_of_day ::= ("
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 360,
    "text": "1.\nNOTE The semantics of 2.2.3.1 impose additional constraints on the allowable values of hours,\nminutes, seconds, and milliseconds.\nB.1.2.3.2  Time of day and date\nPRODUCTION RULES:\ntime_of_day ::= ('TIME_OF_DAY' | 'TOD')  '#' daytime\ndaytime ::= day_hour ':' day_minute ':' day_second\nday_hour ::= integer\nday_minute ::= integer\nday_second ::= fixed_point\ndate ::= ('DATE' | 'D') '#' date_literal\ndate_literal ::= year '-' month '-' day\nyear ::= integer\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 149 –\nmonth ::= integer\nday ::= integer\ndate_and_time ::= ('DATE_AND_TIME' | 'DT') '#' date_literal '-' daytime\nSEMANTICS: see 2.2.3.2.\nNOTE The semantics of 2.2.3.2 impose additional constraints on the allowable values of\nday_hour, day_minute, day_second, year, month, and day.\nB.1.3   Data types\nPRODUCTION RULES:\ndata_type_name ::= non_generic_type_name | generic_type_name\nnon_generic_type_name ::=  elementary_type_name | derived_type_name\nSEMANTICS: see 2.3.\nB.1.3.1  Elementary data types\nPRODUCTION RULES:\nelemen"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 361,
    "text": "_type_name ::= non_generic_type_name | generic_type_name\nnon_generic_type_name ::=  elementary_type_name | derived_type_name\nSEMANTICS: see 2.3.\nB.1.3.1  Elementary data types\nPRODUCTION RULES:\nelementary_type_name ::= numeric_type_name | date_type_name\n| bit_string_type_name | 'STRING' | 'WSTRING' | 'TIME'\nnumeric_type_name ::= integer_type_name | real_type_name\ninteger_type_name ::= signed_integer_type_name\n| unsigned_integer_type_name\nsigned_integer_type_name ::= 'SINT' | 'INT' | 'DINT' | 'LINT'\nunsigned_integer_type_name ::= 'USINT' | 'UINT' | 'UDINT'  | 'ULINT'\nreal_type_name ::= 'REAL' | 'LREAL'\ndate_type_name ::= 'DATE' | 'TIME_OF_DAY' | 'TOD'  | 'DATE_AND_TIME'\n| 'DT'\nbit_string_type_name ::= 'BOOL' | 'BYTE' | 'WORD' | 'DWORD' | 'LWORD'\nSEMANTICS:  See 2.3.1.\nB.1.3.2  Generic data types\nPRODUCTION RULE:\ngeneric_type_name ::= 'ANY' | 'ANY_DERIVED' | 'ANY_ELEMENTARY'\n| 'ANY_MAGNITUDE' | 'ANY_NUM' | 'ANY_REAL' | 'ANY_INT' | 'ANY_BIT'\n| 'ANY_STRING' | 'ANY_DATE'\nSEMANTICS: see 2.3.2.\nB.1.3.3  Derived data types\nPRODUCTION RULES:\nderived_type_name ::= single_element_type_name | array_type_name\n| structure_type_name | string_type_name\nsingle_element_type_name ::= simple_type_name"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 362,
    "text": "2.\nB.1.3.3  Derived data types\nPRODUCTION RULES:\nderived_type_name ::= single_element_type_name | array_type_name\n| structure_type_name | string_type_name\nsingle_element_type_name ::= simple_type_name | subrange_type_name\n| enumerated_type_name\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 150 – 61131-3  IEC:2003(E)\nsimple_type_name ::= identifier\nsubrange_type_name ::= identifier\nenumerated_type_name ::= identifier\narray_type_name ::= identifier\nstructure_type_name ::= identifier\ndata_type_declaration ::=\n'TYPE' type_declaration ';'\n{type_declaration ';'}\n'END_TYPE'\ntype_declaration ::= single_element_type_declaration\n| array_type_declaration\n| structure_type_declaration | string_type_declaration\nsingle_element_type_declaration ::= simple_type_declaration\n| subrange_type_declaration | enumerated_type_declaration\nsimple_type_declaration ::= simple_type_name ':' simple_spec_init\nsimple_spec_init := simple_specification [':=' constant]\nsimple_specification ::= elementary_type_name | simple_type_name\nsubrange_type_declaration ::="
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 363,
    "text": "ation ::= simple_type_name ':' simple_spec_init\nsimple_spec_init := simple_specification [':=' constant]\nsimple_specification ::= elementary_type_name | simple_type_name\nsubrange_type_declaration ::= subrange_type_name ':' subrange_spec_init\nsubrange_spec_init ::= subrange_specification [':=' signed_integer]\nsubrange_specification ::= integer_type_name '(' subrange')'\n| subrange_type_name\nsubrange ::= signed_integer '..' signed_integer\nenumerated_type_declaration ::=\nenumerated_type_name ':' enumerated_spec_init\nenumerated_spec_init ::= enumerated_specification [':=' enumerated_value]\nenumerated_specification ::=\n( '(' enumerated_value {',' enumerated_value} ')' )\n| enumerated_type_name\nenumerated_value ::= [enumerated_type_name '#'] identifier\narray_type_declaration ::= array_type_name ':' array_spec_init\narray_spec_init ::= array_specification [':=' array_initialization]\narray_specification ::= array_type_name\n| 'ARRAY' '[' subrange {',' subrange} ']' 'OF' non_generic_type_name\narray_initialization ::=\n'[' array_initial_elements {',' array_initial_elements} ']'\narray_initial_elements ::=\narray_initial_element | integer '(' [array_initial_element] ')'\narray_initial_element ::= con"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 364,
    "text": "_initialization ::=\n'[' array_initial_elements {',' array_initial_elements} ']'\narray_initial_elements ::=\narray_initial_element | integer '(' [array_initial_element] ')'\narray_initial_element ::= constant | enumerated_value\n| structure_initialization | array_initialization\nstructure_type_declaration ::=\nstructure_type_name ':' structure_specification\nstructure_specification ::= structure_declaration | initialized_structure\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 151 –\ninitialized_structure ::=\nstructure_type_name [':=' structure_initialization]\nstructure_declaration ::=\n'STRUCT' structure_element_declaration ';'\n{structure_element_declaration ';'}\n'END_STRUCT'\nstructure_element_declaration ::= structure_element_name ':'\n(simple_spec_init | subrange_spec_init  | enumerated_spec_init\n| array_spec_init | initialized_structure)\nstructure_element_name ::= identifier\nstructure_initialization ::=\n'(' structure_element_initialization\n{','  structure_element_initialization} ')'\nstructure_element_initializatio"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 365,
    "text": "itialized_structure)\nstructure_element_name ::= identifier\nstructure_initialization ::=\n'(' structure_element_initialization\n{','  structure_element_initialization} ')'\nstructure_element_initialization ::=\nstructure_element_name ':=' (constant | enumerated_value\n| array_initialization | structure_initialization)\nstring_type_name ::= identifier\nstring_type_declaration ::= string_type_name ':'\n('STRING'|'WSTRING') ['[' integer ']'] [':=' character_string]\nSEMANTICS: see 2.3.3.\nB.1.4  Variables\nPRODUCTION RULES:\nvariable ::= direct_variable | symbolic_variable\nsymbolic_variable ::= variable_name | multi_element_variable\nvariable_name ::= identifier\nSEMANTICS: see 2.4.1.\nB.1.4.1  Directly represented variables\nPRODUCTION RULES:\ndirect_variable ::= '%' location_prefix size_prefix integer {'.' integer}\nlocation_prefix ::= 'I' | 'Q' | 'M'\nsize_prefix ::= NIL | 'X' | 'B' | 'W' | 'D' | 'L'\nSEMANTICS: see 2.4.1.1.\nB.1.4.2  Multi-element variables\nPRODUCTION RULES:\nmulti_element_variable ::= array_variable | structured_variable\narray_variable ::= subscripted_variable subscript_list\nsubscripted_variable ::= symbolic_variable\nsubscript_list ::= '[' subscript {',' subscript} ']'\nCopyright Intern"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 366,
    "text": "y_variable | structured_variable\narray_variable ::= subscripted_variable subscript_list\nsubscripted_variable ::= symbolic_variable\nsubscript_list ::= '[' subscript {',' subscript} ']'\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 152 – 61131-3  IEC:2003(E)\nsubscript ::= expression\nstructured_variable ::= record_variable '.' field_selector\nrecord_variable ::= symbolic_variable\nfield_selector ::= identifier\nSEMANTICS: see 2.4.1.2.\nB.1.4.3  Declaration and initialization\nPRODUCTION RULES:\ninput_declarations ::=\n'VAR_INPUT' ['RETAIN' | 'NON_RETAIN']\ninput_declaration ';'\n{input_declaration ';'}\n'END_VAR'\ninput_declaration ::= var_init_decl | edge_declaration\nedge_declaration ::= var1_list ':' 'BOOL' ('R_EDGE' | 'F_EDGE')\nvar_init_decl ::= var1_init_decl | array_var_init_decl\n| structured_var_init_decl | fb_name_decl | string_var_declaration\nvar1_init_decl ::=  var1_list ':'\n(simple_spec_init | subrange_spec_init | enumerated_spec_init)\nvar1_list ::= variable_name {',' variable_name}\narray_var_init_decl ::= var1_list ':' array_spec_"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 367,
    "text": "ation\nvar1_init_decl ::=  var1_list ':'\n(simple_spec_init | subrange_spec_init | enumerated_spec_init)\nvar1_list ::= variable_name {',' variable_name}\narray_var_init_decl ::= var1_list ':' array_spec_init\nstructured_var_init_decl ::= var1_list ':' initialized_structure\nfb_name_decl ::= fb_name_list ':' function_block_type_name\n[ ’:=’ structure_initialization ]\nfb_name_list ::= fb_name {',' fb_name}\nfb_name ::= identifier\noutput_declarations ::=\n'VAR_OUTPUT' ['RETAIN' | 'NON_RETAIN']\n  var_init_decl ';'\n  {var_init_decl ';'}\n'END_VAR'\ninput_output_declarations ::=\n'VAR_IN_OUT'\nvar_declaration ';'\n{var_declaration ';'}\n'END_VAR'\nvar_declaration ::=  temp_var_decl | fb_name_decl\ntemp_var_decl ::= var1_declaration | array_var_declaration\n| structured_var_declaration | string_var_declaration\nvar1_declaration ::=  var1_list  ':' (simple_specification\n| subrange_specification | enumerated_specification)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 153 –\narray_var_declaration ::= var1_list ':' array_specification"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 368,
    "text": "C\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 153 –\narray_var_declaration ::= var1_list ':' array_specification\nstructured_var_declaration ::= var1_list ':' structure_type_name\nvar_declarations ::=\n'VAR' ['CONSTANT']\nvar_init_decl ';'\n{(var_init_decl ';')}\n'END_VAR'\nretentive_var_declarations ::=\n'VAR' 'RETAIN'\nvar_init_decl ';'\n{var_init_decl ';'}\n'END_VAR'\nlocated_var_declarations ::=\n'VAR' ['CONSTANT' | 'RETAIN' | 'NON_RETAIN']\n  located_var_decl ';'\n  {located_var_decl ';'}\n'END_VAR'\nlocated_var_decl ::= [variable_name] location ':' located_var_spec_init\nexternal_var_declarations :=\n'VAR_EXTERNAL' ['CONSTANT']\nexternal_declaration ';'\n{external_declaration ';'}\n'END_VAR'\nexternal_declaration ::= global_var_name ':'\n(simple_specification | subrange_specification\n| enumerated_specification | array_specification\n| structure_type_name | function_block_type_name)\nglobal_var_name ::= identifier\nglobal_var_declarations :=\n'VAR_GLOBAL' ['CONSTANT' | 'RETAIN']\nglobal_var_decl ';'\n{global_var_decl ';'}\n'END_VAR'\nglobal_var_decl ::= global_var_spec ':'\n[ located_var_spec_init | function_block_type_name"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 369,
    "text": "_var_declarations :=\n'VAR_GLOBAL' ['CONSTANT' | 'RETAIN']\nglobal_var_decl ';'\n{global_var_decl ';'}\n'END_VAR'\nglobal_var_decl ::= global_var_spec ':'\n[ located_var_spec_init | function_block_type_name ]\nglobal_var_spec ::= global_var_list | [global_var_name] location\nlocated_var_spec_init ::= simple_spec_init | subrange_spec_init\n| enumerated_spec_init | array_spec_init | initialized_structure\n| single_byte_string_spec | double_byte_string_spec\nlocation ::= 'AT' direct_variable\nglobal_var_list ::= global_var_name {',' global_var_name}\nstring_var_declaration ::= single_byte_string_var_declaration\n| double_byte_string_var_declaration\nsingle_byte_string_var_declaration ::=\nvar1_list ':' single_byte_string_spec\nsingle_byte_string_spec ::=\n'STRING' ['[' integer ']'] [':=' single_byte_character_string]\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 154 – 61131-3  IEC:2003(E)\ndouble_byte_string_var_declaration ::=\nvar1_list ':' double_byte_string_spec\ndouble_byte_string_spec ::=\n'WSTRING' ['[' integer ']'] [':=' double_byte_character_s"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 370,
    "text": ",,`---\n\n– 154 – 61131-3  IEC:2003(E)\ndouble_byte_string_var_declaration ::=\nvar1_list ':' double_byte_string_spec\ndouble_byte_string_spec ::=\n'WSTRING' ['[' integer ']'] [':=' double_byte_character_string]\nincompl_located_var_declarations ::=\n'VAR' ['RETAIN'|'NON_RETAIN']\n   incompl_located_var_decl ';'\n   {incompl_located_var_decl ';'}\n'END_VAR'\nincompl_located_var_decl ::= variable_name incompl_location ':' var_spec\nincompl_location ::= 'AT' '%' ('I' | 'Q' | 'M') '*'\nvar_spec ::= simple_specification\n| subrange_specification | enumerated_specification\n| array_specification | structure_type_name\n| 'STRING' ['[' integer ']'] | 'WSTRING' ['[' integer ']']\nSEMANTICS: see 2.4.2. The non-terminal function_block_type_name is defined in B.1.5.2.\nB.1.5  Program organization units\nB.1.5.1  Functions\nPRODUCTION RULES:\nfunction_name ::= standard_function_name | derived_function_name\nstandard_function_name ::= <as defined in 2.5.1.5>\nderived_function_name ::= identifier\nfunction_declaration ::=\n'FUNCTION' derived_function_name ':'\n(elementary_type_name | derived_type_name)\n{ io_var_declarations | function_var_decls }\nfunction_body\n'END_FUNCTION'\nio_var_declarations ::= input_declarations | o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 371,
    "text": "'FUNCTION' derived_function_name ':'\n(elementary_type_name | derived_type_name)\n{ io_var_declarations | function_var_decls }\nfunction_body\n'END_FUNCTION'\nio_var_declarations ::= input_declarations | output_declarations |\ninput_output_declarations\nfunction_var_decls ::= 'VAR' ['CONSTANT']\nvar2_init_decl ';' {var2_init_decl ';'} 'END_VAR'\nfunction_body ::= ladder_diagram | function_block_diagram\n| instruction_list | statement_list | <other languages>\nvar2_init_decl ::= var1_init_decl | array_var_init_decl\n| structured_var_init_decl | string_var_declaration\nSEMANTICS: see 2.5.1.\nNOTE 1 This syntax does not reflect the fact that each function must have at least one input\ndeclaration.\nNOTE 2 This syntax does not reflect the fact that edge declarations, function block references and\ninvocations are not allowed in function bodies.\nNOTE 3 Ladder diagrams and function block diagrams are graphically represented as defined in\nClause 4.  The non-terminals instruction_list and statement_list are defined in\nB.2.1 and B.3.2, respectively.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without licen"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 372,
    "text": "fined in\nB.2.1 and B.3.2, respectively.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 155 –\nB.1.5.2  Function blocks\nPRODUCTION RULES:\nfunction_block_type_name ::= standard_function_block_name\n| derived_function_block_name\nstandard_function_block_name ::= <as defined in 2.5.2.3>\nderived_function_block_name ::= identifier\nfunction_block_declaration ::=\n'FUNCTION_BLOCK' derived_function_block_name\n   { io_var_declarations | other_var_declarations }\n   function_block_body\n'END_FUNCTION_BLOCK'\nother_var_declarations ::= external_var_declarations | var_declarations\n| retentive_var_declarations | non_retentive_var_declarations\n| temp_var_decls | incompl_located_var_declarations\ntemp_var_decls ::=\n'VAR_TEMP'\n  temp_var_decl ';'\n  {temp_var_decl ';'}\n'END_VAR'\nnon_retentive_var_decls ::=\n'VAR' 'NON_RETAIN'\n  var_init_decl ';'\n  {var_init_decl ';'}\n'END_VAR'\nfunction_block_body ::= sequential_function_chart | ladder_diagram\n| function_block_diagram | instruction_list | statement_list\n| <other languages>\nSEMANTICS: s"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 373,
    "text": "ecl ';'\n  {var_init_decl ';'}\n'END_VAR'\nfunction_block_body ::= sequential_function_chart | ladder_diagram\n| function_block_diagram | instruction_list | statement_list\n| <other languages>\nSEMANTICS: see 2.5.2.\nNOTE 1 Ladder diagrams and function block diagrams are graphically represented as defined in\nclause 4.\nNOTE 2 The non-terminals sequential_function_chart, instruction_list, and\nstatement_list are defined in  B.1.6, B.2.1, and B.3.2, respectively.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 156 – 61131-3  IEC:2003(E)\nB.1.5.3  Programs\nPRODUCTION RULES:\nprogram_type_name :: = identifier\nprogram_declaration ::=\n'PROGRAM' program_type_name\n  { io_var_declarations | other_var_declarations\n    | located_var_declarations | program_access_decls }\n  function_block_body\n'END_PROGRAM'\nprogram_access_decls ::=\n'VAR_ACCESS' program_access_decl ';'\n   {program_access_decl ';' }\n'END_VAR'\nprogram_access_decl ::= access_name ':' symbolic_variable ':'\nnon_generic_type_name [direction]\nSEMANTICS: see 2.5.3.\nB.1.6  Sequential function cha"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 374,
    "text": "ss_decl ';'\n   {program_access_decl ';' }\n'END_VAR'\nprogram_access_decl ::= access_name ':' symbolic_variable ':'\nnon_generic_type_name [direction]\nSEMANTICS: see 2.5.3.\nB.1.6  Sequential function chart elements\nPRODUCTION RULES:\nsequential_function_chart ::= sfc_network {sfc_network}\nsfc_network ::= initial_step {step | transition | action}\ninitial_step ::=\n'INITIAL_STEP' step_name ':' {action_association ';'} 'END_STEP'\nstep ::= 'STEP' step_name ':' {action_association ';'} 'END_STEP'\nstep_name ::= identifier\naction_association ::=\naction_name '(' [action_qualifier] {',' indicator_name} ')'\naction_name ::= identifier\naction_qualifier ::=\n'N' | 'R' | 'S' | 'P' | timed_qualifier ',' action_time\ntimed_qualifier ::= 'L' | 'D' | 'SD' | 'DS' | 'SL'\naction_time ::= duration | variable_name\nindicator_name ::= variable_name\ntransition ::= ‘TRANSITION’\n[transition_name] ['(' 'PRIORITY' ':=' integer ')']\n'FROM' steps 'TO' steps\ntransition_condition\n'END_TRANSITION'\ntransition_name ::= identifier\nsteps ::= step_name | '(' step_name ',' step_name {',' step_name} ')'\ntransition_condition ::= ':' simple_instruction_list | ':=' expression\n';' | ':' (fbd_network | rung)\nCopyright International El"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 375,
    "text": "r\nsteps ::= step_name | '(' step_name ',' step_name {',' step_name} ')'\ntransition_condition ::= ':' simple_instruction_list | ':=' expression\n';' | ':' (fbd_network | rung)\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 157 –\naction ::= 'ACTION' action_name ':'\n          function_block_body\n       'END_ACTION'\nSEMANTICS: see 2.6.  The use of function block diagram networks and ladder diagram rungs,\ndenoted by the non-terminals fbd_network and rung, respectively, for the expression of transition\nconditions shall be as defined in 2.6.3.\nNOTE 1 The non-terminals simple_instruction_list and expression are defined in\nB.2.1 and B.3.1, respectively.\nNOTE 2 The term [ transition_name] can only be used in the production for transition\nwhen feature 7 of table 41 is supported.  The resulting production is the textual equivalent\nof this feature.\nB.1.7  Configuration elements\nPRODUCTION RULES:\nconfiguration_name ::= identifier\nresource_type_name ::= identifier\nconfiguration_declaration ::=\n'CONFIGURATION' configuration_"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 376,
    "text": "valent\nof this feature.\nB.1.7  Configuration elements\nPRODUCTION RULES:\nconfiguration_name ::= identifier\nresource_type_name ::= identifier\nconfiguration_declaration ::=\n'CONFIGURATION' configuration_name\n   [global_var_declarations]\n   (single_resource_declaration\n      | (resource_declaration {resource_declaration}))\n   [access_declarations]\n   [instance_specific_initializations]\n'END_CONFIGURATION'\nresource_declaration ::=\n'RESOURCE' resource_name 'ON' resource_type_name\n   [global_var_declarations]\n   single_resource_declaration\n 'END_RESOURCE'\nsingle_resource_declaration ::=\n{task_configuration ';'}\nprogram_configuration ';'\n{program_configuration ';'}\nresource_name ::= identifier\naccess_declarations ::=\n'VAR_ACCESS'\n access_declaration ';'\n {access_declaration ';'}\n'END_VAR'\naccess_declaration ::= access_name ':' access_path ':'\nnon_generic_type_name [direction]\naccess_path ::= [resource_name '.'] direct_variable\n| [resource_name '.'] [program_name '.']\n    {fb_name'.'} symbolic_variable\nglobal_var_reference ::=\n[resource_name '.'] global_var_name ['.' structure_element_name]\naccess_name ::= identifier\nprogram_output_reference ::= program_name '.' symbolic_variable\nCopyright"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 377,
    "text": "variable\nglobal_var_reference ::=\n[resource_name '.'] global_var_name ['.' structure_element_name]\naccess_name ::= identifier\nprogram_output_reference ::= program_name '.' symbolic_variable\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 158 – 61131-3  IEC:2003(E)\nprogram_name ::= identifier\ndirection ::= 'READ_WRITE' | 'READ_ONLY'\ntask_configuration ::= 'TASK' task_name task_initialization\ntask_name := identifier\ntask_initialization ::=\n'(' ['SINGLE' ':=' data_source ',']\n    ['INTERVAL' ':=' data_source ',']\n    'PRIORITY' ':=' integer ')'\ndata_source ::= constant | global_var_reference\n| program_output_reference | direct_variable\nprogram_configuration ::=\n'PROGRAM' [RETAIN | NON_RETAIN]\n  program_name ['WITH' task_name] ':' program_type_name\n  ['(' prog_conf_elements ')']\nprog_conf_elements ::= prog_conf_element {',' prog_conf_element}\nprog_conf_element ::= fb_task | prog_cnxn\nfb_task ::= fb_name 'WITH' task_name\nprog_cnxn ::= symbolic_variable ':=' prog_data_source\n| symbolic_variable '=>' data_sink\nprog_data_source ::=\nconst"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 378,
    "text": "ment}\nprog_conf_element ::= fb_task | prog_cnxn\nfb_task ::= fb_name 'WITH' task_name\nprog_cnxn ::= symbolic_variable ':=' prog_data_source\n| symbolic_variable '=>' data_sink\nprog_data_source ::=\nconstant | enumerated_value | global_var_reference | direct_variable\ndata_sink ::= global_var_reference | direct_variable\ninstance_specific_initializations ::=\n'VAR_CONFIG'\n  instance_specific_init ';'\n  {instance_specific_init ';'}\n'END_VAR'\ninstance_specific_init ::=\nresource_name '.' program_name '.' {fb_name '.'}\n((variable_name [location] ':' located_var_spec_init) |\n (fb_name ':' function_block_type_name ':='\nstructure_initialization))\nSEMANTICS: see 2.7.\nNOTE This syntax does not reflect the fact that location assignments are only allowed for\nreferences to variables which are marked by the asterisk notation at type declaration level.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 159 –\nB.2  Language IL (Instruction List)\nB.2.1  Instructions and operands\nPRODUCTION RULES:\ninstruction_list ::= il_instruction {il"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 379,
    "text": "icense from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 159 –\nB.2  Language IL (Instruction List)\nB.2.1  Instructions and operands\nPRODUCTION RULES:\ninstruction_list ::= il_instruction {il_instruction}\nil_instruction ::= [label':'] [  il_simple_operation\n | il_expression\n | il_jump_operation\n | il_fb_call\n | il_formal_funct_call\n | il_return_operator      ]     EOL {EOL}\nlabel ::= identifier\nil_simple_operation ::= ( il_simple_operator [il_operand] )\n| ( function_name [il_operand_list] )\nil_expression ::= il_expr_operator '(' [il_operand] EOL {EOL}\n[simple_instr_list] ')'\nil_jump_operation ::= il_jump_operator label\nil_fb_call ::= il_call_operator fb_name ['('\n(EOL {EOL} [ il_param_list ]) | [ il_operand_list ] ')']\nil_formal_funct_call ::= function_name '(' EOL {EOL} [il_param_list] ')'\nil_operand ::= constant | variable | enumerated_value\nil_operand_list ::= il_operand {',' il_operand}\nsimple_instr_list ::= il_simple_instruction {il_simple_instruction}\nil_simple_instruction ::=\n(il_simple_operation | il_expression | il_formal_funct_call)\nEOL {EOL}\nil_param_list ::= {il_param_instruction} il_param_last_instruction\nil_param_instruction ::= (il_param_assignment | il_para"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 380,
    "text": "on ::=\n(il_simple_operation | il_expression | il_formal_funct_call)\nEOL {EOL}\nil_param_list ::= {il_param_instruction} il_param_last_instruction\nil_param_instruction ::= (il_param_assignment | il_param_out_assignment)\n',' EOL {EOL}\nil_param_last_instruction ::=\n( il_param_assignment | il_param_out_assignment ) EOL {EOL}\nil_param_assignment ::= il_assign_operator ( il_operand | ( '(' EOL {EOL}\nsimple_instr_list ')' ) )\nil_param_out_assignment ::= il_assign_out_operator variable\nB.2.2  Operators\nPRODUCTION RULES:\nil_simple_operator ::=   'LD' | 'LDN' | 'ST' | 'STN' | 'NOT' | 'S'\n| 'R' | 'S1' | 'R1' | 'CLK' | 'CU' | 'CD' | 'PV'\n| 'IN' | 'PT' | il_expr_operator\nil_expr_operator ::=  'AND' | '&' | 'OR' | 'XOR' | 'ANDN' | '&N' | 'ORN'\n| 'XORN' | 'ADD' | 'SUB' | 'MUL' | 'DIV' | 'MOD' | 'GT' | 'GE' | 'EQ\n' | 'LT' | 'LE' | 'NE'\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 160 – 61131-3  IEC:2003(E)\nil_assign_operator ::= variable_name':='\nil_assign_out_operator ::= ['NOT'] variable_name'=>'\nil_call_operator ::= 'CAL' | 'CALC' | 'CALCN'"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 381,
    "text": "HS\n--``````-`-`,,`,,`,`,,`---\n\n– 160 – 61131-3  IEC:2003(E)\nil_assign_operator ::= variable_name':='\nil_assign_out_operator ::= ['NOT'] variable_name'=>'\nil_call_operator ::= 'CAL' | 'CALC' | 'CALCN'\nil_return_operator ::= 'RET' | 'RETC' | 'RETCN'\nil_jump_operator ::= 'JMP' | 'JMPC' | 'JMPCN'\nSEMANTICS: see 3.2. This syntax does not reflect the possibility for typing IL operators as noted in\ntable 52.\nB.3  Language ST (Structured Text)\nB.3.1  Expressions\nPRODUCTION RULES:\nexpression ::= xor_expression {'OR' xor_expression}\nxor_expression ::= and_expression {'XOR' and_expression}\nand_expression ::= comparison {('&' | 'AND') comparison}\ncomparison ::= equ_expression { ('=' | '<>') equ_expression}\nequ_expression ::= add_expression {comparison_operator add_expression}\ncomparison_operator ::= '<' | '>' | '<=' | '>=' '\nadd_expression ::= term {add_operator term}\nadd_operator ::= '+' | '-'\nterm ::= power_expression  {multiply_operator power_expression}\nmultiply_operator ::= '*' | '/' | 'MOD'\npower_expression ::= unary_expression {'**' unary_expression}\nunary_expression ::= [unary_operator] primary_expression\nunary_operator ::= '-' | 'NOT'\nprimary_expression ::=\nconstant | enumerated_valu"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 382,
    "text": "power_expression ::= unary_expression {'**' unary_expression}\nunary_expression ::= [unary_operator] primary_expression\nunary_operator ::= '-' | 'NOT'\nprimary_expression ::=\nconstant | enumerated_value | variable | '(' expression ')'\n| function_name '(' param_assignment {',' param_assignment} ')'\nSEMANTICS: these definitions have been arranged to show a top-down derivation of expression\nstructure.  The precedence of operations is then implied by a “bottom-up” reading of the definitions of\nthe various kinds of expressions.  Further discussion of the semantics of these definitions is given in\n3.3.1.  See 2.5.1.1 for details of the semantics of function calls.\nB.3.2  Statements\nPRODUCTION RULE:\nstatement_list ::= statement ';' {statement ';'}\nstatement ::= NIL | assignment_statement | subprogram_control_statement\n| selection_statement | iteration_statement\nSEMANTICS: see 3.3.2.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 161 –\nB.3.2.1  Assignment statements\nPRODUCTION RULE:\nassignment_statement ::= variable"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 383,
    "text": "production or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 161 –\nB.3.2.1  Assignment statements\nPRODUCTION RULE:\nassignment_statement ::= variable ':=' expression\nSEMANTICS: see 3.3.2.1.\nB.3.2.2  Subprogram control statements\nPRODUCTION RULES:\nsubprogram_control_statement ::= fb_invocation | 'RETURN'\nfb_invocation ::= fb_name '(' [param_assignment {',' param_assignment}]\n')'\nparam_assignment ::= ([variable_name ':='] expression)\n| (['NOT'] variable_name '=>' variable)\nSEMANTICS: see 3.3.2.2.\nB.3.2.3  Selection statements\nPRODUCTION RULES:\nselection_statement ::= if_statement | case_statement\nif_statement ::=\n'IF' expression 'THEN' statement_list\n  {'ELSIF' expression 'THEN' statement_list}\n  ['ELSE' statement_list]\n'END_IF'\ncase_statement ::=\n'CASE' expression 'OF'\n  case_element\n  {case_element}\n  ['ELSE' statement_list]\n'END_CASE'\ncase_element ::= case_list ':' statement_list\ncase_list ::= case_list_element {',' case_list_element}\ncase_list_element ::= subrange | signed_integer | enumerated_value\nSEMANTICS: see 3.3.2.3.\nB.3.2.4  Iteration statements\nPRODUCTION RULES:\niteration_statement ::=\nfor_statement | while_statement | rep"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 384,
    "text": "case_list_element ::= subrange | signed_integer | enumerated_value\nSEMANTICS: see 3.3.2.3.\nB.3.2.4  Iteration statements\nPRODUCTION RULES:\niteration_statement ::=\nfor_statement | while_statement | repeat_statement | exit_statement\nfor_statement ::=\n'FOR' control_variable ':=' for_list 'DO' statement_list 'END_FOR'\ncontrol_variable ::= identifier\nfor_list ::= expression 'TO' expression ['BY' expression]\nwhile_statement ::= 'WHILE' expression 'DO' statement_list 'END_WHILE'\nrepeat_statement ::=\n'REPEAT' statement_list 'UNTIL' expression 'END_REPEAT'\nexit_statement ::= 'EXIT'\nSEMANTICS: see 3.3.2.4.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 162 – 61131-3  IEC:2003(E)\nANNEX C\n(normative)\nDelimiters and keywords\nThe usages of delimiters and keywords in this standard is summarized in tables C.1 and C.2.  National\nstandards organizations can publish tables of translations for the textual portions of the delimiters\nlisted in table C.1 and the keywords listed in table C.2.\nTable C.1 - Delimiters\nDelimiters Subclause Usage\nSpace 2.1."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 385,
    "text": "ons can publish tables of translations for the textual portions of the delimiters\nlisted in table C.1 and the keywords listed in table C.2.\nTable C.1 - Delimiters\nDelimiters Subclause Usage\nSpace 2.1.4 As specified in 2.1.4.\n(* 2.1.5 Begin comment\n*)  End comment\n+ 2.2.1 Leading sign of decimal literal\n3.3.1 Addition operator\n2.2.1 Leading sign of decimal literal\n- 2.2.3.2 Year-month-day separator\n3.3.1 Subtraction, negation operator\n4.1.1 Horizontal line\n# 2.2.1 Based number separator\n2.2.3 Time literal separator\n. 2.2.1 Integer/fraction separator\n2.4.1.1 Hierarchical address separator\n2.4.1.2 Structure element separator\n2.5.2.1 Function block structure separator\ne or E 2.2.1 Real exponent delimiter\n' 2.2.2 Start and end of character string\n$ 2.2.2 Start of special character in strings\n2.2.3 - Time literal delimiters, including:\nT#, D, H, M, S, MS, DATE#, D#, TIME_OF_DAY#, TOD#, DATE_AND_TIME#, DT#\n2.2.3.2 Time of day separator\n2.3.3.1 Type name/specification separator\n2.4.2 Variable/type separator\n2.6.2 Step name terminator\n: 2.7 RESOURCE name/type separator\n2.7 PROGRAM name/type separator\n2.7\n3.2.1\n4.1.2\nAccess name/path/type separator\nInstruction label terminator\nNetwork label"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 386,
    "text": "type separator\n2.6.2 Step name terminator\n: 2.7 RESOURCE name/type separator\n2.7 PROGRAM name/type separator\n2.7\n3.2.1\n4.1.2\nAccess name/path/type separator\nInstruction label terminator\nNetwork label terminator\n:=\n2.3.3.1\n2.7.1\n3.3.2.1\nInitialization operator\nInput connection operator\nAssignment operator\n() 2.3.3.1 Enumeration list delimiters\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 163 –\nTable C.1 - Delimiters\nDelimiters Subclause Usage\n() 2.3.3.1 Subrange delimiters\n[] 2.4.1.2 Array subscript delimiters\n[] 2.4.2 String length delimiters\n() 2.4.2 Multiple initialization\n() 3.2.2 Instruction List modifier/operator\n() 3.3.1 Function arguments\n() 3.3.1 Subexpression hierarchy\n() 3.3.2.2 Function block input list delimiters\n2.3.3.1 Enumeration list separator\n2.3.3.2 Initial value separator\n2.4.1 Array subscript separator\n2.4.2 Declared variable separator\n, 2.5.2.1 Function block initial value separator\n2.5.2.1 Function block input list separator\n3.2.1 Operand list separator\n3.3.1 Function argument list se"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 387,
    "text": "pt separator\n2.4.2 Declared variable separator\n, 2.5.2.1 Function block initial value separator\n2.5.2.1 Function block input list separator\n3.2.1 Operand list separator\n3.3.1 Function argument list separator\n3.3.2.3 CASE value list separator\n; 2.3.3.1 Type declaration separator\n3.3 Statement separator\n.. 2.3.3.1 Subrange separator\n3.3.2.3 CASE range separator\n% 2.4.1.1 Direct representation prefix\n=> 2.7.1 Output connection operator\n3.3.1 - Infix operators, including:\n**, NOT, *, /, MOD, +, -, <, >, <= >=, =, <>, &, AND, XOR, OR\n| or ! 4.1.1 Vertical lines\nTable C.2 - Keywords\nKeywords Subclause\nACTION...END_ACTION 2.6.4.1\nARRAY...OF 2.3.3.1\nAT 2.4.3\nCASE...OF...ELSE...END_CASE 3.3.2.3\nCONFIGURATION...END_CONFIGURATION 2.7.1\nCONSTANT 2.4.3\nData type names 2.3\nEN, ENO 2.5.1.2, 2.5.2.1a\nEXIT 3.3.2.4\nFALSE 2.2.1\nF_EDGE 2.5.2.2\nFOR...TO...BY...DO...END_FOR 3.3.2.4\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 164 – 61131-3  IEC:2003(E)\nTable C.2 - Keywords\nKeywords Subclause\nFUNCTION...END_FUNCTION 2.5.1.3\nFunction names 2.5.1\nFUNC"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 388,
    "text": "etworking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 164 – 61131-3  IEC:2003(E)\nTable C.2 - Keywords\nKeywords Subclause\nFUNCTION...END_FUNCTION 2.5.1.3\nFunction names 2.5.1\nFUNCTION_BLOCK...END_FUNCTION_BLOCK 2.5.2.2\nFunction Block names 2.5.2\nIF...THEN...ELSIF...ELSE...END_IF 3.3.2.3\nINITIAL_STEP...END_STEP 2.6.2\nNOT, MOD, AND, XOR, OR 3.3.1\nPROGRAM...WITH... 2.7.1\nPROGRAM...END_PROGRAM 2.5.3\nR_EDGE 2.5.2.2\nREAD_ONLY, READ_WRITE 2.7.1\nREPEAT...UNTIL...END_REPEAT 3.3.2.4\nRESOURCE...ON...END_RESOURCE 2.7.1\nRETAIN, NON_RETAIN 2.4.3\nRETURN 3.3.2.2\nSTEP...END_STEP 2.6.2\nSTRUCT...END_STRUCT 2.3.3.1\nTASK 2.7.2\nTRANSITION...FROM...TO...END_TRANSITION 2.6.3\nTRUE 2.2.1\nTYPE...END_TYPE 2.3.3.1\nVAR...END_VAR 2.4.3\nVAR_INPUT...END_VAR 2.4.3\nVAR_OUTPUT...END_VAR 2.4.3\nVAR_IN_OUT...END_VAR 2.4.3\nVAR_TEMP...END_VAR 2.4.3\nVAR_EXTERNAL...END_VAR 2.4.3\nVAR_ACCESS...END_VAR 2.7.1\nVAR_CONFIG...END_VAR 2.7.1\nVAR_GLOBAL...END_VAR 2.7.1\nWHILE...DO...END_WHILE 3.3.2.4\nWITH 2.7.1\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 389,
    "text": "ht International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 165 –\nANNEX D\n(normative)\nImplementation-dependent parameters\nThe implementation-dependent parameters defined in this standard, and the primary reference clause\nfor each, are listed in table D.1.\nNOTE Other implementation-dependent parameters such as the accuracy, precision and\nrepeatability of timing and execution control features may have significant effects on the\nportability of programs but are beyond the scope of this part of IEC 61131.\nTable D.1 - Implementation-dependent parameters\nSublause Parameters\n2.1.2 Maximum length of identifiers\n2.1.5 Maximum comment length\n2.1.6 Syntax and semantics of pragmas\n2.2.2 Syntax and semantics for the use of the double-quote character when a\nparticular implementation supports feature 4 but not feature 2 of table 5.\n2.3.1 Range of values and precision of representation for variables of type TIME,\nDATE, TIME_OF_DAY and DATE_AND_TIME\nPrecision of representation of seconds in types TIME, TIME_OF_DAY and\nDATE_AND_TIME\n2.3.3.1 Maxim"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 390,
    "text": "values and precision of representation for variables of type TIME,\nDATE, TIME_OF_DAY and DATE_AND_TIME\nPrecision of representation of seconds in types TIME, TIME_OF_DAY and\nDATE_AND_TIME\n2.3.3.1 Maximum number of enumerated values\nMaximum number of array subscripts\nMaximum array size\nMaximum number of structure elements\nMaximum structure size\nMaximum range of subscript values\nMaximum number of levels of nested structures\n2.3.3.2 Default maximum length of STRING and WSTRING variables\nMaximum allowed length of STRING and WSTRING variables\n2.4.1.1 Maximum number of hierarchical levels\nLogical or physical mapping\n2.4.2 Initialization of system inputs\n2.4.3 Maximum number of variables per declaration\nEffect of using AT qualifier in declaration of function block instances\nWarm start behavior if variable is declared as neither RETAIN nor NON_RETAIN\n2.5 Information to determine execution times of program organization units\n2.5.1.2 Values of outputs when ENO is FALSE\n2.5.1.3 Maximum number of function specifications\n2.5.1.5 Maximum number of inputs of extensible functions\n2.5.1.5.1 Effects of type conversions on accuracy\nError conditions during type conversions\n2.5.1.5.2 Accuracy of numeric"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 391,
    "text": "unction specifications\n2.5.1.5 Maximum number of inputs of extensible functions\n2.5.1.5.1 Effects of type conversions on accuracy\nError conditions during type conversions\n2.5.1.5.2 Accuracy of numerical functions\n2.5.1.5.6 Effects of type conversions between time data types and other data types not\ndefined in table 30\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 166 – 61131-3  IEC:2003(E)\nTable D.1 - Implementation-dependent parameters\nSublause Parameters\n2.5.2 Maximum number of function block specifications and instantiations\n2.5.2.1a Function block input variable assignment when EN is FALSE\n2.5.2.3.3 Pvmin, Pvmax of counters\n2.5.2.3.4 Effect of a change in the value of a PT input during a timing operation\n2.5.3 Program size limitations\n2.6.2 Precision of step elapsed time\nMaximum number of steps per SFC\n2.6.3 Maximum number of transitions per SFC and per step\n2.6.4.2 Maximum number of action blocks per step\n2.6.4.5 Access to the functional equivalent of the Q or A outputs\n2.6.5 Transition clearing time\nMaximum width of diver"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 392,
    "text": "ransitions per SFC and per step\n2.6.4.2 Maximum number of action blocks per step\n2.6.4.5 Access to the functional equivalent of the Q or A outputs\n2.6.5 Transition clearing time\nMaximum width of diverge/converge constructs\n2.7.1 Contents of RESOURCE libraries\n2.7.1 Effect of using READ_WRITE access to function block outputs\n2.7.2 Maximum number of tasks\nTask interval resolution\n3.3.1 Maximum length of expressions\n3.3.2 Maximum length of statements\n3.3.2.3 Maximum number of CASE selections\n3.3.2.4 Value of control variable upon termination of FOR loop\n4.1.1 Restrictions on network topology\n4.1.3 Evaluation order of feedback loops\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 167 –\nANNEX E\n(normative)\nError conditions\nThe error conditions defined in this standard, and the primary reference clause for each, are listed in\ntable E.1.  These errors may be detected during preparation of the program for execution or during\nexecution of the program.  The manufacturer shall specify the disposition of these errors acc"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 393,
    "text": "sted in\ntable E.1.  These errors may be detected during preparation of the program for execution or during\nexecution of the program.  The manufacturer shall specify the disposition of these errors according to\nthe provisions of subclause 1.5.1 of this part of IEC 61131.\nTable E.1 - Error conditions\nSubclause Error conditions\n2.1.5 Nested comments\n2.3.3.1 Ambiguous enumerated value\n2.3.3.1 Value of a variable exceeds the specified subrange\n2.4.1.1 Missing configuration of an incomplete address specification (\"*\" notation)\n2.4.3 Attempt by a program organization unit to modify a variable which has been\ndeclared CONSTANT\n2.4.3 Declaration of a variable as VAR_GLOBAL CONSTANT in a containing\nelement having a contained element in which the same variable is declared\nVAR_EXTERNAL without the CONSTANT qualifier.\n2.5.1 Improper use of directly represented or external variables in functions\n2.5.1.1 A VAR_IN_OUT variable is not “properly mapped”\n2.5.1.1 Ambiguous value caused by a VAR_IN_OUT connection\n2.5.1.5.1 Type conversion errors\n2.5.1.5.2 Numerical result exceeds range for data type\nDivision by zero\n2.5.1.5.3 N input is less than zero in a bit-shift function\n2.5.1.5.4 Mixed input data t"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 394,
    "text": "ection\n2.5.1.5.1 Type conversion errors\n2.5.1.5.2 Numerical result exceeds range for data type\nDivision by zero\n2.5.1.5.3 N input is less than zero in a bit-shift function\n2.5.1.5.4 Mixed input data types to a selection function\nSelector (K) out of range for MUX function\n2.5.1.5.5 Invalid character position specified\nResult exceeds maximum string length\nANY_INT input is less than zero in a string function\n2.5.1.5.6 Result exceeds range for data type\n2.5.2.2 No value specified for a function block instance used as input variable\n2.5.2.2 No value specified for an in-out variable\n2.6.2 Zero or more than one initial steps in SFC network\nUser program attempts to modify step state or time\n2.6.3 Side effects in evaluation of transition condition\n2.6.4.5 Action control contention error\n2.6.5 Simultaneously true, non-prioritized transitions in a selection divergence\nUnsafe or unreachable SFC\n2.7.1 Data type conflict in VAR_ACCESS\n2.7.2 A task fails to be scheduled or to meet its execution deadline\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`-"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 395,
    "text": "ine\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 168 – 61131-3  IEC:2003(E)\nTable E.1 - Error conditions\nSubclause Error conditions\n3.2.2 Numerical result exceeds range for data type\nCurrent result and operand not of same data type\n3.3.1 Division by zero\nNumerical result exceeds range for data type\nInvalid data type for operation\n3.3.2.1 Return from function without value assigned\n3.3.2.4 Iteration fails to terminate\n4.1.1 Same identifier used as connector label and element name\n4.1.3 Uninitialized feedback variable\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 169 –\nANNEX F\n(informative)\nExamples\nF.1  Function WEIGH\nExample function WEIGH provides the functions of BCD-to-binary conversion of a gross-weight input\nfrom a scale, the binary integer subtraction of a tare weight which has been previously converted and\nstored in the memory of the programmabl"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 396,
    "text": "ctions of BCD-to-binary conversion of a gross-weight input\nfrom a scale, the binary integer subtraction of a tare weight which has been previously converted and\nstored in the memory of the programmable controller, and the conversion of the resulting net weight\nback to BCD form, for example, for an output display.  The “\nEN” input is used to indicate that the scale\nis ready to perform the weighing operation.\nThe “ENO” output indicates that an appropriate command exists (for example, from an operator\npushbutton), the scale is in proper condition for the weight to be read, and each function has a correct\nresult.\nA textual form of the declaration of this function is:\nFUNCTION WEIGH : WORD     (* BCD encoded *)\n  VAR_INPUT  (* \"EN\" input is used to indicate \"scale ready\" *)\n    weigh_command : BOOL;\n    gross_weight : WORD ; (* BCD encoded *)\n    tare_weight : INT ;\n  END_VAR\n(* Function Body *)\nEND_FUNCTION                     (* Implicit \"ENO\" *)\nThe body of function WEIGH in the IL language is:\nLD weigh_command\nJMPC WEIGH_NOW\nST ENO (* No weighing, 0 to \"ENO\" *)\nRET\nWEIGH_NOW: LD gross_weight\nBCD_TO_INT\nSUB tare_weight\nINT_TO_BCD (* Return evaluated weight *)\nST WEIGH\nThe body of fun"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 397,
    "text": "age is:\nLD weigh_command\nJMPC WEIGH_NOW\nST ENO (* No weighing, 0 to \"ENO\" *)\nRET\nWEIGH_NOW: LD gross_weight\nBCD_TO_INT\nSUB tare_weight\nINT_TO_BCD (* Return evaluated weight *)\nST WEIGH\nThe body of function WEIGH in the ST language is:\nIF weigh_command THEN\n  WEIGH := INT_TO_BCD (BCD_TO_INT(gross_weight) - tare_weight);\nEND_IF ;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 170 – 61131-3  IEC:2003(E)\nAn equivalent graphical declaration of function WEIGH is:\n                       +-------------------------+\n                       |        WEIGH            |\n                BOOL---|EN                    ENO|---BOOL\n                BOOL---|weigh_command            |---WORD\n                WORD---|gross_weight             |\n                INT----|tare_weight              |\n                       +-------------------------+\nThe function body in the LD language is:\n|               +--------+              +--------+             |\n|               |  BCD_  |  +-------+   |  INT_  |             |\n| weigh_command | TO_INT |  |  SUB  |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 398,
    "text": "n body in the LD language is:\n|               +--------+              +--------+             |\n|               |  BCD_  |  +-------+   |  INT_  |             |\n| weigh_command | TO_INT |  |  SUB  |   | TO_BCD |    ENO      |\n+-------| |-----|EN   ENO|--|EN  ENO|---|EN   ENO|----( )------+\n|               |        |  |       |   |        |             |\n| gross_weight--|        |--|       |---|        |--WEIGH      |\n|               +--------+  |       |   +--------+             |\n| tare_weight---------------|       |                          |\n|                           +-------+                          |\nThe function body in the FBD language is:\n                +--------+               +--------+\n                |  BCD_  |   +-------+   |  INT_  |\n                | TO_INT |   |  SUB  |   | TO_BCD |\nweigh_command---|EN   ENO|---|EN  ENO|---|EN   ENO|---ENO\ngross_weight----|        |---|       |---|        |--WEIGH\n                +--------+   |       |   +--------+\ntare_weight------------------|       |\n                             +-------+\nF.2  Function block CMD_MONITOR\nExample function block CMD_MONITOR illustrates the control of an operative unit which is capable of\nrespondi"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 399,
    "text": "-----------|       |\n                             +-------+\nF.2  Function block CMD_MONITOR\nExample function block CMD_MONITOR illustrates the control of an operative unit which is capable of\nresponding to a Boolean command (the CMD output) and returning a Boolean feedback signal (the\nFDBK input) indicating successful completion of the commanded action.  The function block provides\nfor manual control via the MAN_CMD input, or automated control via the AUTO_CMD input,\ndepending on the state of the AUTO_MODE input (0 or 1 respectively).  Verification of the MAN_CMD\ninput is provided via the MAN_CMD_CHK input, which must be 0 in order to enable the MAN_CMD\ninput.\nIf confirmation of command completion is not received on the \nFDBK input within a predetermined time\nspecified by the T_CMD_MAX input, the command is cancelled and an alarm condition is signalled via\nthe ALRM output.  The alarm condition may be cancelled by the ACK (acknowledge) input, enabling\nfurther operation of the command cycle.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 400,
    "text": "cle.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 171 –\nA textual form of the declaration of function block CMD_MONITOR is:\nFUNCTION_BLOCK CMD_MONITOR\n VAR_INPUT AUTO_CMD : BOOL ; (* Automated command *)\n          AUTO_MODE : BOOL ; (* AUTO_CMD enable *)\n            MAN_CMD : BOOL ; (* Manual Command *)\n        MAN_CMD_CHK : BOOL ; (* Negated MAN_CMD to debounce *)\n          T_CMD_MAX : TIME ; (* Max time from CMD to FDBK *)\n               FDBK : BOOL ; (* Confirmation of CMD completion\n                                by operative unit *)\n                ACK : BOOL ; (* Acknowledge/cancel ALRM *)\n END_VAR\n VAR_OUTPUT CMD : BOOL ;   (* Command to operative unit *)\n           ALRM : BOOL ;   (* T_CMD_MAX expired without FDBK *)\n END_VAR\n VAR CMD_TMR : TON ;    (* CMD-to-FDBK timer *)\n     ALRM_FF : SR ;     (* Note over-riding S input: *)\n END_VAR                (* Command must be cancelled before\n                              \"ACK\" can cancel alarm *)\n(* Function Block Body *)\nEND_FUNCTION_BLOCK\nAn equivale"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 401,
    "text": "ote over-riding S input: *)\n END_VAR                (* Command must be cancelled before\n                              \"ACK\" can cancel alarm *)\n(* Function Block Body *)\nEND_FUNCTION_BLOCK\nAn equivalent graphical declaration is:\n       +---------------+\n       |  CMD_MONITOR  |\nBOOL---|AUTO_CMD    CMD|---BOOL\nBOOL---|AUTO_MODE  ALRM|---BOOL\nBOOL---|MAN_CMD        |\nBOOL---|MAN_CMD_CHK    |\nTIME---|T_CMD_MAX      |\nBOOL---|FDBK           |\nBOOL---|ACK            |\n       +---------------+\nThe body of function block CMD_MONITOR in the ST language is:\n    CMD := AUTO_CMD & AUTO_MODE\n          OR MAN_CMD & NOT MAN_CMD_CHK & NOT AUTO_MODE ;\n    CMD_TMR (IN := CMD, PT := T_CMD_MAX);\n    ALRM_FF (S1 := CMD_TMR.Q & NOT FDBK, R := ACK);\n    ALRM := ALRM_FF.Q1;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 172 – 61131-3  IEC:2003(E)\nThe body of function block CMD_MONITOR in the IL language is:\nLD T_CMD_MAX\nST CMD_TMR.PT (* Store an input to the TON FB *)\nLD AUTO_CMD\nAND AUTO_MODE\nOR( MAN_CMD\nANDN AUTO_MODE\nANDN MAN_CMD_CHK\n)\nST CMD\nIN CM"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 402,
    "text": "of function block CMD_MONITOR in the IL language is:\nLD T_CMD_MAX\nST CMD_TMR.PT (* Store an input to the TON FB *)\nLD AUTO_CMD\nAND AUTO_MODE\nOR( MAN_CMD\nANDN AUTO_MODE\nANDN MAN_CMD_CHK\n)\nST CMD\nIN CMD_TMR (* Invoke the TON FB *)\nLD CMD_TMR.Q\nANDN FDBK\nST ALRM_FF.S1 (* Store an input to the SR FB *)\nLD ACK\nR ALRM_FF (* Invoke the SR FB *)\nLD ALRM_FF.Q1\nST ALRM\nThe body of function block CMD_MONITOR in the LD language is:\n        |                                            |\n        | AUTO_MODE  AUTO_CMD                   CMD  |\n        +--| |--------| |-------------------+---( )--+\n        |                                   |        |\n        | AUTO_MODE  MAN_CMD  MAN_CMD_CHECK |        |\n        +--|/|-------| |------|/|-----------+        |\n        |                                            |\n        |  ACK                                ALRM   |\n        +--| |---------------------------------(R)---+\n        |            CMD_TMR                         |\n        |            +-----+                         |\n        |  CMD       | TON |      FDBK        ALRM   |\n        +--| |-------|IN  Q|------|/|----------(S)---+\n        | T_CMD_MAX--|PT ET|                         |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 403,
    "text": "--+                         |\n        |  CMD       | TON |      FDBK        ALRM   |\n        +--| |-------|IN  Q|------|/|----------(S)---+\n        | T_CMD_MAX--|PT ET|                         |\n        |            +-----+                         |\n        |                                            |\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 173 –\nThe body of function block CMD_MONITOR in the FBD language is:\n              +-+    +---+\nAUTO_CMD------|&|----|>=1|--+-------------------------------CMD\nAUTO_MODE--+--| | +--|   |  |\n           |  +-+ |  +---+  |\n           |      |         |\n           |  +-+ |         |  CMD_TMR              ALRM_FF\n           +-O|&| |         |  +-----+             +-----+\nMAN_CMD-------| |-+         |  | TON |      +-+    | SR  |\nMAN_CMD_CHK--O| |           +--|IN  Q|------|&|----|S1 Q1|--ALRM\n              +-+              |     |  +--O| | +--|R    |\nT_CMD_MAX----------------------|PT ET|  |   +-+ |  +-----+\n                               +-----+  |       |\nFDBK------"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 404,
    "text": "-|&|----|S1 Q1|--ALRM\n              +-+              |     |  +--O| | +--|R    |\nT_CMD_MAX----------------------|PT ET|  |   +-+ |  +-----+\n                               +-----+  |       |\nFDBK------------------------------------+       |\nACK---------------------------------------------+\nF.3  Function block FWD_REV_MON\nExample function block FWD_REV_MON illustrates the control of an operative unit capable of two-way\npositioning action, for example, a motor-operated valve. Both automated and manual control modes\nare possible, with alarm capabilities provided for each direction of motion, as described for function\nblock CMD_MONITOR above.  In addition, contention between forward and reverse commands causes\nthe cancellation of both commands and signalling of an alarm condition. The Boolean OR of all alarm\nconditions is made available as a KLAXON output for operator signaling.\nA graphical declaration of this function block is:\n       +----------------------+\n       |     FWD_REV_MON      |\nBOOL---|AUTO            KLAXON|---BOOL\nBOOL---|ACK       FWD_REV_ALRM|---BOOL\nBOOL---|AUTO_FWD       FWD_CMD|---BOOL\nBOOL---|MAN_FWD       FWD_ALRM|---BOOL\nBOOL---|MAN_FWD_CHK           |\nTIME---|T_"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 405,
    "text": "|\nBOOL---|AUTO            KLAXON|---BOOL\nBOOL---|ACK       FWD_REV_ALRM|---BOOL\nBOOL---|AUTO_FWD       FWD_CMD|---BOOL\nBOOL---|MAN_FWD       FWD_ALRM|---BOOL\nBOOL---|MAN_FWD_CHK           |\nTIME---|T_FWD_MAX             |\nBOOL---|FWD_FDBK              |\nBOOL---|AUTO_REV       REV_CMD|---BOOL\nBOOL---|MAN_REV       REV_ALRM|---BOOL\nBOOL---|MAN_REV_CHK           |\nTIME---|T_REV_MAX             |\nBOOL---|REV_FDBK              |\n       +----------------------+\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 174 – 61131-3  IEC:2003(E)\nA textual form of the declaration of function block FWD_REV_MON is:\nFUNCTION_BLOCK FWD_REV_MON\nVAR_INPUT AUTO : BOOL ;(* Enable automated commands *)\n  ACK : BOOL ;         (* Acknowledge/cancel all alarms *)\n  AUTO_FWD : BOOL ;    (* Automated forward command *)\n  MAN_FWD : BOOL ;     (* Manual forward command *)\n  MAN_FWD_CHK : BOOL ; (* Negated MAN_FWD for debouncing *)\n  T_FWD_MAX : TIME ;  (* Maximum time from FWD_CMD to FWD_FDBK *)\n  FWD_FDBK : BOOL ;    (* Confirmation of FWD_CMD completion *)"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 406,
    "text": "nd *)\n  MAN_FWD_CHK : BOOL ; (* Negated MAN_FWD for debouncing *)\n  T_FWD_MAX : TIME ;  (* Maximum time from FWD_CMD to FWD_FDBK *)\n  FWD_FDBK : BOOL ;    (* Confirmation of FWD_CMD completion *)\n                       (*   by operative unit *)\n  AUTO_REV : BOOL ;    (* Automated reverse command *)\n  MAN_REV : BOOL ;     (* Manual reverse command *)\n  MAN_REV_CHK : BOOL ; (* Negated MAN_REV for debouncing *)\n  T_REV_MAX : TIME ;  (* Maximum time from REV_CMD to REV_FDBK *)\n  REV_FDBK : BOOL ;    (* Confirmation of REV_CMD completion *)\nEND_VAR                (*    by operative unit *)\nVAR_OUTPUT KLAXON : BOOL ;      (* Any alarm active *)\n  FWD_REV_ALRM : BOOL; (* Forward/reverse command conflict *)\n  FWD_CMD : BOOL ;     (* \"Forward\" command to operative unit *)\n  FWD_ALRM : BOOL ;    (* T_FWD_MAX expired without FWD_FDBK *)\n  REV_CMD : BOOL ;     (* \"Reverse\" command to operative unit *)\n  REV_ALRM : BOOL ;    (* T_REV_MAX expired without REV_FDBK *)\nEND_VAR\nVAR FWD_MON : CMD_MONITOR; (* \"Forward\" command monitor *)\n  REV_MON : CMD_MONITOR;   (* \"Reverse\" command monitor *)\n  FWD_REV_FF : SR ;      (* Forward/Reverse contention latch *)\nEND_VAR\n(* Function Block body *)\nEND_FUNCT"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 407,
    "text": "; (* \"Forward\" command monitor *)\n  REV_MON : CMD_MONITOR;   (* \"Reverse\" command monitor *)\n  FWD_REV_FF : SR ;      (* Forward/Reverse contention latch *)\nEND_VAR\n(* Function Block body *)\nEND_FUNCTION_BLOCK\nThe body of function block FWD_REV_MON can be written in the ST language as:\n(* Evaluate internal function blocks *)\n  FWD_MON    (AUTO_MODE   := AUTO,\n              ACK         := ACK,\n              AUTO_CMD    := AUTO_FWD,\n              MAN_CMD     := MAN_FWD,\n              MAN_CMD_CHK := MAN_FWD_CHK,\n              T_CMD_MAX   := T_FWD_MAX,\n              FDBK        := FWD_FDBK);\n  REV_MON    (AUTO_MODE   := AUTO,\n              ACK         := ACK,\n              AUTO_CMD    := AUTO_REV,\n              MAN_CMD     := MAN_REV,\n              MAN_CMD_CHK := MAN_REV_CHK,\n              T_CMD_MAX   := T_REV_MAX,\n              FDBK        := REV_FDBK);\n  FWD_REV_FF (S1 := FWD_MON.CMD & REV_MON.CMD, R := ACK);\n(* Transfer data to outputs *)\n  FWD_REV_ALRM := FWD_REV_FF.Q1;\n  FWD_CMD := FWD_MON.CMD & NOT FWD_REV_ALRM;\n  FWD_ALRM := FWD_MON.ALRM;\n  REV_CMD := REV_MON.CMD & NOT FWD_REV_ALRM;\n  REV_ALRM := REV_MON.ALRM;\n  KLAXON := FWD_ALRM OR REV_ALRM OR FWD_REV_ALRM;\nCopyright Internati"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 408,
    "text": "D_MON.CMD & NOT FWD_REV_ALRM;\n  FWD_ALRM := FWD_MON.ALRM;\n  REV_CMD := REV_MON.CMD & NOT FWD_REV_ALRM;\n  REV_ALRM := REV_MON.ALRM;\n  KLAXON := FWD_ALRM OR REV_ALRM OR FWD_REV_ALRM;\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 175 –\nThe body of function block FWD_REV_MON in the IL language is:\n(* Evaluate internal function blocks *)\nCAL FWD_MON(\nAUTO_MODE:= AUTO,\nACK:= ACK,\nAUTO_CMD:= AUTO_FWD,\nMAN_CMD:= MAN_FWD,\nMAN_CMD_CHK:= MAN_FWD_CHK,\nT_CMD_MAX:= T_FWD_MAX,\nFDBK:= FWD_FDBK\n)\nCAL REV_MON(\nAUTO_MODE:= AUTO,\nACK:= ACK,\nAUTO_CMD:= AUTO_REV,\nMAN_CMD:= MAN_REV,\nMAN_CMD_CHK:= MAN_REV_CHK,\nT_CMD_MAX:= T_REV_MAX,\nFDBK:= REV_FDBK\n)\nCAL FWD_REV_FF(\nS1:=(\nLD FWD_MON.CMD\nAND REV_MON.CMD\n),\nR:= ACK,\nQ => FWD_REV_ALRM (* Contention alarm *)\n)\n(* Transfer data to outputs *)\nLD FWD_MON.CMD (* \"Forward\" command and alarm *)\nANDN FWD_REV_ALRM\nST FWD_CMD\nLD FWD_MON.ALRM\nST FWD_ALRM\nLD REV_MON.CMD (* \"Reverse\" command and alarm *)\nANDN FWD_REV_ALRM\nST REV_CMD\nLD REV_MON.ALRM\nST REV_ALRM\nOR FWD_ALRM (* OR all alarms *)\nOR F"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 409,
    "text": "ANDN FWD_REV_ALRM\nST FWD_CMD\nLD FWD_MON.ALRM\nST FWD_ALRM\nLD REV_MON.CMD (* \"Reverse\" command and alarm *)\nANDN FWD_REV_ALRM\nST REV_CMD\nLD REV_MON.ALRM\nST REV_ALRM\nOR FWD_ALRM (* OR all alarms *)\nOR FWD_REV_ALRM\nST KLAXON\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 176 – 61131-3  IEC:2003(E)\nThe body of function block FWD_REV_MON in the FBD language is:\n                       FWD_MON\n                  +---------------+\n                  |  CMD_MONITOR  |\nAUTO_FWD----------|AUTO_CMD    CMD|--+\nAUTO---------+----|AUTO_MODE  ALRM|--|-------FWD_ALRM\nMAN_FWD------|----|MAN_CMD        |  |\nMAN_FWD_CHK--|----|MAN_CMD_CHK    |  |\nFWD_FDBK-----|----|FDBK           |  |\nACK----------|-+--|ACK            |  |\nT_FWD_MAX----|-|--|T_CMD_MAX      |  |  +---+\n             | |  +---------------+  +--| & |-------------+\n             | |                     +--|   |             |\n             | |       REV_MON       |  +---+             |\n             | |  +---------------+  |                    |\n             | |  |  CMD_MONITOR  |  |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 410,
    "text": "+--|   |             |\n             | |       REV_MON       |  +---+             |\n             | |  +---------------+  |                    |\n             | |  |  CMD_MONITOR  |  |                    |\nAUTO_REV-----|-|--|AUTO_CMD    CMD|--+                    |\n             +-|--|AUTO_MODE  ALRM|---------REV_ALRM      |\nMAN_REV--------|--|MAN_CMD        |                       |\nMAN_REV_CHK----|--|MAN_CMD_CHK    |                       |\nREV_FDBK-------|--|FDBK           |                       |\n               +--|ACK            |                       |\nT_REV_MAX---------|T_CMD_MAX      |                       |\n                  +---------------+                       |\n         +------------------------------------------------+\n         |    FWD_REV_FF\n         |     +------+\n         |     |  SR  |\n         +-----|S1  Q1|--+----------------FWD_REV_ALRM\nACK------------|R     |  |\n               +------+  |   +-----+\n                         +---| >=1 |------KLAXON\nFWD_MON.ALRM-------------|---|     |\nREV_MON.ALRM-------------|---|     |\n                         |   +-----+\n                         |\n                         |   +---+\n                         +--O| &"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 411,
    "text": "N.ALRM-------------|---|     |\nREV_MON.ALRM-------------|---|     |\n                         |   +-----+\n                         |\n                         |   +---+\n                         +--O| & |--------FWD_CMD\nFWD_MON.CMD--------------|---|   |\n                         |   +---+\n                         |\n                         |   +---+\n                         +--O| & |--------REV_CMD\nREV_MON.CMD------------------|   |\n                             +---+\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 177 –\nThe body of function block FWD_REV_MON in the LD language is:\n|                   FWD_MON                  |\n|              +---------------+             |\n| AUTO_FWD     |  CMD_MONITOR  |             |\n+--| |---------|AUTO_CMD    CMD|             |\n|  AUTO        |               |   FWD_ALRM  |\n+--| |---------|AUTO_MODE  ALRM|-------( )---+\n|  MAN_FWD     |               |             |\n+--| |---------|MAN_CMD        |             |\n|  MAN_FWD_CHK |               |             |\n+--| |---------|"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 412,
    "text": "|---------|AUTO_MODE  ALRM|-------( )---+\n|  MAN_FWD     |               |             |\n+--| |---------|MAN_CMD        |             |\n|  MAN_FWD_CHK |               |             |\n+--| |---------|MAN_CMD_CHK    |             |\n|  FWD_FDBK    |               |             |\n+--| |---------|FDBK           |             |\n|  ACK         |               |             |\n+--| |---------|ACK            |             |\n|              |               |             |\n|  T_FWD_MAX---|T_CMD_MAX      |             |\n|              +---------------+             |\n|                                            |\n|                   REV_MON                  |\n|              +---------------+             |\n| AUTO_REV     |  CMD_MONITOR  |             |\n+--| |---------|AUTO_CMD    CMD|             |\n|  AUTO        |               |   REV_ALRM  |\n+--| |---------|AUTO_MODE  ALRM|-------( )---+\n|  MAN_REV     |               |             |\n+--| |---------|MAN_CMD        |             |\n|  MAN_REV_CHK |               |             |\n+--| |---------|MAN_CMD_CHK    |             |\n|  REV_FDBK    |               |             |\n+--| |---------|FDBK           |             |\n|  ACK         |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 413,
    "text": "|             |\n+--| |---------|MAN_CMD_CHK    |             |\n|  REV_FDBK    |               |             |\n+--| |---------|FDBK           |             |\n|  ACK         |               |             |\n+--| |---------|ACK            |             |\n|              |               |             |\n|  T_REV_MAX---|T_CMD_MAX      |             |\n|              +---------------+             |\n|                                            |\n|     ACK                      FWD_REV_ALRM  |\n+-----| |--------------------------(R)-------+\n|                                            |\n| FWD_MON.CMD   REV_MON.CMD    FWD_REV_ALRM  |\n+-----| |-----------| |------------(S)-------+\n|                                            |\n| FWD_MON.CMD   FWD_REV_ALRM      FWD_CMD    |\n+-----| |-----------|/|-------------( )------+\n|                                            |\n| REV_MON.CMD   FWD_REV_ALRM      REV_CMD    |\n+-----| |-----------|/|-------------( )------+\n|                                            |\n| FWD_REV_ALRM                    KLAXON     |\n+-----| |------+--------------------( )------+\n|              |                             |\n|  FWD_ALRM    |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 414,
    "text": "|\n| FWD_REV_ALRM                    KLAXON     |\n+-----| |------+--------------------( )------+\n|              |                             |\n|  FWD_ALRM    |                             |\n+-----| |------+                             |\n|              |                             |\n|  REV_ALRM    |                             |\n+-----| |------+                             |\n|                                            |\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 178 – 61131-3  IEC:2003(E)\nF.4  Function block STACK_INT\nThis function block provides a stack of up to 128 integers. The usual stack operations of PUSH and\nPOP are provided by edge-triggered Boolean inputs. An overriding reset ( R1) input is provided; the\nmaximum stack depth ( N) is determined at the time of resetting.  In addition to the top-of-stack data\n(OUT), Boolean outputs are provided indicating stack empty and stack overflow states.\nA textual form of the declaration of this function block is:\nFUNCTION_BLOCK STACK_INT\n  VAR_INPUT PUSH, POP: BOO"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 415,
    "text": "a\n(OUT), Boolean outputs are provided indicating stack empty and stack overflow states.\nA textual form of the declaration of this function block is:\nFUNCTION_BLOCK STACK_INT\n  VAR_INPUT PUSH, POP: BOOL R_EDGE; (* Basic stack operations *)\n            R1 : BOOL ;          (* Over-riding reset *)\n            IN : INT ;           (* Input to be pushed *)\n            N  : INT ;           (* Maximum depth after reset *)\n  END_VAR\n  VAR_OUTPUT EMPTY : BOOL := 1 ;     (* Stack empty *)\n             OFLO  : BOOL := 0 ;     (* Stack overflow *)\n             OUT   : INT  := 0 ;     (* Top of stack data *)\n  END_VAR\n  VAR STK : ARRAY[0..127] OF INT; (* Internal stack *)\n      NI : INT :=128  ;           (* Storage for N upon reset *)\n      PTR : INT := -1 ;           (* Stack pointer *)\n  END_VAR\n    (* Function Block body *)\nEND_FUNCTION_BLOCK\nA graphical declaration of function block STACK_INT is:\n                          +-----------+\n                          | STACK_INT |\n                   BOOL--->PUSH  EMPTY|---BOOL\n                   BOOL--->POP    OFLO|---BOOL\n                   BOOL---|R1      OUT|---INT\n                   INT----|IN         |\n                   INT----|N"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 416,
    "text": "BOOL--->PUSH  EMPTY|---BOOL\n                   BOOL--->POP    OFLO|---BOOL\n                   BOOL---|R1      OUT|---INT\n                   INT----|IN         |\n                   INT----|N          |\n                          +-----------+\n(* Internal variable declarations *)\n  VAR STK : ARRAY[0..127] OF INT ; (* Internal Stack *)\n      NI : INT :=128  ;            (* Storage for N upon Reset *)\n      PTR : INT := -1 ;            (* Stack Pointer *)\n  END_VAR\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 179 –\nThe body of function block STACK_INT in the ST language is:\n    IF R1 THEN\n       OFLO := 0; EMPTY := 1; PTR := -1;\n       NI := LIMIT (MN:=1,IN:=N,MX:=128); OUT := 0;\n    ELSIF POP & NOT EMPTY THEN\n       OFLO := 0; PTR := PTR-1; EMPTY := PTR < 0;\n       IF EMPTY THEN OUT := 0;\n       ELSE OUT := STK[PTR];\n       END_IF ;\n    ELSIF PUSH & NOT OFLO THEN\n       EMPTY := 0; PTR := PTR+1; OFLO := (PTR = NI);\n       IF NOT OFLO THEN OUT := IN ; STK[PTR] := IN;\n       ELSE OUT := 0;\n       END_IF ;\n    E"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 417,
    "text": "TR];\n       END_IF ;\n    ELSIF PUSH & NOT OFLO THEN\n       EMPTY := 0; PTR := PTR+1; OFLO := (PTR = NI);\n       IF NOT OFLO THEN OUT := IN ; STK[PTR] := IN;\n       ELSE OUT := 0;\n       END_IF ;\n    END_IF ;\nThe body of function block STACK_INT in the LD language is:\n|                                                 |\n|    R1                                           |\n+---| |--->>RESET                                 |\n|                                                 |\n|  POP  EMPTY                                     |\n+--| |---|/|--->>POP_STK                          |\n|                                                 |\n|  PUSH  OFLO                                     |\n+--| |---|/|--->>PUSH_STK                         |\n|                                                 |\n|                                                 |\n+--------------<RETURN>                           |\nRESET:\n|      +--------+           +--------+           +-------+            |\n|      |  MOVE  |           |  MOVE  |           | LIMIT |      OFLO  |\n+------|EN   ENO|-----------|EN   ENO|-----------|EN  ENO|--+---(R)---+\n|  0---|        |--OUT -1 --|        |--PTR 128--|MX     |  |  EMPTY  |\n|      +-----"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 418,
    "text": "MOVE  |           | LIMIT |      OFLO  |\n+------|EN   ENO|-----------|EN   ENO|-----------|EN  ENO|--+---(R)---+\n|  0---|        |--OUT -1 --|        |--PTR 128--|MX     |  |  EMPTY  |\n|      +--------+           +--------+        N--|IN     |  +---(S)---+\n|                                             1--|MN     |--NI        |\n|                                                +-------+            |\n+-----------------<RETURN>\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 180 – 61131-3  IEC:2003(E)\nPOP_STK:\n|            +--------+       +--------+          |\n|            |  SUB   |       |   LT   |          |\n+------------|EN   ENO|-------|EN   ENO|   EMPTY  |\n|       PTR--|        |--PTR--|        |----(S)---+\n|         1--|        |    0--|        |          |\n|            +--------+       +--------+          |\n|                                                 |\n|                  +-------+                      |\n|                  |  SEL  |              OFLO    |\n+------------------|EN  ENO|---------------(R)----+\n|  EMPTY"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 419,
    "text": "|\n|                  +-------+                      |\n|                  |  SEL  |              OFLO    |\n+------------------|EN  ENO|---------------(R)----+\n|  EMPTY           |       |                      |\n+---| |------------|G      |---OUT                |\n|       STK[PTR]---|IN0    |                      |\n|             0 ---|IN1    |                      |\n|                  +-------+                      |\n+--------------------------------<RETURN>         |\nPUSH_STK:\n|                                                 |\n|            +--------+       +--------+          |\n|            |  ADD   |       |   EQ   |          |\n+------------|EN   ENO|-------|EN   ENO|   OFLO   |\n|       PTR--|        |--PTR--|        |----(S)---+\n|         1--|        |   NI--|        |          |\n|            +--------+       +--------+          |\n|                                                 |\n|             +------+                            |\n|  OFLO       | MOVE |                            |\n+---|/|-------|EN ENO|----------------------------+\n|        IN---|      |---STK[PTR]                 |\n|             +------+                            |\n|"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 420,
    "text": "|                            |\n+---|/|-------|EN ENO|----------------------------+\n|        IN---|      |---STK[PTR]                 |\n|             +------+                            |\n|                                                 |\n|             +-------+                           |\n|             |  SEL  |                   EMPTY   |\n+-------------|EN  ENO|--------------------(R)----+\n|  OFLO       |       |                           |\n+---| |-------|G      |---OUT                     |\n|        IN---|IN0    |                           |\n|        0 ---|IN1    |                           |\n|             +-------+                           |\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 181 –\nThe body of function block STACK_INT in the IL language is:\nLD R1 (* Dispatch on operations *)\nJMPC RESET\nLD POP\nANDN EMPTY (* Don't pop empty stack *)\nJMPC POP_STK\nLD PUSH\nANDN OFLO (* Don't push overflowed stack *)\nJMPC PUSH_STK\nRET (* Return if no operations active *)\nRESET: LD 0 (* Stack reset operations *)\nST"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 421,
    "text": "DN EMPTY (* Don't pop empty stack *)\nJMPC POP_STK\nLD PUSH\nANDN OFLO (* Don't push overflowed stack *)\nJMPC PUSH_STK\nRET (* Return if no operations active *)\nRESET: LD 0 (* Stack reset operations *)\nST OFLO\nLD 1\nST EMPTY\nLD -1\nST PTR\nLD 1\nLIMIT N, 128\nST NI\nJMP ZRO_OUT\nPOP_STK: LD 0\nST OFLO (* Popped stack is not overflowing *)\nLD PTR\nSUB 1\nST PTR\nLT 0 (* Empty when PTR < 0 *)\nST EMPTY\nJMPC ZRO_OUT\nLD STK[PTR]\nJMP SET_OUT\nPUSH_STK: LD 0\nST EMPTY (* Pushed stack is not empty *)\nLD PTR\nADD 1\nST PTR\nEQ NI (* Overflow when PTR = NI *)\nST OFLO\nJMPC ZRO_OUT\nLD IN\nST STK[PTR] (* Push IN onto STK *)\nJMP SET_OUT\nZRO_OUT: LD 0 (* OUT=0 for EMPTY or OFLO *)\nSET_OUT: ST OUT\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 182 – 61131-3  IEC:2003(E)\nThe body of function block STACK_INT in the FBD language is:\n  R1--+-->>RESET\n      |                              +-+\n      +-----------------------------O|&|--<RETURN>\n      |   +-+  +--------------------O| |\n      +--O|&|  |                 +--O| |\n  POP-----| |--+-->>POP_STK      |   +-+\n  EMPTY"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 422,
    "text": "+-+\n      +-----------------------------O|&|--<RETURN>\n      |   +-+  +--------------------O| |\n      +--O|&|  |                 +--O| |\n  POP-----| |--+-->>POP_STK      |   +-+\n  EMPTY--O| |  |            +-+  |\n          +-+  +-----------O|&|--+-->>PUSH_STK\n  R1-----------------------O| |\n  PUSH----------------------| |\n  OFLO---------------------O| |\n                            +-+\nRESET:\n    +------+             +------+           +------+\n    |  :=  |             |  :=  |           |  :=  |\n1 --|EN ENO|-------------|EN ENO|-----------|EN ENO|--+\n0 --|      |---OUT  -1 --|      |---PTR  0--|      |--|--OFLO\n    +------+             +------+           +------+  |\n        +---------------------------------------------+\n        |  +------+               +-------+\n        |  |  :=  |               | LIMIT |\n        +--|EN ENO|---------------|EN  ENO|--<RETURN>\n        1--|      |---EMPTY  128--|MX     |\n           +------+            N--|IN     |--NI\n                               1--|MN     |\n                                  +-------+\n  POP_STK:\n      +------+       +------+         +------+      +------+\n      |  -   |       |  <   |         | SEL  |      |  :=  |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 423,
    "text": "1--|MN     |\n                                  +-------+\n  POP_STK:\n      +------+       +------+         +------+      +------+\n      |  -   |       |  <   |         | SEL  |      |  :=  |\n 1----|EN ENO|-------|EN ENO|---------|EN ENO|------|EN ENO|--<RETURN>\n --PTR|      |--PTR--|      |--EMPTY--|G     |-+    |      |\n ----1|      |   0 --|      |  +------|IN0   | | 0--|      |--OFLO\n      +------+       +------+  | +----|IN1   | |    +------+\n STK[PTR]—---------------------+ |    +------+ |\n 0-------------------------------+             +---------------OUT\n  PUSH_STK:\n    +------+           +------+       +------+\n    |  :=  |           |  +   |       |  =   |\n 1--|EN ENO|-----------|EN ENO|-------|EN ENO|--\n 0--|      |--EMPTY 1--|      |--PTR--|G     |--+--OFLO\n    +------+        +--|      |  NI---|      |  |\n PTR—---------------+  +------+       +------+  |\n      +----------------------------+------------+\n      |    +------+                |   +-----+\n      |    |  :=  |                |   | SEL |\n      +----|EN ENO|                +---|G    |-----OUT\n IN--+-----|      |--STK[PTR]  +-------|IN0  |\n     |     +------+            |   0---|IN1  |\n     +-------------"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 424,
    "text": "=  |                |   | SEL |\n      +----|EN ENO|                +---|G    |-----OUT\n IN--+-----|      |--STK[PTR]  +-------|IN0  |\n     |     +------+            |   0---|IN1  |\n     +-------------------------+       +-----+\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 183 –\nF.5  Function block MIX_2_BRIX\nFunction block MIX_2_BRIX is to control the mixing of two bricks of solid material, brought one at a\ntime on a belt, with weighed quantities of two liquid components, A and B, as shown in figure F.1.  A\n“Start” (ST) command, which may be manual or automatic, initiates a measurement and mixing cycle\nbeginning with simultaneous weighing and brick transport as follows:\n- liquid A is weighed up to mark “a” of the weighing unit, then liquid B is weighed up to mark “b”,\nfollowed by filling of the mixer from weighing unit C;\n- two bricks are transported by belt into the mixer.\nThe cycle ends with the mixer rotating and finally tipping after a predetermined time “ t1”.  Rotation of\nthe mixer continues while it"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 425,
    "text": "hing unit C;\n- two bricks are transported by belt into the mixer.\nThe cycle ends with the mixer rotating and finally tipping after a predetermined time “ t1”.  Rotation of\nthe mixer continues while it is emptying.\nThe scale reading “ WC” is given as four BCD digits, and will be converted to type INT for internal\noperations.  It is assumed that the tare (empty weight) “z” has been previously determined.\nMR\nA\nVA\nB\nVB\nC\nVC\n||| a ||||| b |||WC\nMP0\nMP1\nS0\nS1\nMT\nd\ntransit detector\nbelt motor\nbricks\nfeed belt\ntipping mixer\nmixing \nmotor\nbidirectional\ntipping motor\n\"Down\" limit switch\n\"Up\" limit switch\nWeighing unit\nFigure F.1 - Function block MIX_2_BRIX - physical model\nIEC   2502/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 184 – 61131-3  IEC:2003(E)\nThe textual form of the declaration of this function block is:\nFUNCTION_BLOCK MIX_2_BRIX\n       VAR_INPUT\n ST : BOOL ;      (* \"Start\" command *)\n d  : BOOL ;      (* Transit detector *)\n S0 : BOOL ;      (* \"Mixer up\" limit switch *)\n S1 : BOOL ;      (* \"Mixer down\" limit switch *)"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 426,
    "text": "BRIX\n       VAR_INPUT\n ST : BOOL ;      (* \"Start\" command *)\n d  : BOOL ;      (* Transit detector *)\n S0 : BOOL ;      (* \"Mixer up\" limit switch *)\n S1 : BOOL ;      (* \"Mixer down\" limit switch *)\n WC : WORD;       (* Current scale reading in BCD *)\n z  : INT ;       (* Tare (empty) weight *)\n WA : INT ;       (* Desired weight of A *)\n WB : INT ;       (* Desired weight of B *)\n t1 : TIME ;      (* Mixing time *)\nEND_VAR\nVAR_OUTPUT\n DONE ,\n VA   ,       (* Valve \"A\" : 0 - close, 1 - open *)\n VB   ,       (* Valve \"B\" : 0 - close, 1 - open *)\n VC   ,       (* Valve \"C\" : 0 - close, 1 - open *)\n MT   ,       (* Feed belt motor *)\n MR   ,       (* Mixer rotation motor *)\n MP0  ,       (* Tipping motor \"up\" command *)\n MP1  : BOOL; (* Tipping motor \"down\" command *)\nEND_VAR\n(* Function block body *)\nEND_FUNCTION_BLOCK\nA graphical declaration is:\n       +------------+\n       | MIX_2_BRIX |\nBOOL---|ST      DONE|---BOOL\nBOOL---|d         VA|---BOOL\nBOOL---|S0        VB|---BOOL\nBOOL---|S1        VC|---BOOL\nWORD---|WC        MT|---BOOL\n INT---|z         MR|---BOOL\n INT---|WA       MP0|---BOOL\n INT---|WB       MP1|---BOOL\nTIME---|t1          |\n       +------------+\nCopyright Internation"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 427,
    "text": "VC|---BOOL\nWORD---|WC        MT|---BOOL\n INT---|z         MR|---BOOL\n INT---|WA       MP0|---BOOL\n INT---|WB       MP1|---BOOL\nTIME---|t1          |\n       +------------+\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 185 –\nThe body of function block MIX_2_BRIX using graphical SFC elements with transition conditions in\nthe ST language is shown below.\n  +----------->------------+\n  |                        |\n  |                   +====+====+   +---+------+\n  |                   || START ||---| N | DONE |\n  |                   +====+====+   +---+------+\n  |                        |\n  |                        + ST & S0 & BCD_TO_INT(WC) <= z\n  |                        |\n  |     ===+===============+================+=======\n  |        |                                |\n  |   +----+----+   +---+----+         +----+---+   +---+----+\n  |   | WEIGH_A |---| N | VA |         | BRICK1 |---| S | MT |\n  |   +----+----+   +---+----+         +----+---+   +---+----+\n  |        |                                |\n  |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 428,
    "text": "---+---+   +---+----+\n  |   | WEIGH_A |---| N | VA |         | BRICK1 |---| S | MT |\n  |   +----+----+   +---+----+         +----+---+   +---+----+\n  |        |                                |\n  |        + BCD_TO_INT(WC) >= WA+z         + d\n  |        |                                |\n  |   +----+----+   +---+----+         +----+---+\n  |   | WEIGH_B |---| N | VB |         | DROP_1 |\n  |   +----+----+   +---+----+         +----+---+\n  |        |                                |\n  |        + BCD_TO_INT(WC) >= WA+WB+z      + NOT d\n  |        |                                |\n  |   +----+----+   +---+----+         +----+---+\n  |   |  FILL   |---| N | VC |         | BRICK2 |\n  |   +----+----+   +---+----+         +----+---+\n  |        |                                + d\n  |        |                           +----+---+   +---+----+\n  |        |                           | DROP_2 |---| R | MT |\n  |        |                           +----+---+   +---+----+\n  |        |                                |\n  |    ====+===============+================+=====\n  |                        |\n  |                        + BCD_TO_INT(WC) <= z & NOT d\n  |                        |\n  |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 429,
    "text": "|\n  |    ====+===============+================+=====\n  |                        |\n  |                        + BCD_TO_INT(WC) <= z & NOT d\n  |                        |\n  |                     +--+--+   +---+----+\n  |                     | MIX |---| S | MR |\n  |                     +--+--+   +---+----+\n  |                        |\n  |                        + MIX.T >= t1\n  |                        |\n  |                     +--+--+   +---+-----+----+\n  |                     | TIP |---| N | MP1 | S1 |\n  |                     +--+--+   +---+-----+----+\n  |                        |\n  |                        + S1\n  |                        |\n  |                    +---+---+   +---+-----+----+\n  |                    | RAISE |---| R | MR  |    |\n  |                    +---+---+   +---+-----+----+\n  |                        +S0     | N | MP0 | S0 |\n  |                        |       +---+-----+----+\n  +-----------<------------+\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 186 – 61131-3  IEC:2003(E)\nThe body of function bl"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 430,
    "text": "Provided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 186 – 61131-3  IEC:2003(E)\nThe body of function block MIX_2_BRIX in a textual SFC representation using ST language elements\nis:\nINITIAL_STEP START: DONE(N); END_STEP\nTRANSITION FROM START TO (WEIGH_A, BRICK1)\n   := ST & S0 & BCD_TO_INT(WC) <= z;\nEND_TRANSITION\nSTEP WEIGH_A: VA(N); END_STEP\nTRANSITION FROM WEIGH_A TO WEIGH_B := BCD_TO_INT(WC) >= WA+z ;\nEND_TRANSITION\nSTEP WEIGH_B: VB(N); END_STEP\nTRANSITION FROM WEIGH_B TO FILL := BCD_TO_INT(WC) >= WA+WB+z ;\nEND_TRANSITION\nSTEP FILL: VC(N); END_STEP\nSTEP BRICK1: MT(S); END_STEP\nTRANSITION FROM BRICK1 TO DROP_1 := d ; END_TRANSITION\nSTEP DROP_1: END_STEP\nTRANSITION FROM DROP_1 TO BRICK2 := NOT d ; END_TRANSITION\nSTEP BRICK2: END_STEP\nTRANSITION FROM BRICK2 TO DROP_2 := d ; END_TRANSITION\nSTEP DROP_1: MT(R); END_STEP\nTRANSITION FROM (FILL,DROP_2) TO MIX\n   := BCD_TO_INT(WC) <= z & NOT d ;\nEND_TRANSITION\nSTEP MIX: MR(S); END_STEP\nTRANSITION FROM MIX TO TIP := MIX.T >= t1 ; END_TRANSITION\nSTEP TIP: MP1(N); END_STEP\nTRANSITION FROM TIP TO RAISE := S1 ; END_TRANSITION\nSTEP RAISE: MR(R); MP0("
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 431,
    "text": "D_TRANSITION\nSTEP MIX: MR(S); END_STEP\nTRANSITION FROM MIX TO TIP := MIX.T >= t1 ; END_TRANSITION\nSTEP TIP: MP1(N); END_STEP\nTRANSITION FROM TIP TO RAISE := S1 ; END_TRANSITION\nSTEP RAISE: MR(R); MP0(N); END_STEP\nTRANSITION FROM RAISE TO START := S0 ; END_TRANSITION\nF.6  Analog signal processing\nThe purpose of this portion of of this annex is to illustrate the application of the programming\nlanguages defined in this standard to accomplish the basic measurement and control functions of\nprocess-computer aided automation.  The blocks shown below are not restricted to analog signals;\nthey may be used to process any variables of the appropriate types.  Similarly, other functions and\nfunction blocks defined in this standard (for example, mathematical functions) can be used for the\nprocessing of variables which may appear as analog signals at the programmable controller's I/O\nterminals.\nThese function blocks can be typed with respect to the input and output variables shown below as\nREAL (for example, XIN, XOUT) by appending the appropriate data type name, for example,\nLAG1_LREAL.  The default data type for these variables is REAL.\nThese examples are given for illustrative purposes only. M"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 432,
    "text": "example, XIN, XOUT) by appending the appropriate data type name, for example,\nLAG1_LREAL.  The default data type for these variables is REAL.\nThese examples are given for illustrative purposes only. Manufacturers may have varying\nimplementations of analog signal processing elements. The inclusion of these examples is not\nintended to preclude the standardization of such elements by the appropriate standards bodies.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 187 –\nF.6.1  Function block LAG1\nThis function block implements a first-order lag filter.\n                         +-----------+\n                         |   LAG1    |\n                  BOOL---|RUN        |\n                  REAL---|XIN    XOUT|---REAL\n                  TIME---|TAU        |\n                  TIME---|CYCLE      |\n                         +-----------+\n FUNCTION_BLOCK LAG1\n   VAR_INPUT\n     RUN : BOOL ;     (* 1 = run, 0 = reset *)\n     XIN : REAL ;     (* Input variable *)\n     TAU : TIME ;     (* Filter time constant *)\n     CYCLE : TI"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 433,
    "text": "----------+\n FUNCTION_BLOCK LAG1\n   VAR_INPUT\n     RUN : BOOL ;     (* 1 = run, 0 = reset *)\n     XIN : REAL ;     (* Input variable *)\n     TAU : TIME ;     (* Filter time constant *)\n     CYCLE : TIME ;   (* Sampling time interval *)\n   END_VAR\n   VAR_OUTPUT XOUT : REAL ; END_VAR  (* Filtered output *)\n   VAR K : REAL ;     (* Smoothing constant, 0.0<=K<1.0 *)\n   END_VAR\n   IF RUN THEN XOUT := XOUT + K * (XIN - XOUT) ;\n   ELSE XOUT := XIN ;\n        K := TIME_TO_REAL(CYCLE) / TIME_TO_REAL(CYCLE + TAU) ;\n   END_IF ;\n END_FUNCTION_BLOCK\nF.6.2  Function block DELAY\nThis function block implements an N-sample delay.\n                         +-----------+\n                         |   DELAY   |\n                  BOOL---|RUN        |\n                  REAL---|XIN    XOUT|---REAL\n                  INT----|N          |\n                         +-----------+\nFUNCTION_BLOCK DELAY    (* N-sample delay *)\n  VAR_INPUT\n    RUN : BOOL ;     (* 1 = run, 0 = reset *)\n    XIN : REAL ;\n    N   : INT ;      (* 0 <= N < 128 or manufacturer- *)\n  END_VAR            (*      specified maximum value  *)\n  VAR_OUTPUT XOUT : REAL; END_VAR   (* Delayed output *)\n  VAR X : ARRAY [0..127]     (* N-Element queue"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 434,
    "text": "(* 0 <= N < 128 or manufacturer- *)\n  END_VAR            (*      specified maximum value  *)\n  VAR_OUTPUT XOUT : REAL; END_VAR   (* Delayed output *)\n  VAR X : ARRAY [0..127]     (* N-Element queue *)\n               OF REAL;      (* with FIFO discipline *)\n      I, IXIN, IXOUT : INT := 0;\n  END_VAR\n  IF RUN THEN IXIN := MOD(IXIN + 1, 128) ; X[IXIN] := XIN ;\n              IXOUT := MOD(IXOUT + 1, 128) ; XOUT := X[IXOUT];\n  ELSE XOUT := XIN ; IXIN := N ; IXOUT := 0;\n       FOR I := 0 TO N DO X[I] := XIN; END_FOR;\n  END_IF ;\nEND_FUNCTION_BLOCK\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 188 – 61131-3  IEC:2003(E)\nF.6.3  Function block AVERAGE\nThis function block implements a running average over N samples.\n                         +-----------+\n                         |  AVERAGE  |\n                  BOOL---|RUN        |\n                  REAL---|XIN    XOUT|---REAL\n                  INT----|N          |\n                         +-----------+\n FUNCTION_BLOCK AVERAGE\n   VAR_INPUT\n     RUN : BOOL ;      (* 1 = run, 0 = reset *)"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 435,
    "text": "REAL---|XIN    XOUT|---REAL\n                  INT----|N          |\n                         +-----------+\n FUNCTION_BLOCK AVERAGE\n   VAR_INPUT\n     RUN : BOOL ;      (* 1 = run, 0 = reset *)\n     XIN : REAL ;     (* Input variable *)\n     N   : INT ;      (* 0 <= N < 128 or manufacturer- *)\n   END_VAR            (*      specified maximum value  *)\n   VAR_OUTPUT XOUT : REAL ; END_VAR (* Averaged output *)\n   VAR SUM  : REAL := 0.0; (* Running sum *)\n       FIFO : DELAY ;      (* N-Element FIFO *)\n   END_VAR\n   SUM := SUM - FIFO.XOUT ;\n   FIFO (RUN := RUN , XIN := XIN, N := N) ;\n   SUM := SUM + FIFO.XOUT ;\n   IF RUN THEN XOUT := SUM/N ;\n   ELSE SUM := N*XIN ; XOUT := XIN ;\n   END_IF ;\n END_FUNCTION_BLOCK\nF.6.4  Function block INTEGRAL\nThis function block implements integration over time.\n                         +-----------+\n                         |  INTEGRAL |\n                  BOOL---|RUN       Q|---BOOL\n                  BOOL---|R1         |\n                  REAL---|XIN    XOUT|---REAL\n                  REAL---|X0         |\n                  TIME---|CYCLE      |\n                         +-----------+\n FUNCTION_BLOCK INTEGRAL\n   VAR_INPUT\n     RUN : BOOL ;       (* 1 ="
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 436,
    "text": "XOUT|---REAL\n                  REAL---|X0         |\n                  TIME---|CYCLE      |\n                         +-----------+\n FUNCTION_BLOCK INTEGRAL\n   VAR_INPUT\n     RUN : BOOL ;       (* 1 = integrate, 0 = hold *)\n     R1 : BOOL ;        (* Overriding reset        *)\n     XIN : REAL ;       (* Input variable          *)\n     X0  : REAL ;       (* Initial value           *)\n     CYCLE : TIME ;     (* Sampling period         *)\n   END_VAR\n   VAR_OUTPUT\n     Q : BOOL ;         (* NOT R1                  *)\n     XOUT : REAL ;      (* Integrated output       *)\n   END_VAR\n   Q := NOT R1 ;\n   IF R1 THEN XOUT := X0 ;\n   ELSIF RUN THEN XOUT := XOUT + XIN * TIME_TO_REAL(CYCLE);\n   END_IF ;\n END_FUNCTION_BLOCK\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 189 –\nF.6.5  Function block DERIVATIVE\nThis function block implements differentiation with respect to time.\n                        +------------+\n                        | DERIVATIVE |\n                 BOOL---|RUN         |\n                 REAL---|XIN"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 437,
    "text": "k implements differentiation with respect to time.\n                        +------------+\n                        | DERIVATIVE |\n                 BOOL---|RUN         |\n                 REAL---|XIN     XOUT|---REAL\n                 TIME---|CYCLE       |\n                        +------------+\n FUNCTION_BLOCK DERIVATIVE\n   VAR_INPUT\n     RUN : BOOL ;          (* 0 = reset                  *)\n     XIN : REAL ;          (* Input to be differentiated *)\n     CYCLE : TIME ;        (* Sampling period            *)\n   END_VAR\n   VAR_OUTPUT\n     XOUT : REAL ;         (* Differentiated output      *)\n   END_VAR\n   VAR X1, X2, X3 : REAL ; END_VAR\n   IF RUN THEN\n      XOUT := (3.0 * (XIN - X3) + X1 - X2)\n              / (10.0 * TIME_TO_REAL(CYCLE)) ;\n      X3 := X2 ; X2 := X1 ; X1 := XIN ;\n   ELSE XOUT := 0.0; X1 := XIN ; X2 := XIN ; X3 := XIN ;\n   END_IF ;\n END_FUNCTION_BLOCK\nF.6.6  Function block HYSTERESIS\nThis function block implements Boolean hysteresis on the difference of REAL inputs.\n                         +------------+\n                         | HYSTERESIS |\n                  REAL---|XIN1       Q|---BOOL\n                  REAL---|XIN2        |\n                  REAL---|EPS         |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 438,
    "text": "+------------+\n                         | HYSTERESIS |\n                  REAL---|XIN1       Q|---BOOL\n                  REAL---|XIN2        |\n                  REAL---|EPS         |\n                         +------------+\nFUNCTION_BLOCK HYSTERESIS\n    (* Boolean hysteresis on difference *)\n    (* of REAL inputs, XIN1 - XIN2      *)\n  VAR_INPUT XIN1, XIN2, EPS : REAL; END_VAR\n  VAR_OUTPUT Q : BOOL := 0; END_VAR\n  IF Q THEN IF XIN1 < (XIN2 - EPS) THEN Q := 0; END_IF ;\n  ELSIF XIN1 > (XIN2 + EPS) THEN Q := 1 ;\n  END_IF ;\nEND_FUNCTION_BLOCK\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 190 – 61131-3  IEC:2003(E)\nF.6.7  Function block LIMITS_ALARM\nThis function block implements a high/low limit alarm with hysteresis on both outputs.\n                              +---------+\n                              | LIMITS_ |\n                              |  ALARM  |\n   (* High limit     *) REAL--|H      QH|--BOOL (* High flag    *)\n   (* Variable value *) REAL--|X       Q|--BOOL (* Alarm output *)\n   (* Lower limit    *) RE"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 439,
    "text": "|  ALARM  |\n   (* High limit     *) REAL--|H      QH|--BOOL (* High flag    *)\n   (* Variable value *) REAL--|X       Q|--BOOL (* Alarm output *)\n   (* Lower limit    *) REAL--|L      QL|--BOOL (* Low flag     *)\n   (* Hysteresis     *) REAL--|EPS      |\n                              +---------+\n                (* Function block body in FBD language *)\n                                 HIGH_ALARM\n                               +------------+\n                               | HYSTERESIS |\n   X------------------------+--|XIN1       Q|--+------------QH\n                    +---+   |  |            |  |\n   H----------------| - |------|XIN2        |  |\n                +---|   |   |  |            |  |\n                |   +---+   |  |            |  |\n                +--------------|EPS         |  |  +-----+\n         +---+  |           |  +------------+  +--| >=1 |\n   EPS---| / |--+           |                     |     |---Q\n   2.0---|   |  |           |    LOW_ALARM     +--|     |\n         +---+  |           |  +------------+  |  +-----+\n                |   +---+   |  | HYSTERESIS |  |\n   L----------------| + |------|XIN1       Q|--+------------QL"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 440,
    "text": "+--|     |\n         +---+  |           |  +------------+  |  +-----+\n                |   +---+   |  | HYSTERESIS |  |\n   L----------------| + |------|XIN1       Q|--+------------QL\n                |   |   |   |  |            |\n                +---|   |   +--|XIN2        |\n                |   +---+      |            |\n                +--------------|EPS         |\n                               +------------+\nF.6.8  Structure ANALOG_LIMITS\nThis data type implements the declarations of parameters for analog signal monitoring.\n   TYPE ANALOG_LIMITS :\n       STRUCT\n         HS : REAL ;     (* High end of signal range *)\n         HM : REAL ;     (* High end of measurement range *)\n         HA : REAL ;     (* High alarm threshold *)\n         HW : REAL ;     (* High warning threshold *)\n         NV : REAL ;     (* Nominal value *)\n         EPS : REAL ;    (* Hysteresis *)\n         LW : REAL ;     (* Low warning threshold *)\n         LA : REAL ;     (* Low alarm threshold *)\n         LM : REAL ;     (* Low end of measurement range *)\n         LS : REAL ;     (* Low end of signal range *)\n       END_STRUCT ;\n   END_TYPE\nCopyright International Electrotechnical Commission \nProvided by IHS"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 441,
    "text": "AL ;     (* Low end of measurement range *)\n         LS : REAL ;     (* Low end of signal range *)\n       END_STRUCT ;\n   END_TYPE\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 191 –\nF.6.9  Function block ANALOG_MONITOR\nThis function block implements analog signal monitoring.\n                      +---------+\n                      | ANALOG_ |\n                      | MONITOR |\n                REAL--|X      SE|--BOOL (* Signal error *)\n       ANALOG_LIMITS--|L      ME|--BOOL (* Measurement error *)\n                      |     ALRM|--BOOL (* Alarm *)\n                      |     WARN|--BOOL (* Warning *)\n                      |       QH|--BOOL (* 1 = Signal high *)\n                      +---------+\n(* Function block body in FBD language *)\n          SIGNAL_ALARM                     MEAS_ALARM\n        +--------------+                +--------------+\n        | LIMITS_ALARM |                | LIMITS_ALARM |\n L.HS---|H            Q|---SE    L.HM---|H            Q|---ME\n X------|X             |         X------|X"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 442,
    "text": "-+                +--------------+\n        | LIMITS_ALARM |                | LIMITS_ALARM |\n L.HS---|H            Q|---SE    L.HM---|H            Q|---ME\n X------|X             |         X------|X             |\n L.LS---|L             |         L.LM---|L             |\n EPS----|EPS           |         EPS----|EPS           |\n        +--------------+                +--------------+\n             ALARM                           WARNING\n        +--------------+                +--------------+\n        | LIMITS_ALARM |                | LIMITS_ALARM |\n L.HA---|H            Q|---ALRM  L.HW---|H            Q|---WARN\n X------|X             |            X---|X             |\n L.LA---|L             |         L.LW---|L             |\n EPS----|EPS           |          EPS---|EPS           |\n        +--------------+                +--------------+\n                           +------+\n         SIGNAL_ALARM.QH---| >= 1 |---QH\n         MEAS_ALARM.QH-----|      |\n         ALARM.QH----------|      |\n         WARNING.QH--------|      |\n                           +------+\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking p"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 443,
    "text": "ARNING.QH--------|      |\n                           +------+\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 192 – 61131-3  IEC:2003(E)\nF.6.10 Function block PID\nThis function block implements Proportional + Integral + Derivative control action.  The functionality is\nderived by functional composition of previously declared function blocks.\n                         +-----------+\n                         |    PID    |\n                  BOOL---|AUTO       |\n                  REAL---|PV     XOUT|---REAL\n                  REAL---|SP         |\n                  REAL---|X0         |\n                  REAL---|KP         |\n                  REAL---|TR         |\n                  REAL---|TD         |\n                  TIME---|CYCLE      |\n                         +-----------+\n FUNCTION_BLOCK PID\n   VAR_INPUT\n     AUTO : BOOL ;        (* 0 - manual , 1 - automatic *)\n     PV : REAL ;          (* Process variable *)\n     SP : REAL ;          (* Set point *)\n     X0 : REAL ;          (* Manual output adjustment - *)"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 444,
    "text": "manual , 1 - automatic *)\n     PV : REAL ;          (* Process variable *)\n     SP : REAL ;          (* Set point *)\n     X0 : REAL ;          (* Manual output adjustment - *)\n                          (* Typically from transfer station *)\n     KP : REAL ;          (* Proportionality constant *)\n     TR : REAL ;          (* Reset time *)\n     TD : REAL ;          (* Derivative time constant *)\n     CYCLE : TIME ;       (* Sampling period *)\n   END_VAR\n   VAR_OUTPUT XOUT : REAL; END_VAR\n   VAR ERROR : REAL ;        (* PV - SP *)\n       ITERM : INTEGRAL ;    (* FB for integral term  *)\n       DTERM : DERIVATIVE ;  (* FB for derivative term *)\n   END_VAR\n   ERROR := PV - SP ;\n   (*** Adjust ITERM so that XOUT := X0 when AUTO = 0 ***)\n   ITERM (RUN := AUTO, R1 := NOT AUTO, XIN := ERROR,\n          X0 := TR * (X0 - ERROR), CYCLE := CYCLE) ;\n   DTERM (RUN := AUTO, XIN := ERROR, CYCLE := CYCLE) ;\n   XOUT := KP * (ERROR + ITERM.XOUT/TR + DTERM.XOUT*TD) ;\n END_FUNCTION_BLOCK\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 445,
    "text": "nal Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 193 –\nF.6.11 Function block DIFFEQ\nThis function block implements a general difference equation.\n                         +-----------+\n                         |  DIFFEQ   |\n                  BOOL---|RUN        |\n                  REAL---|XIN    XOUT|---REAL\n ARRAY[1..127] OF REAL---|A          |\n                  INT----|M          |\n ARRAY[0..127] OF REAL---|B          |\n                  INT----|N          |\n                         +-----------+\n FUNCTION_BLOCK DIFFEQ\n   VAR_INPUT\n     RUN : BOOL ;             (* 1 = run, 0 = reset *)\n     XIN : REAL ;\n     A : ARRAY[1..127] OF REAL ; (* Input coefficients *)\n     M : INT ;                (* Length of input history  *)\n     B : ARRAY[0..127] OF REAL ; (* Output coefficients *)\n     N : INT ;                (* Length of output history *)\n   END_VAR\n   VAR_OUTPUT XOUT : REAL := 0.0 ; END_VAR\n   VAR  (* NOTE : Manufacturer may specify other array sizes *)\n     XI : ARRAY [0..127] OF REAL ; (* Input history  *)\n     XO : ARRAY [0."
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 446,
    "text": "ory *)\n   END_VAR\n   VAR_OUTPUT XOUT : REAL := 0.0 ; END_VAR\n   VAR  (* NOTE : Manufacturer may specify other array sizes *)\n     XI : ARRAY [0..127] OF REAL ; (* Input history  *)\n     XO : ARRAY [0..127] OF REAL ; (* Output history *)\n     I : INT ;\n   END_VAR\n   XO[0] := XOUT ; XI[0] := XIN ;\n   XOUT := B[0] * XIN ;\n   IF RUN THEN\n      FOR I := M TO 1 BY -1 DO\n          XOUT := XOUT + A[I] * XO[I] ; XO[I] := XO[I-1];\n      END_FOR;\n      FOR I := N TO 1 BY -1 DO\n          XOUT := XOUT + B[I] * XI[I] ; XI[I] := XI[I-1];\n      END_FOR;\n   ELSE\n      FOR I := 1 TO M DO XO[I] := 0.0; END_FOR;\n      FOR I := 1 TO N DO XI[I] := 0.0; END_FOR;\n   END_IF ;\n END_FUNCTION_BLOCK\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 194 – 61131-3  IEC:2003(E)\nF.6.12  Function block RAMP\nThis function block implements a time-based ramp.\n                         +-----------+\n                         |   RAMP    |\n                  BOOL---|RUN    BUSY|---BOOL\n                  REAL---|X0     XOUT|---REAL\n                  REAL---|X1         |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 447,
    "text": "+-----------+\n                         |   RAMP    |\n                  BOOL---|RUN    BUSY|---BOOL\n                  REAL---|X0     XOUT|---REAL\n                  REAL---|X1         |\n                  TIME---|TR         |\n                  TIME---|CYCLE      |\n                         +-----------+\n FUNCTION_BLOCK RAMP\n   VAR_INPUT\n     RUN : BOOL ;      (* 0 - track X0, 1 - ramp to/track X1 *)\n     X0,X1 : REAL ;\n     TR : TIME ;       (* Ramp duration *)\n     CYCLE : TIME ;    (* Sampling period *)\n   END_VAR\n   VAR_OUTPUT\n     BUSY : BOOL ; (* BUSY = 1 during ramping period *)\n     XOUT : REAL := 0.0 ;\n   END_VAR\n   VAR XI : REAL ;       (* Initial value *)\n       T : TIME := T#0s; (* Elapsed time of ramp *)\n   END_VAR\n   BUSY := RUN ;\n   IF RUN THEN\n      IF T >= TR THEN BUSY := 0 ; XOUT := X1 ;\n      ELSE XOUT := XI + (X1-XI) * TIME_TO_REAL(T)\n                                / TIME_TO_REAL(TR) ;\n           T := T + CYCLE ;\n      END_IF ;\n   ELSE XOUT := X0 ; XI := X0 ; T := t#0s ;\n   END_IF ;\n END_FUNCTION_BLOCK\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted withou"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 448,
    "text": "; T := t#0s ;\n   END_IF ;\n END_FUNCTION_BLOCK\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 195 –\nF.6.13  Function block TRANSFER\nThis function block implements a manual transfer station with bumpless transfer.\n                         +-----------+\n                         | TRANSFER  |\n                  BOOL---|AUTO       |\n                  REAL---|XIN    XOUT|---REAL\n                  REAL---|FAST_RATE  |\n                  REAL---|SLOW_RATE  |\n                  BOOL---|FAST_UP    |\n                  BOOL---|SLOW_UP    |\n                  BOOL---|FAST_DOWN  |\n                  BOOL---|SLOW_DOWN  |\n                  TIME---|CYCLE      |\n                         +-----------+\nFUNCTION_BLOCK TRANSFER\n VAR_INPUT\n   AUTO : BOOL ;     (* 1 - track X0, 0 - ramp or hold *)\n   XIN : REAL ;      (* Typically from PID Function Block *)\n   FAST_RATE, SLOW_RATE : REAL ; (* Up/down ramp slopes *)\n   FAST_UP, SLOW_UP, (* Typically pushbuttons *)\n   FAST_DOWN, SLOW_DOWN : BOOL;\n   CYCLE : TIME ;    (* Sampling period *"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 449,
    "text": "Function Block *)\n   FAST_RATE, SLOW_RATE : REAL ; (* Up/down ramp slopes *)\n   FAST_UP, SLOW_UP, (* Typically pushbuttons *)\n   FAST_DOWN, SLOW_DOWN : BOOL;\n   CYCLE : TIME ;    (* Sampling period *)\n END_VAR\n VAR_OUTPUT XOUT : REAL ; END_VAR\n VAR XFER_RAMP : INTEGRAL ;\n     RAMP_RATE : REAL ;\n END_VAR\n RAMP_RATE := 0.0 ;\n IF NOT AUTO THEN\n  IF FAST_UP THEN RAMP_RATE := FAST_RATE; END_IF;\n  IF SLOW_UP THEN RAMP_RATE := RAMP_RATE + SLOW_RATE; END_IF;\n  IF FAST_DOWN THEN RAMP_RATE := RAMP_RATE - FAST_RATE; END_IF;\n  IF SLOW_DOWN THEN RAMP_RATE := RAMP_RATE - SLOW_RATE; END_IF;\n END_IF ;\n XFER_RAMP (RUN := 1, CYCLE := CYCLE, R1 := AUTO,\n            XIN := RAMP_RATE, X0 := XIN) ;\n XOUT := XFER_RAMP.XOUT;\nEND_FUNCTION_BLOCK\nF.7  Program GRAVEL\nA control system is to be used to measure an operator-specified amount of gravel from a silo into an\nintermediate bin, and to convey the gravel after measurement from the bin into a truck.\nThe quantity of gravel to be transferred is specified via a thumbwheel with a range of 0 to 99 units.\nThe amount of gravel in the bin is indicated on a digital display.\nFor safety reasons, visual and audible alarms must be raised immediately when the silo is e"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 450,
    "text": "thumbwheel with a range of 0 to 99 units.\nThe amount of gravel in the bin is indicated on a digital display.\nFor safety reasons, visual and audible alarms must be raised immediately when the silo is empty.  The\nsignalling functions are to be implemented in the control program.\nA graphic representation of the control problem is shown in figure F.2, while the variable declarations\nfor the control program are given in figure F.3.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 196 – 61131-3  IEC:2003(E)\nAs shown in figure F.4, the operation of the system consists of a number of major states, beginning\nwith filling of the bin upon command from the FILL push button.  After the bin is filled, the truck\nloading sequence begins upon command by the LOAD pushbutton when a truck is present on the\nramp.  Loading consists of a “run-in” period for starting the conveyor, followed by dumping of the bin\ncontents onto the conveyor.  After the bin has emptied, the conveyor “runs out” for a predetermined\ntime to assure that all gravel has been loade"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 451,
    "text": "starting the conveyor, followed by dumping of the bin\ncontents onto the conveyor.  After the bin has emptied, the conveyor “runs out” for a predetermined\ntime to assure that all gravel has been loaded to the truck.  The loading sequence is stopped and re-\ninitialized if the truck leaves the ramp or if the automatic control is stopped by the \nOFF push button.\nFigure F.5 shows the OFF/ON sequence of automatic control states, as well as the generation of\ndisplay blinking pulses and conveyor motor gating when the control is ON.\nBin level monitoring, operator interface and display functions are defined in figure F.6.\nA textual version of the body of program GRAVEL is given in figure F.7, using the ST language with\nSFC elements.\nAn example configuration for program GRAVEL is given in figure F.8.\n  +---------+ CONTROL PANEL:\n  |  SILO   | INDICATORS PUSH BUTTONS\n  |         | ON\n  |         | CONTROL SYSTEM ON OFF\n  |         | TRUCK ON RAMP ACKNOWLEDGE\n  |         | SILO EMPTY FILL\n   \\       / CONVEYOR RUNNING LOAD\n    \\     / LAMP TEST\n     |   | \"Silo empty\"\n     | o |  limit switch2-DIGIT BCD:\n     | / | Silo valve DISPLAY THUMBWHEEL\n     +---+ BIN LEVEL SET POINT\n    | BIN |\n    |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 452,
    "text": "/ CONVEYOR RUNNING LOAD\n    \\     / LAMP TEST\n     |   | \"Silo empty\"\n     | o |  limit switch2-DIGIT BCD:\n     | / | Silo valve DISPLAY THUMBWHEEL\n     +---+ BIN LEVEL SET POINT\n    | BIN |\n    |     | SIREN : SILO EMPTY\n    \\     / \"Bin empty\"\n     | o |   limit switch\n     | / | Bin valve\n     +---+\n\"Truck on ramp\" limit switch\nFigure F.2 - Gravel measurement and loading system\nIEC   2503/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 197 –\nPROGRAM GRAVEL  (* Gravel measurement and loading system *)\n VAR_INPUT\n    OFF_PB         : BOOL ;\n    ON_PB          : BOOL ;\n    FILL_PB        : BOOL ;\n    SIREN_ACK      : BOOL ;\n    LOAD_PB        : BOOL ; (* Load truck from bin *)\n    JOG_PB         : BOOL ;\n    LAMP_TEST      : BOOL ;\n    TRUCK_ON_RAMP  : BOOL ; (* Optical sensor *)\n    SILO_EMPTY_LS  : BOOL ;\n    BIN_EMPTY_LS   : BOOL ;\n    SETPOINT       : BYTE ; (* 2-digit BCD *)\n END_VAR\n VAR_OUTPUT\n    CONTROL_LAMP    : BOOL ;\n    TRUCK_LAMP      : BOOL ;\n    SILO_EMPTY_LAMP : BOOL ;\n    CONVEYOR_LAMP"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 453,
    "text": "BIN_EMPTY_LS   : BOOL ;\n    SETPOINT       : BYTE ; (* 2-digit BCD *)\n END_VAR\n VAR_OUTPUT\n    CONTROL_LAMP    : BOOL ;\n    TRUCK_LAMP      : BOOL ;\n    SILO_EMPTY_LAMP : BOOL ;\n    CONVEYOR_LAMP   : BOOL ;\n    CONVEYOR_MOTOR  : BOOL ;\n    SILO_VALVE      : BOOL ;\n    BIN_VALVE       : BOOL ;\n    SIREN           : BOOL ;\n    BIN_LEVEL       : BYTE ;\n END_VAR\n VAR\n  BLINK_TIME : TIME; (* BLINK ON/OFF time *)\n  PULSE_TIME : TIME; (* LEVEL_CTR increment interval *)\n  RUNOUT_TIME: TIME; (* Conveyor running time after loading *)\n  RUN_IN_TIME: TIME; (* Conveyor running time before loading *)\n  SILENT_TIME: TIME; (* Siren silent time after SIREN_ACK *)\n  OK_TO_RUN  : BOOL; (* 1 = Conveyor is allowed to run *)\n  (* Function Blocks *)\n  BLINK: TON; (* Blinker OFF period timer / ON output *)\n  BLANK: TON; (* Blinker ON period timer / blanking pulse *)\n  PULSE: TON; (* LEVEL_CTR pulse interval timer *)\n  SIREN_FF: RS;\n  SILENCE_TMR: TP; (* Siren silent period timer *)\n END_VAR\n VAR RETAIN LEVEL_CTR : CTU ; END_VAR\n   (* Program body *)\nEND_PROGRAM\nFigure F.3 - Declarations for program GRAVEL\nIEC   2504/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 454,
    "text": "EVEL_CTR : CTU ; END_VAR\n   (* Program body *)\nEND_PROGRAM\nFigure F.3 - Declarations for program GRAVEL\nIEC   2504/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 198 – 61131-3  IEC:2003(E)\n+--------------------->-----------------+\n|                                       |\n|                                  +====+====+\n|                                  || START ||\n|                                  +====+====+\n|                                       |\n|                                       + FILL_PB & CONTROL.X\n|                                       |\n|                                 +-----+----+   +---+------------+\n|                                 | FILL_BIN |---| N | SILO_VALVE |\n|                                 +-----+----+   +---+------------+\n|                                       |\n|   +-----------------------------------*\n|   |                                   |\n|   + NOT FILL_PB OR NOT CONTROL.X      + LEVEL_CTR.Q\n+---+                                   |\n|      +------------------>-------------+\n|      |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 455,
    "text": "-----*\n|   |                                   |\n|   + NOT FILL_PB OR NOT CONTROL.X      + LEVEL_CTR.Q\n+---+                                   |\n|      +------------------>-------------+\n|      |                          +-----+-----+\n|      |                          | LOAD_WAIT |\n|      |                          +-----+-----+\n|      |                                |\n|      |                                + LOAD_PB & OK_TO_RUN\n|      |                                |\n|      |                           +----+---+\n|      |                           | RUN_IN |\n|      |                           +----+---+\n|      |                                |\n|      |   +----------------------------*\n|      |   |                            |\n|      |   + NOT OK_TO_RUN              + RUN_IN.T >= RUN_IN_TIME\n|      |   |                            |\n|      +---+                      +-----+----+   +---+-----------+\n|      |                          | DUMP_BIN |---| N | BIN_VALVE |\n|      |                          +-----+----+   +---+-----------+\n|      |                                |\n|      |   +----------------------------*\n|      |   |                            |\n|      |   + NOT OK_TO_R"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 456,
    "text": "+-----+----+   +---+-----------+\n|      |                                |\n|      |   +----------------------------*\n|      |   |                            |\n|      |   + NOT OK_TO_RUN              + BIN_EMPTY_LS\n|      |   |                            |\n|      +---+                       +----+---+\n|      |                           | RUNOUT |\n|      |                           +----+---+\n|      |                                |\n|      |   +----------------------------*\n|      |   |                            |\n|      |   + NOT OK_TO_RUN              + RUNOUT.T >= RUNOUT_TIME\n|      +---+                            |\n+---------------------------------------+\nFigure F.4 - SFC of program GRAVEL body\nIEC   2505/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 199 –\n+---------+\n|         |\n|         + OFF_PB\n|         |\n|  +======+======+       +===========+   +---+----------------+\n|  ||CONTROL_OFF||       || MONITOR ||---| N | MONITOR_ACTION |\n|  +======+======+       +===========+   +---+"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 457,
    "text": "+ OFF_PB\n|         |\n|  +======+======+       +===========+   +---+----------------+\n|  ||CONTROL_OFF||       || MONITOR ||---| N | MONITOR_ACTION |\n|  +======+======+       +===========+   +---+----------------+\n|         |\n|         + ON_PB & NOT OFF_PB\n|         |\n|     +---+---+  +---+----------------------------------+-----+\n|     |CONTROL|--| N |       CONTROL_ACTION             |     |\n|     +---+---+  +---+----------------------------------+-----+\n|         |      |      +---------------------------------+   |\n+---------+      |      |             BLINK       BLANK   |   |\n                 |      |    +-+     +-----+     +-----+  |   |\n                 |      +---O|&|     | TON |     | TON |  |   |\n                 |CONTROL.X--| |-----|IN  Q|-----|IN  Q|--+   |\n                 |           +-+  +--|PT   |  +--|PT   |      |\n                 |                |  +-----+  |  +-----+      |\n                 |    BLINK_TIME--+-----------+               |\n                 |               +-+                          |\n                 |CONTROL.X------|&|                          |\n                 |TRUCK_ON_RAMP--| |---+---------OK_TO_RUN    |\n                 |"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 458,
    "text": "+-+                          |\n                 |CONTROL.X------|&|                          |\n                 |TRUCK_ON_RAMP--| |---+---------OK_TO_RUN    |\n                 |               +-+   |                      |\n                 |                     |  +-+                 |\n                 |            +-----+  +--|&|--CONVEYOR_MOTOR |\n                 |JOG_PB------| >=1 |-----| |                 |\n                 |RUN_IN.X----|     |     +-+                 |\n                 |DUMP_BIN.X--|     |                         |\n                 |RUNOUT.X----|     |                         |\n                 |            +-----+                         |\n                 +--------------------------------------------+\nFigure F.5 - Body of program GRAVEL (continued) -\ncontrol state sequencing and monitoring\nIEC   2506/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 200 – 61131-3  IEC:2003(E)\nMONITOR_ACTION\n                                      +---+\nCONVEYOR_MOTOR------------------------| & |------CONVEYOR_LAMP"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 459,
    "text": "out license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 200 – 61131-3  IEC:2003(E)\nMONITOR_ACTION\n                                      +---+\nCONVEYOR_MOTOR------------------------| & |------CONVEYOR_LAMP\nBLINK.Q-------------------------------|   |\n                                      +---+\n                                     +-----+\nCONTROL.X----------------------------| >=1 |---CONTROL_LAMP\nLAMP_TEST------------+---------------|     |\n                     |               +-----+\n                     |   +-----+\n                     +---| >=1 |---------------TRUCK_LAMP\nTRUCK_ON_RAMP--------|---|     |\n                     |   +-----+\n                     |               +-----+\n                     +---------------| >=1 |---SILO_EMPTY_LAMP\n                   +---+             |     |\nBLINK.Q------------| & |-------------|     |\nSILO_EMPTY_LS--+---|   |             +-----+\n               |   +---+   SIREN_FF\n               |           +------+\n               |           |  RS  |\n               +-----------|S   Q1|------------SIREN\n            SILENCE_TMR    |      |\n              +------+     |      |\n              |  TP  |     |      |\nSIREN_ACK-----|IN   Q|-----|R1    |\nSILENT_TIME"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 460,
    "text": "+-----------|S   Q1|------------SIREN\n            SILENCE_TMR    |      |\n              +------+     |      |\n              |  TP  |     |      |\nSIREN_ACK-----|IN   Q|-----|R1    |\nSILENT_TIME---|PT    |     +------+\n              +------+      LEVEL_CTR\n                             +-----+\n                             | CTU |\nBIN_EMPTY_LS-----------------|R   Q|\n       +------------------+  |     |\n       |          PULSE   |  |     |\n       |    +-+  +-----+  |  |     |\n       +---O|&|  | TON |  |  |     |\nFILL_BIN.X--| |--|IN  Q|--+-->CU   |\n            +-+  |     |     |     |\nPULSE_TIME-------|PT   |     |     |\n                 +-----+     |     |\n            +------------+   |     |  +------------+\nSETPOINT----| BCD_TO_INT |---|PV CV|--| INT_TO_BCD |--BIN_LEVEL\n            +------------+   +-----+  +------------+\nFigure F.6 - Body of action MONITOR_ACTION in FBD language\nIEC   2507/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 201 –\nFigure F.7 - Body of program GRAVEL in textual SFC repres"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 461,
    "text": "IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 201 –\nFigure F.7 - Body of program GRAVEL in textual SFC representation\nusing ST language elements\n   (* Major operating states *)\n   INITIAL_STEP START : END_STEP\n   TRANSITION FROM START TO FILL_BIN\n      := FILL_PB & CONTROL.X ; END_TRANSITION\n   STEP FILL_BIN: SILO_VALVE(N); END_STEP\n   TRANSITION FROM FILL_BIN TO START\n      := NOT FILL_PB OR NOT CONTROL.X ; END_TRANSITION\n   TRANSITION FROM FILL_BIN TO LOAD_WAIT := LEVEL_CTR.Q ;\n   END_TRANSITION\n   STEP LOAD_WAIT : END_STEP\n   TRANSITION FROM LOAD_WAIT TO RUN_IN\n      := LOAD_PB & OK_TO_RUN ; END_TRANSITION\n   STEP RUN_IN : END_STEP\n   TRANSITION FROM RUN_IN TO LOAD_WAIT := NOT OK_TO_RUN ;\n   END_TRANSITION\n   TRANSITION FROM RUN_IN TO DUMP_BIN\n      := RUN_IN.T > RUN_IN_TIME;\n   END_TRANSITION\n   STEP DUMP_BIN: BIN_VALVE(N); END_STEP\n   TRANSITION FROM DUMP_BIN TO LOAD_WAIT := NOT OK_TO_RUN ;\n   END_TRANSITION\n   TRANSITION FROM DUMP_BIN TO RUNOUT := BIN_EMPTY_LS ;\n   END_TRANSITION\n   STEP RUNOUT : END_STEP\n   TRANSITION FROM RUNOUT TO LOAD_WAIT := NOT OK_TO_RUN ;\n   END_TRANSITION\n   TRA"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 462,
    "text": "END_TRANSITION\n   TRANSITION FROM DUMP_BIN TO RUNOUT := BIN_EMPTY_LS ;\n   END_TRANSITION\n   STEP RUNOUT : END_STEP\n   TRANSITION FROM RUNOUT TO LOAD_WAIT := NOT OK_TO_RUN ;\n   END_TRANSITION\n   TRANSITION FROM RUNOUT TO START\n      := RUNOUT.T >= RUNOUT_TIME ; END_TRANSITION\n(* Control state sequencing *)\nINITIAL_STEP CONTROL_OFF: END_STEP\nTRANSITION FROM CONTROL_OFF TO CONTROL\n     := ON_PB & NOT OFF_PB ; END_TRANSITION\nSTEP CONTROL: CONTROL_ACTION(N); END_STEP\nACTION CONTROL_ACTION:\n   BLINK(EN:=CONTROL.X & NOT BLANK.Q, PT := BLINK_TIME) ;\n   BLANK(EN:=BLINK.Q, PT := BLINK_TIME) ;\n   OK_TO_RUN := CONTROL.X & TRUCK_ON_RAMP ;\n   CONVEYOR_MOTOR :=\n     OK_TO_RUN & OR(JOG_PB, RUN_IN.X, DUMP_BIN.X, RUNOUT.X);\nEND_ACTION\nTRANSITION FROM CONTROL TO CONTROL_OFF := OFF_PB ;\nEND_TRANSITION\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 202 – 61131-3  IEC:2003(E)\nFigure F.7 - Body of program GRAVEL in textual SFC representation\nusing ST language elements\n(* Monitor Logic *)\nINITIAL_STEP MONITOR: MONITOR_ACTION(N); END_STEP\nACTION MONI"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 463,
    "text": "2 – 61131-3  IEC:2003(E)\nFigure F.7 - Body of program GRAVEL in textual SFC representation\nusing ST language elements\n(* Monitor Logic *)\nINITIAL_STEP MONITOR: MONITOR_ACTION(N); END_STEP\nACTION MONITOR_ACTION:\n  CONVEYOR_LAMP := CONVEYOR_MOTOR & BLINK.Q ;\n  CONTROL_LAMP := CONTROL.X OR LAMP_TEST ;\n  TRUCK_LAMP := TRUCK_ON_RAMP OR LAMP_TEST ;\n  SILO_EMPTY_LAMP := BLINK.Q & SILO_EMPTY_LS OR LAMP_TEST ;\n  SILENCE_TMR(IN:=SIREN_ACK, PT:=SILENT_TIME) ;\n  SIREN_FF(S:=SILO_EMPTY_LS, R1:=SILENCE_TMR.Q) ;\n  SIREN := SIREN_FF.Q1 ;\n  PULSE(IN:=FILL_BIN.X & NOT PULSE.Q, PT:=PULSE_TIME) ;\n  LEVEL_CTR(R := BIN_EMPTY_LS, CU := PULSE.Q,\n            PV := BCD_TO_INT(SETPOINT)) ;\n  BIN_LEVEL := INT_TO_BCD(LEVEL_CTR.CV) ;\nEND_ACTION\n CONFIGURATION GRAVEL_CONTROL\n   RESOURCE PROC1 ON PROC_TYPE_Y\n     PROGRAM G : GRAVEL\n      (* Inputs *)\n       (OFF_PB        := %I0.0 ,\n        ON_PB         := %I0.1 ,\n        FILL_PB       := %I0.2 ,\n        SIREN_ACK     := %I0.3 ,\n        LOAD_PB       := %I0.4 ,\n        JOG_PB        := %I0.5 ,\n        LAMP_TEST     := %I0.7 ,\n        TRUCK_ON_RAMP := %I1.4 ,\n        SILO_EMPTY_LS := %I1.5 ,\n        BIN_EMPTY_LS  := %I1.6 ,\n        SETPOINT      := %IB2  ,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 464,
    "text": "JOG_PB        := %I0.5 ,\n        LAMP_TEST     := %I0.7 ,\n        TRUCK_ON_RAMP := %I1.4 ,\n        SILO_EMPTY_LS := %I1.5 ,\n        BIN_EMPTY_LS  := %I1.6 ,\n        SETPOINT      := %IB2  ,\n       (* Outputs *)\n        CONTROL_LAMP    => %Q4.0,\n        TRUCK_LAMP      => %Q4.2,\n        SILO_EMPTY_LAMP => %Q4.3,\n        CONVEYOR_LAMP   => %Q5.3,\n        CONVEYOR_MOTOR  => %Q5.4,\n        SILO_VALVE      => %Q5.5,\n        BIN_VALVE       => %Q5.6,\n        SIREN           => %Q5.7,\n        BIN_LEVEL       => %B6) ;\n   END_RESOURCE\n END_CONFIGURATION\nFigure F.8 - Example configuration for program GRAVEL\nIEC   2508/02\nIEC   2509/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 203 –\nF.8  Program AGV\nAs illustrated in figure F.9, a program is to be devised to control an automatic guided vehicle (AGV).\nThe AGV is to travel between two extreme positions, left (indicated by limit switch S3) and right\n(indicated by limit switch S4).  The normal position of the AGV is on the left.\nThe AGV is to execute one cycle o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 465,
    "text": "to travel between two extreme positions, left (indicated by limit switch S3) and right\n(indicated by limit switch S4).  The normal position of the AGV is on the left.\nThe AGV is to execute one cycle of left-to-right and return motion when the operator actuates\npushbutton S1, and two cycles when the operator actuates pushbutton S2.  It is also possible to pass\nfrom a single to a double cycle by actuating pushbutton S2 during a single cycle.  Finally, non-repeat\nlocking is to be provided if either S1 or S2 remains actuated.\nFigure F.10 illustrates the graphical declaration of program AGV, while figure F.11  shows a typical\nconfiguration for this program.  Figure F.12 shows the AGV program body, consisting of a main control\nsequence and a single-cycle control sequence.\nLEFT_LS RIGHT_LSFWD_MOTORREV_MOTOR\n1 Cycle 2 Cycles\nAGV Control Panel\nSINGLE_PB DOUBLE_PB\nFigure F.9 - Physical model for program AGV\n       +----------------------+\n       |        AGV           |\nBOOL---|SINGLE_PB    FWD_MOTOR|---BOOL\nBOOL---|DOUBLE_PB    REV_MOTOR|---BOOL\nBOOL---|LEFT_LS               |\nBOOL---|RIGHT_LS              |\n       +----------------------+\nFigure F.10 - Graphical declaration of program AGV"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 466,
    "text": "MOTOR|---BOOL\nBOOL---|DOUBLE_PB    REV_MOTOR|---BOOL\nBOOL---|LEFT_LS               |\nBOOL---|RIGHT_LS              |\n       +----------------------+\nFigure F.10 - Graphical declaration of program AGV\nIEC   2510/02\nIEC   2511/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n – 204 – 61131-3  IEC:2003(E) \n \nCONFIGURATION AGV_CONTROL \n RESOURCE AGV_PROC: SMALL_PC  \n                           AGV_1 \n                  +--------------------+ \n                  |        AGV         | \n           %IX1---|SINGLE_PB  FWD_MOTOR|---%QX1 \n           %IX2---|DOUBLE_PB  REV_MOTOR|---%QX2 \n           %IX3---|LEFT_LS             |    \n           %IX4---|RIGHT_LS            | \n                  +--------------------+ \n \n   \n \nFigure F.11 - A graphical configuration of program AGV \n \n     +----------------------------+ \n     ¦                            ¦ \n     ¦                        +===+===+    (* Main sequence *) \n     ¦                        |¦START¦| \n     ¦                        +===+===+ \n     ¦                            ¦ \n     ¦"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 467,
    "text": "¦ \n     ¦                        +===+===+    (* Main sequence *) \n     ¦                        |¦START¦| \n     ¦                        +===+===+ \n     ¦                            ¦ \n     ¦       +--------------------*----------+ \n     |       |                               |  \n     ¦       + READY.X & SINGLE_PB           + READY.X & DOUBLE_PB \n     |       |                               |  \n     ¦    +--+---+ +-+-----+             +---+----+  +-+-----+ \n     ¦    ¦SINGLE+-¦N¦CYCLE¦             ¦DOUBLE_1+--¦N¦CYCLE¦ \n     ¦    +--+---+ +-+-----+             +---+----+  +-+-----+ \n     |       |                               |  \n     ¦       *---------+                     + DONE.X \n     ¦       ¦         + DONE.X & DOUBLE_PB  ¦ \n     ¦       ¦         +---------------------+ \n     |       |                               |  \n     ¦       ¦                         +-----+-----+ \n     ¦       + DONE.X & NOT DOUBLE_PB  ¦DOUBLE_WAIT¦ \n     ¦       ¦                         +-----+-----+ \n     |       |                               |  \n     ¦       ¦                               + READY.X \n     |       |                               |  \n     ¦       ¦"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 468,
    "text": "--+ \n     |       |                               |  \n     ¦       ¦                               + READY.X \n     |       |                               |  \n     ¦       ¦                           +---+----+  +-+-----+ \n     ¦       ¦                           ¦DOUBLE_2+--¦N¦CYCLE¦ \n     ¦       ¦                           +---+----+  +-+-----+ \n     |       |                               | \n     ¦       ¦                               + DONE.X \n     |       |                               |  \n     ¦       +---------------------+---------+ \n     ¦                             ¦ \n     ¦                        +----+-----+ \n     ¦                        ¦NON_REPEAT¦ \n     ¦                        +----+-----+ \n     ¦                             ¦ \n     ¦                             +NOT(SINGLE_PB OR DOUBLE_PB) \n     ¦                             ¦ \n     +-----------------------------+ \n \nFigure F.12 - Body of program AGV \n \nIEC   2512/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 205 –\n+-------+\n¦"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 469,
    "text": "sion \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 205 –\n+-------+\n¦       |\n¦   +===+===+       (* Perform a single cycle *)\n¦   |¦READY¦|\n¦   +===+===+\n¦       |\n¦       + CYCLE\n¦       |\n¦   +---+---+ +-+---------+\n¦   ¦FORWARD+-¦N¦FWD_MOTOR¦\n¦   +---+---+ +-+---------+\n¦       |\n¦       + RIGHT_LS\n¦       |\n¦   +---+---+ +-+---------+\n¦   ¦REVERSE+-¦N¦REV_MOTOR¦\n¦   +---+---+ +-+---------+\n¦       |\n¦       + LEFT_LS\n¦       |\n¦    +--+-+\n¦    ¦DONE¦\n¦    +--+-+\n¦       |\n¦       + NOT CYCLE\n¦       |\n+-------+\nFigure F.12 - Body of program AGV (continued)\nIEC   2513/02\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 206 – 61131-3  IEC:2003(E)\nF.9  Use of enumerated data types\nThe following example illustrates the use of enumerated data types in ST CASE statements and in\nInstruction List.  Suppose an enumerated data type has been defined by the following declaration:\nTYPE SPEED: (SLOW, MEDIUM, FAST, VE"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 470,
    "text": "ates the use of enumerated data types in ST CASE statements and in\nInstruction List.  Suppose an enumerated data type has been defined by the following declaration:\nTYPE SPEED: (SLOW, MEDIUM, FAST, VERY_FAST); END_TYPE\nIn addition, suppose an input and output of a function block type is declared by:\nVAR_INPUT MOTOR_SPEED: SPEED; END_VAR\nVAR_OUTPUT SPEED_OUT: SPEED; END_VAR\nThen if the body of the function block type is defined in the ST language, a CASE statement such as\nthe following could be used:\nCASE MOTOR_SPEED OF\n  SLOW:   (* speed it up *);\n  MEDIUM: (* hold the current speed *);\n  FAST:   (* slow it down *);\nELSE      (* take special care *);\nEND_CASE;\nIf the body of the function block type is defined in the IL language, the following instructions could be\nused:\nLD SPEED#SLOW   (* enumerated value qualified by data type *)\nST SPEED_OUT\nF.10  Function block RTC (Real Time Clock)\nThe RTC function block shown below sets the output CDT to the input value PDT at the next evaluation\nof the function block following a transition from 0 to 1 of the IN input.  The CDT output of the RTC\nfunction block is undefined when the value of IN is 0.\nFunction block RTC (Real Time Clock)\nPDT = P"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 471,
    "text": "of the function block following a transition from 0 to 1 of the IN input.  The CDT output of the RTC\nfunction block is undefined when the value of IN is 0.\nFunction block RTC (Real Time Clock)\nPDT = Preset date and time,\n           loaded on rising edge of IN\nCDT = Current date and time,\n            valid when IN=1\nQ = copy of IN\n       +-------+\n       |  RTC  |\nBOOL---|IN    Q|---BOOL\nDT-----|PDT CDT|-----DT\n       +-------+\nF.11  Function block ALRM_INT\nThis function block type provides simple high and low level alarming for an input of type INT and\nillustrates the use of the VAR_OUTPUT declaration with functions. The function output is TRUE if a high\nor low threshold is exceeded, and separate outputs are provided for the high- or low-level alarm\nconditions.\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 207 –\n      +----------+\n      | ALRM_INT |\nIN----|INT       |---BOOL\nTHI---|INT     HI|---BOOL\nTHL---|INT     LO|---BOOL\n      +----------+\n     +---+\nIN---| > |---+-----------------HI\nTHI--|   |   |  +-"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 472,
    "text": "–\n      +----------+\n      | ALRM_INT |\nIN----|INT       |---BOOL\nTHI---|INT     HI|---BOOL\nTHL---|INT     LO|---BOOL\n      +----------+\n     +---+\nIN---| > |---+-----------------HI\nTHI--|   |   |  +----+\n     +---+   +--| OR |---ALRM_INT\n            +---|    |\n     +---+  |   +----+\nIN---| < |--+------------------LO\nTHL--|   |\n     +---+\nFUNCTION ALRM_INT : BOOL\nVAR_INPUT\n  INT : IN ;\n  INT : THI ; (* High threshold *)\n  INT : TLO ; (* Low threshold *)\nEND_VAR\nVAR_OUTPUT\n  HI: BOOL; (* High level alarm *)\n  LO: BOOL; (* Low level alarm *)\nEND_VAR\nHI := IN > THI ;\nLO := IN < THL ;\nALRM_INT := THI OR THL ;\nEND_FUNCTION\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 208 – 61131-3  IEC:2003(E)\nANNEX G\n(informative)\nReference character set\nNOTE 1 The contents of the most recent edition of “table 1Row 00: ISO-646 IRV” of ISO/IEC\n10646-1 are normative for the purposes of this standard.  The reference character set is\nreproduced here for information only.\nNOTE 2 In variables of type \nSTRING, the individual byte encodings of the charact"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 473,
    "text": "are normative for the purposes of this standard.  The reference character set is\nreproduced here for information only.\nNOTE 2 In variables of type \nSTRING, the individual byte encodings of the characters in this\nreference character set are as given in table H.2.  In variables of type WSTRING, the\nnumerical equivalent of individual 16-bit word encodings are  also as given in table H.2.\nTable G.1 - Character representations\nFirst hexadecimal digit\nSecond\nhexadecimal\ndigit\n234567\n0 0@P`p\n1 !1AQaq\n2 \"2BRbr\n3 #3CScs\n4 $4DTdt\n5 %5EUeu\n6 &6FVfv\n7 '7GWgw\n8 (8HXhx\n9 )9IYiy\nA *:JZjz\nB +;K[k{\nC ,<L\\l|\nD -=M]m}\nE .>N^n~\nF /?O_o\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 209 –\nTable G.2 - Character encodings\ndec hex Name dec hex Name\n032 20 SPACE 080 50 LATIN CAPITAL LETTER P\n033 21 EXCLAMATION MARK 081 51 LATIN CAPITAL LETTER Q\n034 22 QUOTATION MARK 082 52 LATIN CAPITAL LETTER R\n035 23 NUMBER SIGN 083 53 LATIN CAPITAL LETTER S\n036 24 DOLLAR SIGN 084 54 LATIN CAPITAL LETTER T\n037 25 PERCENT SIGN 085 55 LATIN CAPITAL"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 474,
    "text": "LETTER Q\n034 22 QUOTATION MARK 082 52 LATIN CAPITAL LETTER R\n035 23 NUMBER SIGN 083 53 LATIN CAPITAL LETTER S\n036 24 DOLLAR SIGN 084 54 LATIN CAPITAL LETTER T\n037 25 PERCENT SIGN 085 55 LATIN CAPITAL LETTER U\n038 26 AMPERSAND 086 56 LATIN CAPITAL LETTER V\n039 27 APOSTROPHE 087 57 LATIN CAPITAL LETTER W\n040 28 LEFT PARENTHESIS 088 58 LATIN CAPITAL LETTER X\n041 29 RIGHT PARENTHESIS 089 59 LATIN CAPITAL LETTER Y\n042 2A ASTERISK 090 5A LATIN CAPITAL LETTER Z\n043 2B PLUS SIGN 091 5B LEFT SQUARE BRACKET\n044 2C COMMA 092 5C REVERSE SOLIDUS\n045 2D HYPHEN-MINUS 093 5D RIGHT SQUARE BRACKET\n046 2E FULL STOP 094 5E CIRCUMFLEX ACCENT\n047 2F SOLIDUS 095 5F LOW LINE\n048 30 DIGIT ZERO 096 60 GRAVE ACCENT\n049 31 DIGIT ONE 097 61 LATIN SMALL LETTER A\n050 32 DIGIT TWO 098 62 LATIN SMALL LETTER B\n051 33 DIGIT THREE 099 63 LATIN SMALL LETTER C\n052 34 DIGIT FOUR 100 64 LATIN SMALL LETTER D\n053 35 DIGIT FIVE 101 65 LATIN SMALL LETTER E\n054 36 DIGIT SIX 102 66 LATIN SMALL LETTER F\n055 37 DIGIT SEVEN 103 67 LATIN SMALL LETTER G\n056 38 DIGIT EIGHT 104 68 LATIN SMALL LETTER H\n057 39 DIGIT NINE 105 69 LATIN SMALL LETTER I\n058 3A COLON 106 6A LATIN SMALL LETTER J\n059 3B SEMICOLON 107 6B LATIN SMALL LETTER K\n06"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 475,
    "text": "TIN SMALL LETTER G\n056 38 DIGIT EIGHT 104 68 LATIN SMALL LETTER H\n057 39 DIGIT NINE 105 69 LATIN SMALL LETTER I\n058 3A COLON 106 6A LATIN SMALL LETTER J\n059 3B SEMICOLON 107 6B LATIN SMALL LETTER K\n060 3C LESS-THAN SIGN 108 6C LATIN SMALL LETTER L\n061 3D EQUALS SIGN 109 6D LATIN SMALL LETTER M\n062 3E GREATER-THAN SIGN 110 6E LATIN SMALL LETTER N\n063 3F QUESTION MARK 111 6F LATIN SMALL LETTER O\n064 40 COMMERCIAL AT 112 70 LATIN SMALL LETTER P\n065 41 LATIN CAPITAL LETTER A 113 71 LATIN SMALL LETTER Q\n066 42 LATIN CAPITAL LETTER B 114 72 LATIN SMALL LETTER R\n067 43 LATIN CAPITAL LETTER C 115 73 LATIN SMALL LETTER S\n068 44 LATIN CAPITAL LETTER D 116 74 LATIN SMALL LETTER T\n069 45 LATIN CAPITAL LETTER E 117 75 LATIN SMALL LETTER U\n070 46 LATIN CAPITAL LETTER F 118 76 LATIN SMALL LETTER V\n071 47 LATIN CAPITAL LETTER G 119 77 LATIN SMALL LETTER W\n072 48 LATIN CAPITAL LETTER H 120 78 LATIN SMALL LETTER X\n073 49 LATIN CAPITAL LETTER I 121 79 LATIN SMALL LETTER Y\n074 4A LATIN CAPITAL LETTER J 122 7A LATIN SMALL LETTER Z\n075 4B LATIN CAPITAL LETTER K 123 7B LEFT CURLY BRACKET\n076 4C LATIN CAPITAL LETTER L 124 7C VERTICAL LINE\n077 4D LATIN CAPITAL LETTER M 125 7D RIGHT CURLY BRACKET\n078 4E LAT"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 476,
    "text": "2 7A LATIN SMALL LETTER Z\n075 4B LATIN CAPITAL LETTER K 123 7B LEFT CURLY BRACKET\n076 4C LATIN CAPITAL LETTER L 124 7C VERTICAL LINE\n077 4D LATIN CAPITAL LETTER M 125 7D RIGHT CURLY BRACKET\n078 4E LATIN CAPITAL LETTER N 126 7E TILDE\n079 4F LATIN CAPITAL LETTER O\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 210 – 61131-3  IEC:2003(E)\nIndex\nPrimary references for delimiters and keywords are given in annex C.\nabsolute time, 28\naccess path, 108, 110\ncommunication, 16\nkeyword, 39\nloading/deletion, 16\nprogramming, 18\naction, 84, 89, 123\ncontrol, 94\nqualifiers, 93\naction block, 89, 91, 92, 95\nactive association, 95\nactive association, 95\nactivity flow, 135\naggregate, 10\nargument, 66, 130, 133\narray\ndeclaration, 32, 42\ninitialization, 33, 42\nlocation assignment, 42\nusage, 38, 134\nassignment, 86\nFOR loop variable values, 134\noperator, 33, 86\nstatement, 133\nassignment, 47, 49, 51, 68\nbased number, 10, 25\nbistable function block, 77\nbit string\ncomparison, 59\ndata types, 30\nfunctions, 59\ninitial value assignment, 42\nvariable declaration,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 477,
    "text": "86\nstatement, 133\nassignment, 47, 49, 51, 68\nbased number, 10, 25\nbistable function block, 77\nbit string\ncomparison, 59\ndata types, 30\nfunctions, 59\ninitial value assignment, 42\nvariable declaration, 41\nbody\nfunction, 51, 133\nfunction, 49, 68\nfunction block, 66\nprogram organization unit, 136\nBoolean\nAND, in ladder diagrams, 140\ndata type, 30\ndefault initial value, 34\nedge detection, 69, 78\nexpression, 86, 130, 133, 134\nfunctions, 59\nfunctions, 95\ninput, action control, 95\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 211 –\ninput, RETURN, 138\nliterals, 25\nnegation, 47\noperators, 130\nOR, LD vs. FBD, 143\noutput, 138\nsignal, 138\nvalues, power flow, 139\nvariable, 84, 85, 89, 90, 94, 114, 134, 138\nvariable, in ladder diagrams, 140\nbyte (data element size), 37\nBYTE (data type), 30, 34\ncase (of characters), 23, 24, 28\nCASE statement, 133\ncharacter code, 24, 62\ncharacter set, 23, 84, 135, 141\ncharacter string\ncharacter positions in, 62\ncomparison, 62\ndata type, 30\nfunctions, 62\ninitialization, 42\nliterals, 26\nvariab"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 478,
    "text": "CASE statement, 133\ncharacter code, 24, 62\ncharacter set, 23, 84, 135, 141\ncharacter string\ncharacter positions in, 62\ncomparison, 62\ndata type, 30\nfunctions, 62\ninitialization, 42\nliterals, 26\nvariable declaration, 41\ncold restart, 38, 41, 42, 43, 44\ncomment, 24\ncomparison\nbit strings, 59\ncharacter strings, 62\nfunctions, 59, 66\ncompilation, 21\ncompliance, 19\naction declarations, 89\nEXIT statement, 132\nprograms, 22\nsequential function chart (SFC), 108\nstep/action association, 91\nsyntax, 21\nsystem, 20\nconcatenation\naction blocks, 91, 93\nhierarchical addresses, 36\ntime data, 64\nconditional\njump, 138\nreturn, 138\nconfiguration\ncommunication, 16\nelements, 108\ninitialization, 15\nprogramming, 18\nstarting and stopping, 15\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 212 – 61131-3  IEC:2003(E)\nconnection, 83\nconnector, 86, 88, 135, 136\ncontact, 140\ncounter, 78\ndata type\ncompliance, 21\ndeclaration, 32\nelementary, 30\ngeneric, 31, 53\ninitialization, 33\nof an expression, 129\nof functions, 50\nof internal variables, 50\nprogramming, 18\nusage,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 479,
    "text": "tact, 140\ncounter, 78\ndata type\ncompliance, 21\ndeclaration, 32\nelementary, 30\ngeneric, 31, 53\ninitialization, 33\nof an expression, 129\nof functions, 50\nof internal variables, 50\nprogramming, 18\nusage, 35\ndate and time, 81\ndata types, 30\ndefault initial values, 34\nfunctions, 64\nliterals, 29\ndecimal number (decimal literal), 25, 135\ndeclaration, 18\naccess paths, 110\nactions, 89, 94\nconfigurations, 108\ndata types, 32\nfunction blocks, 66, 69\nfunctions, 50, 133\nprograms, 83\nresources, 110\ntasks, 114\nvariables, 39\ndefault value, 52\nFOR increment, 134\nof data types, 33\nof variables, 38, 42\ntask interval, 114\ndelimiter\ncomments, 24\nLD network, 139\nnetwork label, 135\ntime literals, 28\ndirect representation, 36, 83, 111\nin programs, 83\ninitial value assignment, 42\nvariable declaration, 41\ndouble word, 30\nsize prefix, 37\nduration\ndata type (TIME), 30\nliterals, 28\nof action qualifiers, 93\nof step activity, 100\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 213 –\nedge detection, 69\nfunction blocks, 78\nEN/ENO (enable) var"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 480,
    "text": "IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 213 –\nedge detection, 69\nfunction blocks, 78\nEN/ENO (enable) variables, 49, 50, 68\nerrors, 24, 32, 36, 40, 46, 47, 49, 52, 55, 56, 59, 61, 63, 64, 69, 85, 87, 95, 100, 114, 115, 124, 130,\n133, 134, 137, 167\ndocumentation, 21\nhandling, 21, 22\nreporting, 21\nerrors, 85, 100, 135\nevaluation\nof assignment statements, 133\nof expressions, 129\nof function blocks, 115\nof functions, 58, 130, 133\nof language elements, 115\nof network elements, 136\nof networks, 66, 136, 141, 143\nof programs, 115\nof transitions, 100\nexecution\nof actions, 84\nof EXIT statements, 134\nof function blocks, 66, 78, 115\nof functions, 49\nof iteration statements, 134\nof loop elements, 137\nof programs, 138\nof selection statements, 133\nexecution control element, 84, 114, 136, 138, 141\nextensions, 21, 37\ndocumentation, 21\nprocessing, 21\nusage, 22\nextensions, 24\nfalling edge, 69, 71, 78\nfeedback\npath, 137\nvariable, 137\nFOR statement, 134\nfunction, 45\ncompliance, 21\ncontrol statements, 133\nextensible, 55\nin LD language, 140\noverloaded, 53, 56, 59\nprogramming, 18\nreturn value, 133\nsignal flow,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 481,
    "text": "path, 137\nvariable, 137\nFOR statement, 134\nfunction, 45\ncompliance, 21\ncontrol statements, 133\nextensible, 55\nin LD language, 140\noverloaded, 53, 56, 59\nprogramming, 18\nreturn value, 133\nsignal flow, 135\ntyping, 53\nfunction (procedure), 11\nfunction block, 11, 14, 66\naction control, 94\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 214 – 61131-3  IEC:2003(E)\ncommunication, 16, 83\ncompliance, 21\ncontrol statements, 133\nin LD language, 140\ninstance, 114, 115\noperation, 78, 81\nprogramming, 18\nretentive, 85\nSFC structuring, 84\nsignal flow, 135\ntype, 67\nfunction block diagram, 11\nfunction block diagram (FBD), 14, 143\naction blocks in, 93\nexecution control, 138\nloops in, 137\nsignal flow in, 135\nfunction block instance, 11\nfunction block type, 11\ngeneric data types, 31, 53\nglobal variable, 108\ncommunication, 16\ndeclaration, 39, 83, 110\nfunction block instance, 66\ninitial value assignment, 42\ninitialization, 15\nloading/deletion, 16\nprogramming, 18\nhierarchical addressing, 37\nidentifier, 23, 66, 84, 86, 135\nidentifier, 50\nimplementation-d"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 482,
    "text": "tion block instance, 66\ninitial value assignment, 42\ninitialization, 15\nloading/deletion, 16\nprogramming, 18\nhierarchical addressing, 37\nidentifier, 23, 66, 84, 86, 135\nidentifier, 50\nimplementation-dependent\nfeature, 21, 22, 38, 42, 134\nside effects, 68\nimplementation-dependent parameters, 20, 24, 32, 33, 37, 40, 45, 51, 55, 56, 66, 81, 83, 85, 87, 91,\n100, 114, 129, 131, 133, 135, 165\ninitial\nstate, 84\nstep, 84, 85, 99\ninitial value\nassignment, 42\ndefault, 33\nfeedback variable, 137\nFOR loop variable, 134\ninitialization, 38\nfunction blocks, 69\nfunction blocks, 99\nprograms, 83\nprograms, 99\nSFC networks, 99\nsteps, 85\ninitialization, 15\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 215 –\ninput\ndeclaration, 39, 50, 69\ndynamic, 69\nextensible, 55\ninitialization, 38\ninstance name, 66\nlocation prefix, 37\nnegated, 47\noverloaded, 53\nprogram, 111\nstring, 56\nvariable, 67, 140\nvariable, 83\ninput/output\nvariable, 66\ninstance\nfunction block, 66, 67, 69, 70, 71, 114, 115\nname, 66, 67, 70, 71\ninstantiation\naction control,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 483,
    "text": "verloaded, 53\nprogram, 111\nstring, 56\nvariable, 67, 140\nvariable, 83\ninput/output\nvariable, 66\ninstance\nfunction block, 66, 67, 69, 70, 71, 114, 115\nname, 66, 67, 70, 71\ninstantiation\naction control, 95\nfunction block, 83\nprogram, 83\ninstruction, 86, 89\ninteger\ndata types, 30, 134\nliteral, 12, 25, 135\ninvocation\nby tasks, 114\nfunction block, 133\nfunction block, 66, 67, 69\nof actions, 84\nof functions, 129\nof non-PC language elements, 18\nrecursive, 45\nreturn from, 138\niteration, 132, 134\nkeyword, 24\nBoolean literals, 26, 86\ndata types, 30\nELSE statement, 133\nFOR statement, 134\nfunction block declaration, 69\nfunction declaration, 50\nIF statement, 133\nprogram declaration, 83\nREPEAT statement, 134\ntime literals, 28\ntransition, 86\nvariable declaration, 39\nWHILE statement, 134\nlabel\nconnector, 135\nnetwork, 135, 136, 138\nladder diagram, 139\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 216 – 61131-3  IEC:2003(E)\nevaluation, 136\nexecution control, 138\nnetwork, 86\nlanguage element, 14\ncompliance, 19\nprogramming, 18, 83\nlibrary, 18, 110\nl"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 484,
    "text": "license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 216 – 61131-3  IEC:2003(E)\nevaluation, 136\nexecution control, 138\nnetwork, 86\nlanguage element, 14\ncompliance, 19\nprogramming, 18, 83\nlibrary, 18, 110\nliteral, 25, 129, 139\nlogical location, 36, 37, 39, 41\nlong real, 30\nlong word, 30\nmemory, 140\nmemory (user data storage)\nallocation, 39\ndirect representation, 36\ninitial value assignment, 42\ninitialization, 38\nnamed element, 38, 135\nnetwork, 12, 94\ndirection of flow, 135\nevaluation, 66, 136, 141, 143\nfunction block diagram (FBD), 86, 89\nlabel, 138\nladder diagram (LD), 86, 139\nsequential function chart (SFC), 84, 98, 99\nnetwork, 135\nnumeric literals, 25\noff-delay, 12, 81\non-delay, 12, 81\noperand\nof an expression, 129\noperator\nassignment, 33, 86, 133\noverloaded, 53\nprecedence, 129, 130\nStructured Text (ST), 129\nsymbols, 58, 60, 62, 65\noutput\naction control, 94\ndeclaration, 69\nfunction block, 132, 143\nlocation prefix, 37\nnegated, 47\nprogram, 111\nstring, 56\ntyped, 53\nvalues, 66\nvariable declaration, 39\nvariables, 67, 83, 140\nvariables, 66\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted withou"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 485,
    "text": "ation, 39\nvariables, 67, 83, 140\nvariables, 66\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 217 –\noverloading, 53\nof operators, 130\nparentheses, 24, 33, 38, 43, 86, 130\npower flow, 93, 135, 138, 139, 141\npower rails, 139\npower rails, 135, 138, 139\npre-emptive scheduling, 114\npriority\nof tasks, 114\nof transitions, 100\nprogram, 14, 18, 83\ncommunication, 16\ncompliance, 22\ndeclaration, 39, 83, 111\ndeclaration, 66, 75\nretentive, 85\nscheduling, 114\nSFC structuring, 84\nprogram organization unit, 45, 66\ncompliance, 20\ndeclaration, 39, 46\ninitial state, 84\njumps in, 138\nnetworks in, 135, 136, 141\nscheduling, 114\nSFC partitioning of, 84\nstate, 84\nprogramming, 18, 139\nprogramming, 143\nreal literal, 25\nresource, 14, 83\ncommunication, 17\ndeclaration, 110\nglobal variables in, 111\ninitialization, 15, 38\nprogramming, 18\nstarting and stopping, 15, 115\nretentive data\ndeclaration, 39, 83\nin function blocks, 69\nin steps, 85\ninitial value assignment, 42\ninitialization, 38\ntype assignment, 41\nreturn, 132, 133, 138\nrising edge,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 486,
    "text": "ing and stopping, 15, 115\nretentive data\ndeclaration, 39, 83\nin function blocks, 69\nin steps, 85\ninitial value assignment, 42\ninitialization, 38\ntype assignment, 41\nreturn, 132, 133, 138\nrising edge, 69, 71, 78, 114, 206\nrung, 139\nrung, 89\nscope\nglobal, 111\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n– 218 – 61131-3  IEC:2003(E)\nof actions, 89\nof declarations, 40\nof function block instances, 66\nof networks, 135\nof steps, 84\nof transitions, 87\nselection\nfunctions, 59, 66\nstatements, 133\nsemantics\nStructured Text (ST), 129\nsemigraphic representation, 69, 114, 135, 136\nsequential function chart (SFC)\nactivity flow, 135\ncompliance, 108\nconvergence, simultaneous, 100\ndivergence, selection, 100\ndivergence, simultaneous, 100\nelements, 14, 84\nelements, 123, 134, 135\nelements, compatibility of, 107\nerrors, 100\nevolution, 99\nprogramming, 18\nsignal flow, 135, 143\nsingle data element, 35, 36\nstep, 84\naction association, 91\nactivation, 100\nactivation, 99\nactive, 84, 85, 100\nactive, 95\ndeactivation, 84, 91, 99\nduration, 100\nelapsed time, 84,"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 487,
    "text": "signal flow, 135, 143\nsingle data element, 35, 36\nstep, 84\naction association, 91\nactivation, 100\nactivation, 99\nactive, 84, 85, 100\nactive, 95\ndeactivation, 84, 91, 99\nduration, 100\nelapsed time, 84, 85\nflag, 84, 85\ninactive, 84\ninitial, 84, 85, 99\ninitialization, 85\nretentive, 85\nstate, 84, 99, 100, 105\nstructured data type, 67\ndeclaration, 32\ninitialization, 33\nusage, 35\nstructured variable, 38\nassignment, 133\ndeclaration, 42\ninitialization, 42\nstep elements, 84\nsubscripting, 38\narray initialization, 43\nsymbolic representation, 36, 41\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n61131-3  IEC:2003(E) – 219 –\nsynchronization\ninterprocess, 134\nof function blocks, 114\nsyntax, 14\ndocumentation, 21\nstep/transition, 100\ntask, 14, 114\ndeclaration, 110\nprogramming, 18\nTIME data type, 30, 84, 85, 93\ndefault initial value, 34\nfunction blocks, 81\nfunctions, 64\ntime literal, 28\ntime of day\ndata types, 30\ndefault initial value, 34\nfunctions, 64\nkeywords, 29\nliterals, 28\ntimer, 81\ntransition, 84, 86\nclearing, 99, 100\nclearing time, 100\ncond"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 488,
    "text": "s, 81\nfunctions, 64\ntime literal, 28\ntime of day\ndata types, 30\ndefault initial value, 34\nfunctions, 64\nkeywords, 29\nliterals, 28\ntimer, 81\ntransition, 84, 86\nclearing, 99, 100\nclearing time, 100\ncondition, 84, 86, 89, 99\nenabled, 99\nevaluation, 100\npriority, 100\nsymbol, 99\ntype conversion\nfunctions, 53, 55\ntyped literals, 26\nunderline character, 23, 25, 53\nunsigned integer, 135\ndata types, 30\nvariable, 36\ndeclaration, 50, 69\nusage, 35\nWAIT function, 89, 134\nwarm restart, 38\nwhite space, 24\nwired OR, 143\n____________\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n \n \nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n    \nStandards Survey\nThe IEC would like to offer you the best quality standards possible. To make sure that we\ncontinue to meet your needs, your feedback is essential. Would you please take a minute\nto answer the questions overleaf and fax them to us at +41 22 919 03 00 o"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 489,
    "text": "andards possible. To make sure that we\ncontinue to meet your needs, your feedback is essential. Would you please take a minute\nto answer the questions overleaf and fax them to us at +41 22 919 03 00 or mail them to\nthe address below. Thank you!\nCustomer Service Centre (CSC)\nInternational Electrotechnical Commission\n3, rue de Varembé\n1211 Genève 20\nSwitzerland\nor\nFax to: IEC/CSC at +41 22 919 03 00\nThank you for your contribution to the standards-making process.\nN on affrancare\nNo  stam p required\nNicht frankieren\nN e pas affranchir\n A   Prioritaire\nRÉPONSE P AYÉE\nSUISSE\nCustomer Service Centre (CSC)\nInternational Electrotechnical Commission\n3, rue de Varembé\n1211  G ENEVA 20\nSw itzerland\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\nQ1 Please report on ONE STANDARD  and\nONE STANDARD ONLY . Enter the exact\nnumber of the standard: (e.g. 60601-1-1)\n.............................................................\nQ2 Please tell us in what capacity(ies) you\nbought the standard (tick all that apply).\nI am the/a:\npurchasing agent /G52\nlibra"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 490,
    "text": "60601-1-1)\n.............................................................\nQ2 Please tell us in what capacity(ies) you\nbought the standard (tick all that apply).\nI am the/a:\npurchasing agent /G52\nlibrarian /G52\nresearcher /G52\ndesign engineer /G52\nsafety engineer /G52\ntesting engineer /G52\nmarketing specialist /G52\nother.....................................................\nQ3 I work for/in/as a:\n(tick all that apply)\nmanufacturing /G52\nconsultant /G52\ngovernment /G52\ntest/certification facility /G52\npublic utility /G52\neducation /G52\nmilitary /G52\nother.....................................................\nQ4   This standard will be used for:\n(tick all that apply)\ngeneral reference /G52\nproduct research /G52\nproduct design/development /G52\nspecifications /G52\ntenders /G52\nquality assessment /G52\ncertification /G52\ntechnical documentation /G52\nthesis /G52\nmanufacturing /G52\nother.....................................................\nQ5 This standard meets my needs:\n(tick one)\nnot at all /G52\nnearly /G52\nfairly well /G52\nexactly /G52\nQ6 If you ticked NOT AT ALL in Question 5\nthe reason is: (tick all that apply)\nstandard is out of date /G52\nstandard is incomplete /G52\nstandard is too aca"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 491,
    "text": "52\nnearly /G52\nfairly well /G52\nexactly /G52\nQ6 If you ticked NOT AT ALL in Question 5\nthe reason is: (tick all that apply)\nstandard is out of date /G52\nstandard is incomplete /G52\nstandard is too academic /G52\nstandard is too superficial /G52\ntitle is misleading /G52\nI made the wrong choice /G52\nother ....................................................\nQ7 Please assess the standard in the\nfollowing categories, using\nthe numbers:\n(1) unacceptable,\n(2) below average,\n(3) average,\n(4) above average,\n(5) exceptional,\n(6) not applicable \ntimeliness.............................................\nquality of writing....................................\ntechnical contents.................................\nlogic of arrangement of contents ..........\ntables, charts, graphs, figures...............\nother ....................................................\nQ8 I read/use the: \n(tick one)\nFrench text only /G52\nEnglish text only /G52\nboth English and French texts /G52\nQ9 Please share any comment on any\naspect of the IEC that you would like\nus to know:\n............................................................\n............................................................\n............................"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 492,
    "text": "aspect of the IEC that you would like\nus to know:\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n \n \nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n \n \n    ISBN 2"
  },
  {
    "source": "IEC overview.pdf",
    "page_chunk_index": 493,
    "text": "rnational Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---\n\n \n \n    ISBN 2-8318-6653-7\n-:HSMINB=][[ZX[:\nICS  25.040;  35.240.50 \nTypeset and printed by the IEC Central Office \nGENEVA, SWITZERLAND \nCopyright International Electrotechnical Commission \nProvided by IHS under license with IEC\nNot for Resale\nNo reproduction or networking permitted without license from IHS\n--``````-`-`,,`,,`,`,,`---"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 0,
    "text": "Data Sheet \n2101127-AB \nOverview of the IEC 61131 Standard \nXSeries Products \nIEC 61131 General \nINTRODUCTION \n \nIEC 61131-3 is the first real endeavor to standardize \nprogramming languages for industrial automation. \nWith its worldwide support, it is independent of any \nsingle company. \n \nIEC 61131-3 standard is the result of a task force \n(IEC TC65 SC655B) comprised of seven or more \ninternational companies, representing several  \ndecades of experience in the field of industrial  \nautomation. The standard, 200 pages of text, with \nover 60 features tables, specifies the syntax and  \nsemantics of a unified suit of programming languages \nand a structuring language.  It is organized as: \n \n• Part 1 General Overview \n• Part 2 Hardware \n• Part 3 Programming Languages \n• Part 4 User Guidelines \n• Part 5 Communication \n \nOne way to view the standard is by splitting it into two \nparts: \n \n1. Common Elements \n2. Programming Languages \n \nLet’s look more in detail to these parts: \n \nCOMMON ELEMENTS \n \nData Typing \nWithin the common elements, the data types are  \ndefined. Data typing prevents errors in an early \nstage.  It is used to define the type of any parameter \nused. This avoids, for in"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 1,
    "text": "NTS \n \nData Typing \nWithin the common elements, the data types are  \ndefined. Data typing prevents errors in an early \nstage.  It is used to define the type of any parameter \nused. This avoids, for instance, dividing a Date by an \nInteger. \n \nCommon data types are Boolean, Integer, Real, Byte \nand Word, but also Date, Time-of-Day and String. \nBased on these, one can define their own personal \ndata types, known as derived data types. In this way \none can define an analog input channel as a data \ntype, and re-use this over an over again. \n \nVariables \nVariables are only assigned to explicit hardware  \naddresses (e.g. input and outputs) in configurations, \nresources or programs. In this way a high level of \nhardware independency is created, supporting the \nreusability of the software. \n \nThe scope of the variables is normally limited to the \norganization unit in which they are declared, e.g.  \nlocal. This means that their names can be reused in \nother parts without any conflict, eliminating another \nsource of errors, e.g. the scratchpad. If the variables \nshould have global scope, they have to be declared \nas such (VAR_GLOBAL). Parameters can be  \nassigned an initial value at start up"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 2,
    "text": "ng another \nsource of errors, e.g. the scratchpad. If the variables \nshould have global scope, they have to be declared \nas such (VAR_GLOBAL). Parameters can be  \nassigned an initial value at start up and cold restart, \nin order to begin with the correct value. \n \nConfiguration, Resources and Tasks \nTo understand these better, let us look at the  \nsoftware model, as defined in the standard  \n(see below). \n \nAt the highest level, the entire software required to \nsolve a particular control problem can be formulated \nas a Configuration.  A configuration is specific to a \nparticular type of control system, including the  \narrangement of the hardware, i.e. processing  \nresources, memory addresses for I/O channels and \nsystem capabilities. \nThe IEC 1131-3 Standard\nCommon Elements\nProgramming Languages\nAccess path\nExecution\ncontrol path\nFBTask\nProgram Program\nFB FB\nTask\nProgram\nTask\nProgram\nFB FB\nTask\nResource Resource\nConfiguration\nFunction\nBlock\n\nOverview of the IEC 61131 Standard 2101127-AB \n2 \nWithin a configuration one can define one or more \nResources.  One can look at a resource as a  \nprocessing facility that is able to execute IEC  \nprograms.  Within a resource, one or more Tasks"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 3,
    "text": "B \n2 \nWithin a configuration one can define one or more \nResources.  One can look at a resource as a  \nprocessing facility that is able to execute IEC  \nprograms.  Within a resource, one or more Tasks \ncan be defined.  Tasks control the execution of a set \nof programs and/or function blocks.  These can either \nbe executed periodically or upon the occurrence of a \nspecified trigger, such as the change of a variable. \n \nPrograms are built from a number of different  \nsoftware elements written in any of the IEC defined \nlanguages.  Typically, a program consists of a  \nnetwork of Functions and Function Blocks, which \nare able to exchange data.  Function and Function \nBlocks are the basic building blocks, containing a \ndata structure and an algorithm. \n \nLet’s compare this to a conventional PLC: this  \ncontains one resource, running one task, controlling \none program, running in a closed loop. IEC 61131-3 \nadds much to this, making it open to systems  \ninvolving multi-processing and event driven  \nprograms, which are properties required in more \ncomplex distributed systems and real-time control \nsystems.  IEC 61131-3 is suitable for a broad range \nof applications, without having to lear"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 4,
    "text": "riven  \nprograms, which are properties required in more \ncomplex distributed systems and real-time control \nsystems.  IEC 61131-3 is suitable for a broad range \nof applications, without having to learn additional  \nprogramming languages. \n \nProgram Organization Units \nWithin IEC 61131-3, the Programs, Function Blocks \nand Functions are called Program Organization \nUnits, POUs. \n \nFunctions \nIEC includes defined standard functions and supports \nuser defined functions.  Standard functions are for \ninstance ADD (addition), ABS (absolute), SQRT, SIN \nand COS.  User defined functions, once defined, can \nbe used over and over again. \n \nFunction Blocks, FBs \nFunction Blocks are the equivalent to Integrated  \nCircuits, ICs, representing a specialized control  \nfunction.  They contain data as well as an algorithm.  \nThey have a well-defined interface and hidden  \ninternals, like an IC or black box.  In this way they \ngive a clear separation between different levels of \nprogrammers, or maintenance people.  With these \ncharacteristics, Functions and Function Blocks  \nreflect best practices as embraced by object-oriented \nprinciples. \n \nA temperature control loop, or PID, is an excellent \nexam"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 5,
    "text": "ce people.  With these \ncharacteristics, Functions and Function Blocks  \nreflect best practices as embraced by object-oriented \nprinciples. \n \nA temperature control loop, or PID, is an excellent \nexample of a Function Block.  Once defined, it can be \nused over and over again, in the same program,  \ndifferent programs, or even different projects.  This \nmakes them highly re-usable. \n \nFunction Blocks can be written in any of the IEC  \nlanguages, and in most cases even in “C”.  It this way \nthey can be defined by the user.  Derived Function \nBlocks are based on the standard defined FBs.  \nCompletely new, customized FBs are also possible \nwithin the standard. \n \nPrograms \nWith the above-mentioned basic building blocks, one \ncan say that a program is a network of Functions and \nFunction Blocks. A program can be written in any of \nthe defined programming languages. \n \nSequential Function Chart, SFC \nSFC graphically describes the sequential behavior of \na control program.  It is derived from Petri Nets and \nIEC 848 Grafcet, with the changes necessary to  \nconvert the representation from a documentation-\nstandard to a set of execution control elements. \n \nSFC structures the internal organ"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 6,
    "text": "Petri Nets and \nIEC 848 Grafcet, with the changes necessary to  \nconvert the representation from a documentation-\nstandard to a set of execution control elements. \n \nSFC structures the internal organization of a  \nprogram, and helps to decompose a control problem \ninto manageable parts, while maintaining the  \noverview.  SFC consists of Steps, linked with Action \nBlocks and Transitions.  Each step represents a  \nparticular state of the systems being controlled.  A \ntransition is associated with a condition, which, when \ntrue, causes the step before the transition to be  \ndeactivated, and the next step to be activated.  Steps \nare linked to action blocks, performing a certain  \ncontrol action. \n \nEach element can be programmed in any of the IEC \nlanguages, including SFC itself. \n \nStep 1           N      FILL\nStep 3\nStep 2           S     Empty\nTransition 1\nTransition 2\n\nOverview of the IEC 61131 Standard 2101127-AB \n3 \nOne can use alternative sequences and even parallel \nsequences, such as commonly required in batch  \napplications.  For instance, one sequence is used for \nthe primary process, and the second for monitoring \nthe overall operating constraints. \n \nBecause of its gener"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 7,
    "text": "ch as commonly required in batch  \napplications.  For instance, one sequence is used for \nthe primary process, and the second for monitoring \nthe overall operating constraints. \n \nBecause of its general structure, SFC also provides a \ncommunication and documentation tool, combining \npeople of different backgrounds, departments or \ncountries. \n \nPROGRAMMING LANGUAGES \n \nWithin the standard four programming languages are \ndefined.  This means that their syntax and semantics \nhave been defined, leaving no room for dialects.  \nOnce you have learned them, you can use a wide \nvariety of systems based on this standard. \n \nThere are four unique languages; two that are textual \ntwo that are graphical: \n• Textual \n• Instruction List, IL \n• Structured Text, ST \n• Graphical \n• Ladder Diagram, LD \n• Function Block Diagram, FBD \n \nIn the above figure, all four languages describe the \nsame simple program part. \n \nThe choice of programming language is dependent \non: \n• The programmers’ background \n• The problem at hand \n• How thoroughly the problem is specified \n• The structure of the control system \n• The interface to other people / departments \n \nAll four languages are interlinked: they provide"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 8,
    "text": "he problem at hand \n• How thoroughly the problem is specified \n• The structure of the control system \n• The interface to other people / departments \n \nAll four languages are interlinked: they provide a \ncommon suite, with a link to existing experience.  In \nthis way they also provide a communication tool, \ncombining people of different backgrounds. \n \nLadder Diagram has its roots in the USA.  It is based \non the graphical presentation of Relay Ladder Logic. \n \nInstruction List is its European counterpart.  As a  \ntextual language, it resembles assembler. \n \nFunction Block Diagram is very common to the  \nprocess industry.  It expresses the behavior of  \nfunctions, function blocks and programs as a set of  \ninterconnected graphical blocks, like in electronic \ncircuit diagrams. It looks at a system in terms of the \nflow of signals between processing elements. \n \nStructured Text is a very powerful language with its \nroots in Ada, Pascal and “C”.  It is well suited for, and \ncan be used to define the nature of complex Function \nBlocks, which can then be used within any of the \nother languages. \n \nTop-down vs. Bottom-up \nAlso, the standard allows two ways of developing \nyour program: top"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 9,
    "text": "define the nature of complex Function \nBlocks, which can then be used within any of the \nother languages. \n \nTop-down vs. Bottom-up \nAlso, the standard allows two ways of developing \nyour program: top down and bottom up.  Either you \nspecify your whole application and divide it into sub \nparts, declare your variables, and so on or you start \nprogramming your application at the bottom, for  \ninstance via derived functions and function blocks.  \n \nOften complex projects are implemented using a \ncombination of both approaches.  Whatever you \nchoose, the development environment will help you \nthrough the whole process. \n \nCommon Elements\nProgramming Languages\nTop Down\nBottom Up\nInstruction List  (IL)                 Structured Text (ST)\nFunction Block Diagram  (FBD) Ladder Diagram (LD)\nLD A\nANDN B\nST C\nC:= A   AND  NOT B\n A   B                    C\n-| |--|/|----------------(  )\nAND\nA                  C\nB\n\nOverview of the IEC 61131 Standard 2101127-AB \nCONCLUSION \n \nThe technical implications of the IEC 61131-3  \nstandard are high, leaving enough room for growth \nand differentiation.  This makes this standard suitable \nto evolve well into the next century. \n \nIEC 61131-3 will have a gre"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 10,
    "text": "ns of the IEC 61131-3  \nstandard are high, leaving enough room for growth \nand differentiation.  This makes this standard suitable \nto evolve well into the next century. \n \nIEC 61131-3 will have a great impact on the whole \ncontrol industry.  It certainly will not restrict itself to \nthe conventional PLC market.  \n \nNowadays, one sees it adopted in the motion control \nmarket, distributed systems and Softlogic / PC based \ncontrol systems, including SCADA packages.  And \nthe areas are still growing. \n \nHaving a standard over such a broad application \narea brings numerous benefits for users and  \nprogrammers: \n• Reduced waste of human resources, in training, \ndebugging, maintenance and consultancy. \n• Creating a focus to problem solving via a high \nlevel of software reusability. \n• Reduced misunderstanding and errors. \n• Programming techniques usable in a broad  \nenvironment: general industrial control. \n• Combining different components form different \nprograms, projects, locations, companies and/or \ncountries. \n \nAPPLICATION TO ABB TOTALFLOW’S  \nXSERIES TECHNOLOGY \n \nAs recognized above, IEC 61131-3 need not be  \nrestricted to conventional PLC markets.  At ABB  \nTotalflow, we believe"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 11,
    "text": "nies and/or \ncountries. \n \nAPPLICATION TO ABB TOTALFLOW’S  \nXSERIES TECHNOLOGY \n \nAs recognized above, IEC 61131-3 need not be  \nrestricted to conventional PLC markets.  At ABB  \nTotalflow, we believe the integration of IEC 61131-3 \ninto technology such as ours represents a significant \nstep forward. \n \nWith IEC 61131-3, our customers (whether end-users \nor integrators or OEM companies) are provided a \nglobally recognized software environment that is well \nsuited to many measurement and control  \napplications. \n \nAlong with Totalflow’s pre-built, industry focused  \napplications, integration of the IEC 61131-3 into our \nRenaissance Software Architecture provides a  \npowerful suite of tools, the combination of which is \ndefinitely greater the mere sum of the parts. \nPower and Productivity \nfor a Better World. ™ \nwww.abb.com/totalflow \nwww.abb.us \nwww.abb.com \nABB Inc. \nTotalflow Products \n7051 Industrial Blvd. \nBartlesville, OK  74006 \nTel:   (918) 338-4888 \nFax:  (918) 338-4699 \n         (800) 442-3097 \nABB Inc. \nTotalflow Products \n433 Northpark Central Dr.,  Ste. 100 \nHouston, TX  77073 \nTel:   (281) 869-5212 \nFax:  (281) 869-5203 \n         (800) 442-3097 \nFor more information, \np"
  },
  {
    "source": "ABB IEC syntax.pdf",
    "page_chunk_index": 12,
    "text": "(800) 442-3097 \nABB Inc. \nTotalflow Products \n433 Northpark Central Dr.,  Ste. 100 \nHouston, TX  77073 \nTel:   (281) 869-5212 \nFax:  (281) 869-5203 \n         (800) 442-3097 \nFor more information, \nplease contact your \nlocal ABB Totalflow \nrepresentative or visit \nour website."
  }
]